{
  "openapi": "3.0.1",
  "info": {
    "title": "Turbonomic External API",
    "description": "REST API to access the Turbonomic External API functionality.",
    "version": "v3"
  },
  "servers": [
    {
      "url": "/vmturbo/rest"
    }
  ],
  "tags": [
    {
      "name": "Actions"
    },
    {
      "name": "Admin"
    },
    {
      "name": "Authorization"
    },
    {
      "name": "Business Units"
    },
    {
      "name": "Clients"
    },
    {
      "name": "Entities"
    },
    {
      "name": "Groups"
    },
    {
      "name": "Licenses"
    },
    {
      "name": "Markets"
    },
    {
      "name": "Notifications"
    },
    {
      "name": "Parking"
    },
    {
      "name": "Plan Destinations"
    },
    {
      "name": "Policies"
    },
    {
      "name": "Reservations"
    },
    {
      "name": "Reserved Instances"
    },
    {
      "name": "Savings Investments"
    },
    {
      "name": "Scenarios"
    },
    {
      "name": "Schedule"
    },
    {
      "name": "Search"
    },
    {
      "name": "Settings"
    },
    {
      "name": "Settings Policies"
    },
    {
      "name": "Stats"
    },
    {
      "name": "Supply Chains"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Targets"
    },
    {
      "name": "Templates"
    },
    {
      "name": "Topology Definitions"
    },
    {
      "name": "Users"
    },
    {
      "name": "Workflows"
    },
    {
      "name": "[IN DEVELOPMENT]"
    },
    {
      "name": "[INTERNAL USE - NOT SUPPORTED]"
    }
  ],
  "paths": {
    "/actions": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get a list of actions",
        "operationId": "getActions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get a list of actions by scopeUuids using query parameters.  Maximum of 500 actions per entity scope. The pagination inputs control how many entities (with actions) will be included in a single page.",
        "operationId": "getActionsByUuidsQuery",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Controls the starting point for the results page. When making subsequent calls to retrieve additional results, set this to the cursor returned by the last call to this method. If not set, the first page is returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionScopesApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityActionsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/actions/availablemodes": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get available action modes",
        "operationId": "getAvailActionModes",
        "parameters": [
          {
            "name": "action_type",
            "in": "query",
            "description": "The type of action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "description": "The type of service entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/details": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get a list of action details by multiple actionUuids",
        "operationId": "getActionDetailsByUuids",
        "requestBody": {
          "description": "The action UUIDs list to get details",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScopeUuidsApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ActionDetailsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/actions/executions": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get an Action Execution",
        "operationId": "getActionExecutions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionExecutionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a new Action Execution. Action Execution represents a set of actions to be executed together. Action execution lifetime is limited to a time frame when actions are executed. As soon as all actions are completed (either succeeded or failed) action execution is removed.",
        "operationId": "createActionExecution",
        "requestBody": {
          "description": "Actions to execute",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionExecutionInputApiDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionExecutionApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/actions/executions/{action_execution_id}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get an Action Execution",
        "operationId": "getActionExecution",
        "parameters": [
          {
            "name": "action_execution_id",
            "in": "path",
            "description": "Action execution ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionExecutionApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/actions/stats": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Get the list of action statistics by multiple actionUuids using query parameters",
        "operationId": "getActionStatsByUuidsQuery",
        "requestBody": {
          "description": "The object used to query the action statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionScopesApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/actions/stats/resourceImpacts": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of action resource impacts by multiple scopes using query parameters. At present this API only supports resource impacts for RESIZE actions.",
        "operationId": "getActionResourceImpactStatsByUuidsQuery",
        "requestBody": {
          "description": "The object used to query the action resource impacts",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionScopesResourceImpactStatApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/actions/{action_Uuid}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get a current action by UUID",
        "operationId": "getActionByUuid",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Action",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Accept an action",
        "operationId": "executeAction",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept",
            "in": "query",
            "description": "If true, the action is accepted. If false, an error will be returned as we do not support rejecting actions.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "forMaintenanceWindow",
            "in": "query",
            "description": "True if the action is related to a maintenance window.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/details": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get details for a given action_uuid",
        "operationId": "getActionDetails",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of an action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDetailsApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/policies": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get all placement policies that affect the involved entities. Examples of placement policies are: place, license, and merge. The policies may or may not have contributed to the action. This api does not include settings policies (automation policies) like action mode. Please see /settingspolicies/ for those.",
        "operationId": "getActionPolicies",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/relatedActions": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a list of related actions for a given actionUuid",
        "operationId": "getRelatedActions",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of an action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelatedActionApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/settingspolicies": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get all settings policies (automation policies) that affect the involved entities. Examples of automation policies are: action mode, execution schedules, and scaling constraints. The settings policies may or may not have contributed to the action. This api does not include placement policies like place and license. Please see /policies/ for those.",
        "operationId": "getActionSettingsPolicies",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The UUID of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/stateChanges": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of state changes for the action",
        "operationId": "getActionStateChangesByUuid",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The Uuid of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionStateChangeApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/actions/{action_Uuid}/webhook": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Substitute action fields in a Webhook body template from an actual action, and return the substituted body in the response.",
        "operationId": "replaceWebhookBody",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The action uuid of the action with which to replace the Webhook body.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details of the Webhook body to replace.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceWebhookBodyRequestApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplaceWebhookBodyResponseApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/deploymentInfo": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get current deployment info",
        "operationId": "getDeploymentInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/admin/exports": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Export diagnostics locally to the httpd tmp directory and send to Support",
        "operationId": "exportDiagData",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/admin/health": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get the health check results by check categories.",
        "operationId": "getHealth",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "filter by the health check category",
            "schema": {
              "type": "string",
              "enum": [
                "TARGET",
                "ACTION",
                "COMPONENT"
              ]
            }
          },
          {
            "name": "health_state",
            "in": "query",
            "description": "filter by the state of health",
            "schema": {
              "type": "string",
              "enum": [
                "CRITICAL",
                "MAJOR",
                "MINOR",
                "NORMAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCategoryResponseDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/httpproxy": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get the proxy state, host, port number, username, and password.",
        "operationId": "getProxyInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpProxyDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Set http proxy",
        "operationId": "setProxyConfig",
        "requestBody": {
          "description": "Http Proxy settings",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/HttpProxyDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpProxyDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/logginglevels": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get the logging level of all components",
        "operationId": "getLoggingLevels",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggingApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Set the logging level for a given component",
        "operationId": "setLoggingLevelForGivenComponent",
        "requestBody": {
          "description": "Component and its logging level",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/LoggingApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoggingApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/productcapabilities": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Communicates product capabilities, configurations, and options to controldifferent aspects of the UI",
        "operationId": "getProductCapabilities",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCapabilityDTO"
                }
              }
            }
          }
        }
      }
    },
    "/admin/telemetry": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get current telemetry status",
        "operationId": "getTelemetry",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Enable or Disable telemetry",
        "operationId": "setTelemetry",
        "requestBody": {
          "description": "Telemetry Settings",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TelemetryDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelemetryDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/admin/telemetry/data": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get current telemetry dataset",
        "operationId": "getTelemetryData",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/admin/versions": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get current product version info and optionally check for available updates",
        "operationId": "getVersionInfo",
        "parameters": [
          {
            "name": "check_for_updates",
            "in": "query",
            "description": "Check for updates before returning version information",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductVersionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/authorization/oauth2/clients": {
      "get": {
        "tags": [
          "Authorization"
        ],
        "summary": "Returns a list of OAuth2 clients",
        "operationId": "listClients",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuth2ClientApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Create a new OAuth2 client",
        "operationId": "createClient",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OAuth2CreateClientApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2CreateClientApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/authorization/oauth2/clients/{id}": {
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Deletes an OAuth2 client by its ID",
        "operationId": "deleteClient",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OAuth2 client.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/businessunits": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get a list of all business units. Filters might be applied: filter by type of the business unit, filter by related cloud service provider type, filter by parents existence.",
        "operationId": "getBusinessUnits",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of the business unit that was requested",
            "schema": {
              "type": "string",
              "enum": [
                "BUDGET",
                "DISCOVERED",
                "DISCOUNT"
              ]
            }
          },
          {
            "name": "cloud_type",
            "in": "query",
            "description": "Type of the target linked with desired business units",
            "schema": {
              "type": "string",
              "enum": [
                "AWS",
                "AZURE",
                "GCP"
              ]
            }
          },
          {
            "name": "has_parent",
            "in": "query",
            "description": "Whether to request only business units which have parents or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "scope_Uuid",
            "in": "query",
            "description": "Scope Uuid to request only business units which belong to this scope",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessUnitApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Business Units"
        ],
        "summary": "create a new business unit",
        "operationId": "createBusinessUnit",
        "requestBody": {
          "description": "Business Unit name, budget and discovered business account (childrenBusinessUnits) for the target",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BusinessUnitApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/businessunits/{businessUnit_Uuid}": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get business unit for given uuid",
        "operationId": "getBusinessUnitByUuid",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Business Units"
        ],
        "summary": "Edit an existing business unit",
        "operationId": "editBusinessUnit",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Business Unit budget and targets",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BusinessUnitApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Business Units"
        ],
        "summary": "Delete a business unit given the businessUnitUuid",
        "operationId": "deleteBusinessUnit",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/businessunits/{businessUnit_Uuid}/actions": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the list of current actions by Business Unit",
        "operationId": "getCurrentActions",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The uuid of the Business Unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the list of actions by a Business Unit",
        "operationId": "getBusinessUnitActions",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The uuid of the Business Unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/businessunits/{businessUnit_Uuid}/actions/stats": {
      "post": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the stats of filtered actions",
        "operationId": "getActionCountStatsByUuid",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The uuid of the Business Unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/businessunits/{businessUnit_Uuid}/cloudservices": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get business unit-related cloud service + pricing model pairs for a given business unit uuid",
        "operationId": "getCloudServicePricingModels",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CloudServicePricingModelApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/businessunits/{businessUnit_Uuid}/entities": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the list of entities by Business Unit",
        "operationId": "getEntitiesByBusinessUnitUuid",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the Business Unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "utilization",
                "severity",
                "cost"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/businessunits/{businessUnit_Uuid}/priceadjustments": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get related price adjustments for a given business unit uuid",
        "operationId": "getBusinessUnitPriceAdjustments",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitPriceAdjustmentApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Business Units"
        ],
        "summary": "Edit related price adjustments for a given business unit uuid",
        "operationId": "editBusinessUnitPriceAdjustments",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Business unit's related discounts",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BusinessUnitPriceAdjustmentApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BusinessUnitPriceAdjustmentApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/businessunits/{businessUnit_Uuid}/relatedBusinessUnits": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get business units related to business unit specified by given businessUnitUuid. In case specified businessUnitUuid points to a master account then children collection will be returned, in case businessUnitUuid points to linked account then its master account and its children will be returned.",
        "operationId": "getRelatedBusinessUnits",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationship",
            "in": "query",
            "description": "Type of the relationship which is going to be requested",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PARENT",
                "SIBLINGS",
                "CHILDREN"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BusinessUnitApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/businessunits/{businessUnit_Uuid}/supplychains": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the supplychain by Business Unit",
        "operationId": "getSupplychainByUuid",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_states",
            "in": "query",
            "description": "filter by Entity states",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IDLE",
                  "RESOURCE_ALLOCATION",
                  "LAUNCH",
                  "ACTIVE",
                  "RESOURCE_RELEASE",
                  "SUSPEND",
                  "SUSPEND_PENDING",
                  "TERMINATE_PENDING",
                  "NOT_MONITORED",
                  "MAINTENANCE",
                  "FAILOVER",
                  "UNKNOWN",
                  "EVACUATED",
                  "QUEUED",
                  "NOT_FOUND"
                ]
              }
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the supply chain",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "filter by list of aspect names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "health",
            "in": "query",
            "description": "get health summary of market",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplychainApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/businessunits/{businessUnit_Uuid}/templates": {
      "get": {
        "tags": [
          "Business Units"
        ],
        "summary": "Get the templates available for a given business unit uuid",
        "operationId": "getBusinessUnitTemplates",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "path",
            "description": "The Uuid of the business unit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clients/networks/configuration": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Retrieves client configuration information",
        "operationId": "getClientConfiguration",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfigurationApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/clients/networks/sites": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get a list of client network sites",
        "operationId": "getClientNetworkSites",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientNetworkSitesMetadataApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Revokes network access for all client network sites",
        "operationId": "revokeClientNetworkSites",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/clients/networks/sites/{id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get Site Information for a given siteId",
        "operationId": "getSiteInformation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Site Id of the client site",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteInformationApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/clients/networks/tokens": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get a list of client network tokens",
        "operationId": "getClientNetworkTokens",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientNetworkTokensMetadataApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create a new client network token",
        "operationId": "createClientNetwork",
        "parameters": [
          {
            "name": "output",
            "in": "query",
            "description": "The output format",
            "schema": {
              "type": "string",
              "default": "encoded",
              "enum": [
                "encoded",
                "raw"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Client Network Token Input Parameters",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ClientNetworkTokenInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNetworkTokenApiOutputDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete client network token by token id",
        "operationId": "deleteClientNetwork",
        "parameters": [
          {
            "name": "tokenId",
            "in": "query",
            "description": "The token id of the client network token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/clients/services": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a client service by client id",
        "operationId": "getClientService",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "The client id of the client service.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientServiceApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a new client service",
        "operationId": "createClientService",
        "requestBody": {
          "description": "Client input details",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ClientInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientServiceApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete client service by client id",
        "operationId": "deleteClientService",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "The client id of the client service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/cost/tags/keys": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Gets a list of available cost tag keys",
        "operationId": "getCostTagKeys",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Scope uuid to query for cost tags.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "Start time of the period for filter. Use ISO 8601 format e.g. 2015-10-07T12:38:17+00:00,\nmilliseconds e.g. 1458058134087,\nor relative time e.g. -5h\n(m - minutes, h - hours, d - days, w - weeks, M - months, y - years)\nThis is a required parameter.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "1673273639, -7d"
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "Optional end time of the period for filter. Use ISO 8601 format e.g. 2015-10-07T12:38:17+00:00,\nmilliseconds e.g. 1458058134087,\nor relative time e.g. -5h\n(m - minutes, h - hours, d - days, w - weeks, M - months, y - years)\n When not specified, all data from after start will be considered.",
            "schema": {
              "type": "string"
            },
            "example": "1673273639, -7d"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagKeyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Provide links to URLs which return sets of entities.",
        "operationId": "getEntities",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntityApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/experimental/{entity_Uuid}/details": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get entity details",
        "operationId": "getEntityDetails",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityDetailsApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/query": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Search entities.",
        "operationId": "searchEntities",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EntityQueryApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchQueryRecordApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/query/count": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Count entities.",
        "operationId": "countEntities",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EntityCountRequestApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCountRecordApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/query/fields": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Metadata for entity fields.",
        "operationId": "entityFields",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/EntityMetadataRequestApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldValueTypeApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get an entity by Uuid",
        "operationId": "getEntityByUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_aspects",
            "in": "query",
            "description": "Include the entity aspects in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceEntityApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/actions": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of current actions by entity",
        "operationId": "getCurrentActionsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending or descending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forceExpansionOfAggregatedEntities",
            "in": "query",
            "description": "This parameter controls how the entity will be expanded when searching for related entities. When true, composite entities (like datacenters) within the scope will be expanded to their contained entities (like physical machines) before traversing the supply chain looking for related entities of a given type. When false, the supply chain of the composite entity (e.g. datacenter) itself will be traversed. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of actions by an entity",
        "operationId": "getActionsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forceExpansionOfAggregatedEntities",
            "in": "query",
            "description": "This parameter controls how the entity will be expanded when searching for related entities. When true, composite entities (like datacenters) within the scope will be expanded to their contained entities (like physical machines) before traversing the supply chain looking for related entities of a given type. When false, the supply chain of the composite entity (e.g. datacenter) itself will be traversed. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/actions/stateChanges": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of state changes for all actions by the entity",
        "operationId": "getEntityActionsStateChangesByUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionStateChangeApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/actions/stats": {
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the stats of filtered actions",
        "operationId": "getActionCountStatsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/actions/stats/resourceImpacts": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the resource impact stats of filtered actions by entityUuid. At present this API only supports resource impacts for RESIZE actions.",
        "operationId": "getActionStatsResourceImpactByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Requested action resource impact stats",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionResourceImpactStatApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/actions/{action_Uuid}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get an action by the entity",
        "operationId": "getActionByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The Uuid of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of Action details returned",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/aspects": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of Aspects of an Entity",
        "operationId": "getAspectsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/EntityAspect"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/aspects/{aspect_name}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the Aspect of an Entity",
        "operationId": "getAspectByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aspect_name",
            "in": "path",
            "description": "The name of the aspect",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityAspect"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/constraints": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of constraints by entity",
        "operationId": "getConstraintsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConstraintApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/constraints/entities": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of intersection of providers, consumers",
        "operationId": "getPotentialEntitiesByEntity",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "utilization",
                "severity",
                "cost"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "constraints",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ConstraintApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/cost": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get collection of cost statistics for cloud entity and query parameters",
        "operationId": "getEntityCloudCostStats",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters and groupings applied to cost statistic",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CostInputApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/customcost": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get entity costs by entity uuid",
        "operationId": "getCustomCostsByUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityCostApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Update a list of costs of an Entity",
        "operationId": "updateCustomCostByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update Cost",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityCostApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityCostApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a list of custom costs of an Entity",
        "operationId": "createCustomCostByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "New Cost",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityCostApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityCostApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete custom costs for entity by entity uuid",
        "operationId": "deleteCustomCostByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/entities/{entity_Uuid}/groups": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get Groups by serviceinterfaces entity",
        "operationId": "getGroupsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the serviceinterfaces entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "get the Path for the Groups relationship",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/policies": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of policies by entity",
        "operationId": "getPoliciesByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/settings": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of settings by entity",
        "operationId": "getSettingsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_settingspolicies",
            "in": "query",
            "description": "Include the group aspects in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsManagerApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/settings/{settingsManager_Uuid}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a list of settings for the specified entity Uuid and settings manager name",
        "operationId": "getSettingsManagerByEntity",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/settings/{settingsManager_Uuid}/{setting_Uuid}": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get a setting by entity Uuid, settings manager name, and setting name",
        "operationId": "getSettingByEntity",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/settingspolicies": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of Setting Policies affecting an Entity settings",
        "operationId": "getSettingPoliciesByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/stats": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of statistics by entity",
        "operationId": "getEntityStatsByUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Encoded query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the list of statistics by entity using query parameters",
        "operationId": "getEntityStatsByEntityQuery",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatPeriodApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/entities/{entity_Uuid}/supplychains": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get filtered supplychain information related to a particular entity",
        "operationId": "getSupplyChainByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_states",
            "in": "query",
            "description": "filter by Entity states",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IDLE",
                  "RESOURCE_ALLOCATION",
                  "LAUNCH",
                  "ACTIVE",
                  "RESOURCE_RELEASE",
                  "SUSPEND",
                  "SUSPEND_PENDING",
                  "TERMINATE_PENDING",
                  "NOT_MONITORED",
                  "MAINTENANCE",
                  "FAILOVER",
                  "UNKNOWN",
                  "EVACUATED",
                  "QUEUED",
                  "NOT_FOUND"
                ]
              }
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the supply chain",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "filter by list of aspect names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "health",
            "in": "query",
            "description": "get health summary of entity",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplychainApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/entities/{entity_Uuid}/tags": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "Get the Tags of an Entity",
        "operationId": "getTagsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a list of user defined tags of an Entity",
        "operationId": "createTagsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Tag",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete all or a list of user defined tags for an entity",
        "operationId": "deleteTagsByEntityUuid",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "List of Tag keys. If not defined all user defined tags for that entity will be deleted",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a list of groups. Call is paginated when at least one of cursor, limit, order_by or ascending is set.",
        "operationId": "getGroups",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.  Defaults to NAME.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "SEVERITY",
                "COST"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "group_origin",
            "in": "query",
            "description": "The group origin to filter by.",
            "schema": {
              "type": "string",
              "enum": [
                "DISCOVERED",
                "USER",
                "SYSTEM"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a group",
        "operationId": "createGroup",
        "requestBody": {
          "description": "Group to create",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/query": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Search groups.",
        "operationId": "searchGroups",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupQueryApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchQueryRecordApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/query/count": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Count groups.",
        "operationId": "countGroups",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupCountRequestApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCountRecordApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/query/fields": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Metadata for group fields.",
        "operationId": "groupFields",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupMetadataRequestApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FieldValueTypeApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a group by Uuid",
        "operationId": "getGroupByUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_aspects",
            "in": "query",
            "description": "Include the group aspects in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Edit a Group",
        "operationId": "editGroup",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group to edit",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "If the group is successfully edited",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupApiDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "If trying to edit a group without authorization",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Error occurred converting internal data objects into REST API DTOs",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete a group given the Uuid",
        "description": "Returns a boolean for backward compatibility",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "If the group is successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "If trying to delete a group without authorization",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/groups/{group_Uuid}/actions": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of current actions by group",
        "operationId": "getCurrentActionsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending or descending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forceExpansionOfAggregatedEntities",
            "in": "query",
            "description": "This parameter controls how the entity will be expanded when searching for related entities. When true, composite entities (like datacenters) within the scope will be expanded to their contained entities (like physical machines) before traversing the supply chain looking for related entities of a given type. When false, the supply chain of the composite entity (e.g. datacenter) itself will be traversed. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Get list of actions for a group",
        "operationId": "getActionsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forceExpansionOfAggregatedEntities",
            "in": "query",
            "description": "This parameter controls how the entity will be expanded when searching for related entities. When true, composite entities (like datacenters) within the scope will be expanded to their contained entities (like physical machines) before traversing the supply chain looking for related entities of a given type. When false, the supply chain of the composite entity (e.g. datacenter) itself will be traversed. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/actions/stats": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the stats of filtered actions by group",
        "operationId": "getActionCountStatsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/actions/stats/resourceImpacts": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the resource impact stats of filtered actions by groupUuid. At present this API only supports resource impacts for RESIZE actions.",
        "operationId": "getActionStatsResourceImpactByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Requested action resource impact stats",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionResourceImpactStatApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/aspects": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of Aspects of a Group",
        "operationId": "getAspectsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/EntityAspect"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/aspects/{aspect_name}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the Aspect of a Group",
        "operationId": "getAspectByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "aspect_name",
            "in": "path",
            "description": "The name of the aspect",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityAspect"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/cost": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get collection of cloud cost statistics for a group and query parameters.",
        "operationId": "getGroupCloudCostStats",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters and groupings applied to cost statistic",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CostInputApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/entities": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of entities in a group.  Call is paginated with either cursor, limit, order_by or ascending being set",
        "operationId": "getEntitiesByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.  Defaults to NAME.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "SEVERITY"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/groups": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get parent groups for given group groupUuid",
        "operationId": "getGroupsByUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "get the Path for the Groups relationship",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/members": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of members of a group. Call paginated with either cursor or limit being set.",
        "operationId": "getMembersByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor to include in the next request for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a service-specific maximum limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/policies": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of policies by group",
        "operationId": "getPoliciesByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/settings": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of settings by group",
        "operationId": "getSettingsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_settingspolicies",
            "in": "query",
            "description": "Include the group aspects in the response",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsManagerApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/settings/{settingsManager_Uuid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a setting by group Uuid and settings manager name ",
        "operationId": "getSettingsManagerByGroup",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/settings/{settingsManager_Uuid}/{setting_Uuid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a setting by group Uuid, settings manager name and setting name",
        "operationId": "getSettingByGroup",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Edit a setting value by the settings manager and setting Uuid",
        "operationId": "putGroupSettingByUuidAndName",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new value for the setting",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SettingApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/settings/{settingsManager_Uuid}/{setting_Uuid}/settingspolicies/{settingsPolicy_Uuid}/entities": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a set of entities filtered by setting manager, setting, group, and value name",
        "operationId": "getGroupSettingByUuidAndName",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          },
          {
            "name": "settingsPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of the setting policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/settingspolicies": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of Setting Policies affecting a Group settings",
        "operationId": "getSettingPoliciesByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/stats": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of statistics by group",
        "operationId": "getStatsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Encoded query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Get the list of statistics by group using query parameters",
        "operationId": "getStatsByGroupQuery",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatPeriodApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/groups/{group_Uuid}/supplychains": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get supplychain of a group",
        "operationId": "getSupplyChainByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_states",
            "in": "query",
            "description": "filter by Entity states",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IDLE",
                  "RESOURCE_ALLOCATION",
                  "LAUNCH",
                  "ACTIVE",
                  "RESOURCE_RELEASE",
                  "SUSPEND",
                  "SUSPEND_PENDING",
                  "TERMINATE_PENDING",
                  "NOT_MONITORED",
                  "MAINTENANCE",
                  "FAILOVER",
                  "UNKNOWN",
                  "EVACUATED",
                  "QUEUED",
                  "NOT_FOUND"
                ]
              }
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the supply chain",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "filter by list of aspect names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "health",
            "in": "query",
            "description": "get health summary of group",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplychainApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{group_Uuid}/tags": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the Tags of a Group",
        "operationId": "getTagsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a list of user defined tags for a Group",
        "operationId": "createTagsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new Tags",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete all or a list of user defined tags of a Group",
        "operationId": "deleteTagsByGroupUuid",
        "parameters": [
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "List of Tag keys. If not defined all user defined tags for that group will be deleted",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/licenses": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Get the list of licenses",
        "operationId": "indexLicenses",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseApiDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Licenses"
        ],
        "summary": "Add licenses",
        "operationId": "createLicensesFromMultipartFiles",
        "parameters": [
          {
            "name": "dryRun",
            "in": "query",
            "description": "Perform a dry-run to only validate the licenses",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LicenseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/licenses/summary": {
      "get": {
        "tags": [
          "Licenses"
        ],
        "summary": "Get current license summary",
        "operationId": "getLicenseSummary",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseApiDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/licenses/{license_Uuid}": {
      "delete": {
        "tags": [
          "Licenses"
        ],
        "summary": "Delete the specified license",
        "operationId": "deleteLicense",
        "parameters": [
          {
            "name": "license_Uuid",
            "in": "path",
            "description": "The Uuid of the license",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/markets": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get a list of markets",
        "operationId": "getMarkets",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Scope Group Uuids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get a market by Uuid",
        "operationId": "getMarketByUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Execute an action on a Market",
        "operationId": "executeOperation",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operation",
            "in": "query",
            "description": "The operation",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "stop",
                "save"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketApiDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Markets"
        ],
        "summary": "Delete market by Uuid",
        "operationId": "deleteMarketByUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete_scenario",
            "in": "query",
            "description": "Whether to also delete the corresponding scenario after the plan market has been removed. Note: If multiple plan markets are related to the same scenario, then the scenario will not be deleted until the last related plan market is deleted.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/actions": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of current actions by marketUuid",
        "operationId": "getCurrentActionsByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of actions by marketUuid",
        "operationId": "getActionsByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/actions/stats": {
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the stats of filtered actions by marketUuid",
        "operationId": "getActionCountStatsByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/actions/stats/resourceImpacts": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the resource impact stats of filtered actions by marketUuid. At present this API only supports resource impacts for RESIZE actions.",
        "operationId": "getActionStatsResourceImpactByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Requested action resource impact stats",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionResourceImpactStatApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/actions/{action_Uuid}": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get an action by the market",
        "operationId": "getActionByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The Uuid of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/actions/{action_Uuid}/details": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the details for an action by the market",
        "operationId": "getActionDetailsByActionAndMarketId",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_Uuid",
            "in": "path",
            "description": "The Uuid of the action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionDetailsApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/cost": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get collection of cloud cost statistics by market_Uuid.  Market's cloud entities will be considered",
        "operationId": "getMarketCloudCostStats",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters and groupings applied to cost statistic",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/CostInputApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/displayName": {
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Rename a market",
        "operationId": "renameMarketByUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/entities": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of entities by marketUuid",
        "operationId": "getEntitiesByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "name",
              "enum": [
                "name",
                "utilization",
                "severity",
                "cost"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/entities/stats": {
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the stats by Entities in a Market using query parameters",
        "operationId": "getStatsByEntitiesInMarketQuery",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by. This should be the name of a stat. If the query object contains a time range with multiple stat snapshots, the server will use the first (i.e. earliest) snapshot for the order. If not set, there will be no guaranteed order. An entity that doesn't have a value for the specified stat will be considered smaller than all entities that have values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatScopesApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/entities/{entity_Uuid}/settings": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of settings for an entity in a given market UUID. For plan markets, the API will only return the settings for  percentileAggressivenessVirtualMachine and maxObservationPeriodVirtualMachine for a virtual machine.",
        "operationId": "getSettingsByEntityAndMarketId",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The UUID of a market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The UUID of an entity. Please note, for plan market, only VM UUIDs are supported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsManagerApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/groups/{group_Uuid}/entities/stats": {
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the stats by Entities in a Market using query parameters",
        "operationId": "getStatsByEntitiesInGroupInMarketQuery",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by. This should be the name of a stat. If the query object contains a time range with multiple stat snapshots, the server will use the first (i.e. earliest) snapshot for the order. If not set, there will be no guaranteed order. An entity that doesn't have a value for the specified stat will be considered smaller than all entities that have values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatScopesApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/policies": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of Policies by marketUuid",
        "operationId": "getPoliciesByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Add a placement policy to a market",
        "operationId": "addMarketPolicy",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The uuid of a market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PolicyApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyApiDTO"
                }
              }
            }
          },
          "201": {
            "description": "If the policy was created successfully",
            "content": {}
          },
          "303": {
            "description": "If the policy could not be created due to an existing, conflicting policy",
            "content": {}
          },
          "401": {
            "description": "If the request is not properly authenticated",
            "content": {}
          },
          "403": {
            "description": "If the request is not properly authorized",
            "content": {}
          },
          "409": {
            "description": "If there was a conflict with another policy when creating the policy",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/policies/{policy_Uuid}": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get a placement policy of a market",
        "operationId": "getPolicy",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_Uuid",
            "in": "path",
            "description": "The Uuid of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Edit a placement policy to a market",
        "operationId": "editPolicy",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_Uuid",
            "in": "path",
            "description": "The Uuid of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PolicyApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Markets"
        ],
        "summary": "Delete a placement policy from a market",
        "operationId": "deleteMarketPolicy",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_Uuid",
            "in": "path",
            "description": "The Uuid of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/reservations": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the list of reservations by marketUuid",
        "operationId": "getReservationsByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DemandReservationApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/scenarios/{scenario_Uuid}": {
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Apply a scenario to a market and run a plan",
        "operationId": "applyAndRunScenario",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ignore_constraints",
            "in": "query",
            "description": "Ignore constraints",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "save",
            "in": "query",
            "description": "Save",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/stats": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the stats by marketUuid",
        "operationId": "getStatsByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Encoded query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the stats by marketUuid using query parameters",
        "operationId": "getStatsByMarketQuery",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatPeriodApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/markets/{market_Uuid}/supplychains": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the supplychain by marketUuid",
        "operationId": "getSupplychainByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_states",
            "in": "query",
            "description": "filter by Entity states",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IDLE",
                  "RESOURCE_ALLOCATION",
                  "LAUNCH",
                  "ACTIVE",
                  "RESOURCE_RELEASE",
                  "SUSPEND",
                  "SUSPEND_PENDING",
                  "TERMINATE_PENDING",
                  "NOT_MONITORED",
                  "MAINTENANCE",
                  "FAILOVER",
                  "UNKNOWN",
                  "EVACUATED",
                  "QUEUED",
                  "NOT_FOUND"
                ]
              }
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the supply chain",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "filter by list of aspect names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "health",
            "in": "query",
            "description": "get health summary of market",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplychainApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/markets/{market_Uuid}/unplacedentities": {
      "get": {
        "tags": [
          "Markets"
        ],
        "summary": "Get the list of unplaced entities by marketUuid",
        "operationId": "getUnplacedEntitiesByMarketUuid",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "path",
            "description": "The Uuid of the market",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/migrations/targets": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Add a Target",
        "operationId": "addClassicTarget",
        "requestBody": {
          "description": "Target to add",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TargetApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetApiDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets a list of all system-level notifications",
        "operationId": "getNotifications",
        "parameters": [
          {
            "name": "start_time",
            "in": "query",
            "description": "The start time for an historic range of notifications",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "The end time for a historic range of notifications",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "The category of the notifications",
            "schema": {
              "type": "string"
            },
            "example": "Discovery, Monitoring, Control,Mediation, Healthcheck, InterAppliance, MarketAction, MarketProblem, Presentation, Deploy, Security"
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default (100000).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "name"
            },
            "example": "name, severity, action_time"
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogEntryApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/notifications/stats": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets a filtered list of notifications",
        "operationId": "getNotificationStats",
        "requestBody": {
          "description": "The StatPeriodApiInputDTO used to filter the actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatPeriodApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/notifications/{notification_Uuid}": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Gets a specified notification",
        "operationId": "getNotificationByUuid",
        "parameters": [
          {
            "name": "notification_Uuid",
            "in": "path",
            "description": "The UUID of the notification",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/parking/bulkActionRequest": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Creates a bulk action request to affect the state of parkable entities.",
        "operationId": "bulkAction",
        "requestBody": {
          "description": "The object used to perform an action on one or more parkable entities.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/BulkActionRequestInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkActionRequestApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/enforcementPauses": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Creates temporary enforcement pauses on parkable entities.",
        "operationId": "addEnforcementPauses",
        "requestBody": {
          "description": "The object used to Create temporary enforcement pauses on parkable entities.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityEnforcementPauseInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkableEntityEnforcementPauseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Parking"
        ],
        "summary": "Deletes temporary enforcement pauses on parkable entities",
        "operationId": "deleteEnforcementPauses",
        "requestBody": {
          "description": "The ParkableEntityUUIDSetDTO representing the list of parkable entity uuids to delete temporary enforcement pauses on",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityUUIDSetDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkableEntityEnforcementPauseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/entities": {
      "post": {
        "tags": [
          "Parking"
        ],
        "summary": "Get parkable entities",
        "operationId": "getParkableEntities",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Controls the starting point for the results page. When making subsequent calls to retrieve additional results, set this to the cursor returned by the last call to this method. If not set, the first page is returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "DISPLAY_NAME",
              "enum": [
                "DISPLAY_NAME",
                "ENTITY_TYPE",
                "STATE",
                "ACCOUNT_NAME",
                "PROVIDER",
                "REGION_NAME",
                "INSTANCE_TYPE",
                "COST",
                "SCHEDULE_NAME",
                "POLICY_NAME",
                "GROUP_NAME",
                "CLOUD_SERVICE_NAME"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "json object with the filters to be applied. Allowable filter types are 'displayName', 'accountName', 'regionName', 'instanceType', 'scheduleName', 'groupName', 'guestOSName' and 'tags' for strings, 'cost' for numbers.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkableEntityApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/entities/stats": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get parkable entities stats",
        "operationId": "getParkableEntitiesStats",
        "requestBody": {
          "description": "json object with the parameters to be applied. The DTO contains input parameters like groupBys.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityStatsInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/entities/{entity_Uuid}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a parkable entity",
        "operationId": "getParkableEntity",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "UUID of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkableEntityDetailsApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/parking/policies": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a list of parking policies",
        "operationId": "getParkingPolicies",
        "parameters": [
          {
            "name": "level",
            "in": "query",
            "description": "Filter by Parking Policy Scope Levels.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "GLOBAL",
                  "CLOUD_PROVIDER",
                  "ACCOUNT",
                  "RESOURCE_GROUP"
                ]
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "Controls the starting point for the results page. When making subsequent calls to retrieve additional results, set this to the cursor returned by the last call to this method. If not set, the first page is returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "DISPLAY_NAME",
              "enum": [
                "DISPLAY_NAME",
                "PRECEDENCE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParkingPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Create a new parking policy",
        "operationId": "addPolicy",
        "requestBody": {
          "description": "The ParkingPolicyApiDTO representing the policy to add.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkingPolicyApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingPolicyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/policies/stats": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get parking policies stats",
        "operationId": "getParkingPoliciesStats",
        "requestBody": {
          "description": "json object with the input parameters to be applied. The DTO contains input parameters like groupBys.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkingPolicyStatsInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/parking/policies/{parkingPolicy_Uuid}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a parking policy by Uuid",
        "operationId": "getParkingPolicyByUuid",
        "parameters": [
          {
            "name": "parkingPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of the parking policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingPolicyApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Update an existing parking policy with given parkingPolicyUuid",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "name": "parkingPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of the parking policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ParkingPolicyApiDTO representing the policy to update.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkingPolicyApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkingPolicyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete a parking policy by Uuid",
        "operationId": "deletePolicyByUuid",
        "parameters": [
          {
            "name": "parkingPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of the parking policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/plandestinations": {
      "get": {
        "tags": [
          "Plan Destinations"
        ],
        "summary": "Gets all plan destinations.",
        "operationId": "getPlanDestinations",
        "parameters": [
          {
            "name": "businessUnit_Uuid",
            "in": "query",
            "description": "Business Unit id, this is the subscription to identify plan destination.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanDestinationApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Plan Destinations"
        ],
        "summary": "Upload plan results to plan destination.",
        "operationId": "uploadToPlanDestination",
        "parameters": [
          {
            "name": "market_Uuid",
            "in": "query",
            "description": "Plan market id, this is the plan we are uploading.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planDestination_Uuid",
            "in": "query",
            "description": "Plan destination id, this is the plan destination where we would upload plan results to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDestinationApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/plandestinations/{planDestination_Uuid}": {
      "get": {
        "tags": [
          "Plan Destinations"
        ],
        "summary": "Get plan destination by uuid.",
        "operationId": "getPlanDestinationById",
        "parameters": [
          {
            "name": "planDestination_Uuid",
            "in": "path",
            "description": "The Uuid of the plan destination",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanDestinationApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get a list of policies",
        "operationId": "getPolicies",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/policies/{policy_Uuid}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get a policy by Uuid",
        "operationId": "getPolicyByUuid",
        "parameters": [
          {
            "name": "policy_Uuid",
            "in": "path",
            "description": "The Uuid of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/probes": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a list of all probes.",
        "operationId": "getAllProbes",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/probes/properties/": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a list of all probe properties from all probes.",
        "operationId": "getAllProbeProperties",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbePropertyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/probes/{probeId}": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a probe.",
        "operationId": "getProbe",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbeApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/probes/{probeId}/properties": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get all probe properties related to a probe.",
        "operationId": "getAllProbeSpecificProbeProperties",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Edit all the probe properties of a probe.",
        "description": "All probe properties under the probe will be replaced.",
        "operationId": "putAllProbeSpecificProperties",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new probe properties.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/probes/{probeId}/properties/{propertyName}": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a probe-specific probe property.",
        "description": "Response is empty if the probe exists but the probe property does not exist.",
        "operationId": "getProbeSpecificProbeProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the probe property.",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Edit the value of one probe-specific probe property.",
        "description": "If the probe property does not exist, it gets created.",
        "operationId": "putProbeSpecificProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the probe property.",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new value of the probe property.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbePropertyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Delete the value of one probe-specific probe property.",
        "description": "Probe will revert to the use of default value.",
        "operationId": "deleteProbeSpecificProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the probe property.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/probes/{probeId}/targets/{targetId}/properties": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get all probe properties related to a target.",
        "operationId": "getAllTargetSpecificProbeProperties",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe that discovers the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The Uuid of the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Edit all the probe properties of a target.",
        "description": "All probe properties under the target will be replaced.",
        "operationId": "putAllTargetSpecificProperties",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe discovering the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The Uuid of the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new probe properties.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProbePropertyNameValuePairApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/probes/{probeId}/targets/{targetId}/properties/{propertyName}": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a target-specific probe property.",
        "description": "Response is empty if the target exists but the probe property does not exist.",
        "operationId": "getTargetSpecificProbeProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe that discovers the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The Uuid of the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the property.",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Edit the value of one target-specific probe property.",
        "description": "If the probe property does not exist, it gets created.",
        "operationId": "putTargetSpecificProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe discovering the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The Uuid of the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the probe property.",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new value of the probe property.",
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProbePropertyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Delete the value of one probe-specific probe property.",
        "description": "Probe will revert to the use of default value.",
        "operationId": "deleteTargetSpecificProperty",
        "parameters": [
          {
            "name": "probeId",
            "in": "path",
            "description": "The Uuid of the probe.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetId",
            "in": "path",
            "description": "The Uuid of the target.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyName",
            "in": "path",
            "description": "The name of the probe property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/reporting/configuration": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get the reporting configuration",
        "operationId": "getSaaSReportingConfiguration",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaaSReportingConfigApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Configure reporting",
        "operationId": "setSaaSReportingConfiguration",
        "requestBody": {
          "description": "Reporting Settings",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SaaSReportingConfigApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaaSReportingConfigApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Delete the reporting configuration",
        "operationId": "deleteSaaSReportingConfiguration",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get a list of reservations",
        "operationId": "getAllReservations",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Reservation Status",
            "schema": {
              "type": "string",
              "enum": [
                "PLACEMENT_FAILED",
                "RESERVED",
                "UNFULFILLED",
                "INPROGRESS",
                "INITIAL",
                "FUTURE",
                "INVALID"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DemandReservationApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reservations"
        ],
        "summary": "Create a reservation for the demand workload with the given name",
        "operationId": "createReservationForDemand",
        "requestBody": {
          "description": "Demand workload reservation details",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/DemandReservationApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandReservationApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/reservations/stats/{entity_Uuid}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get reservation-aware stats of entity. Only stats that have been affected by the presence of reservations will be included in the response",
        "operationId": "getReservationAwareStats",
        "parameters": [
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The uuid of the entity. This could be a Cluster, Group, Host, or Storage Device.",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reservations/{reservation_Uuid}": {
      "get": {
        "tags": [
          "Reservations"
        ],
        "summary": "Get details about a reservation",
        "operationId": "getReservationByID",
        "parameters": [
          {
            "name": "reservation_Uuid",
            "in": "path",
            "description": "The uuid of the reservation",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "apiCallBlock",
            "in": "query",
            "description": "[DEPRECATED] Do you want to block the api call until initial placement results?",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandReservationApiDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reservations"
        ],
        "summary": "Delete a reservation",
        "operationId": "deleteReservationByID",
        "parameters": [
          {
            "name": "reservation_Uuid",
            "in": "path",
            "description": "The unique ID of the reservation",
            "required": true,
            "schema": {
              "maxLength": 2147483647,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "reservation_deployed",
            "in": "query",
            "description": "When true, the reservation will be included in the system and will keep utilizing the resources from host and storage until the corresponding virtual machine utilization starts to reflect on the historically computed utilization.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "reservation_force_delete",
            "in": "query",
            "description": "When true, the reservation will be deleted no matter what state it is in.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/reservedinstances": {
      "get": {
        "tags": [
          "Reserved Instances"
        ],
        "summary": "Get a list of all reserved instances",
        "operationId": "getReservedInstances",
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "description": "Scope Uuid",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_all_usable",
            "in": "query",
            "description": "Include All Potentially Usable RIs in the Current Scope- Relevant for Account Scopes",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "account_filter_type",
            "in": "query",
            "description": "Filter type: include only RIs used within the scope, purchased by scope accounts, or both",
            "schema": {
              "type": "string",
              "enum": [
                "PURCHASED_BY",
                "USED_BY",
                "USED_AND_PURCHASED_BY"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservedInstanceApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reserved Instances"
        ],
        "summary": "Get a list of all reserved instances using the FilterApiDTO",
        "operationId": "getReservedInstancesWithFilter",
        "requestBody": {
          "description": "The DTO used to query the reserved instances. expVal takes oids and are separated by a |. Ex: oid1|oid2.filterType can be the following values: RIByRegion, RIByAccountPurchased, RIByAccountUsed, RIByAccountAll, RIByBillingFamilyPurchased, RIByBillingFamilyUsed, RIByBillingFamilyAll, RIByCloudProvider, RIByGroup, RIByResourceGroup. The entityType and singleLine parameters are unused and should be left with their default values. The RIByBillingFamilyPurchased, RIByBillingFamilyUsed, and RIByBillingFamilyAll parameters accept the OIDs of either business accounts or billing families, but not both in a single request.",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FilterApiDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReservedInstanceApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/reservedinstances/stats": {
      "post": {
        "tags": [
          "Reserved Instances"
        ],
        "summary": "Get the list of statistics by entity using query parameters",
        "operationId": "getReservedInstanceStatsByEntityQuery",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by. This should be the name of a stat. If the query object contains a time range with multiple stat snapshots, the server will use the first (i.e. earliest) snapshot for the order. If not set, there will be no guaranteed order. An entity that doesn't have a value for the specified stat will be considered smaller than all entities that have values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatScopesApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/reservedinstances/{reservedInstance_Uuid}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get reserved instance for given Uuid",
        "operationId": "getWorkflowByReservedInstanceUuid",
        "parameters": [
          {
            "name": "reservedInstance_Uuid",
            "in": "path",
            "description": "The Uuid of the reserved instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservedInstanceApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/reservedinstances/{reservedInstance_Uuid}/coveredEntities": {
      "get": {
        "tags": [
          "Reserved Instances"
        ],
        "summary": "Get the entities covered by reserved instances.",
        "operationId": "getEntitiesCoveredByReservedInstance",
        "parameters": [
          {
            "name": "reservedInstance_Uuid",
            "in": "path",
            "description": "The uuid of the reserved instance",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a list of all available roles",
        "operationId": "getRoles",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/roles/{role_Uuid}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Gets information for the specified role",
        "operationId": "getRole",
        "parameters": [
          {
            "name": "role_Uuid",
            "in": "path",
            "description": "The UUID of the role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/savingsinvestments": {
      "post": {
        "tags": [
          "Savings Investments"
        ],
        "summary": "Get the list of Savings/Investments by multiple Uuids using query parameters",
        "operationId": "getSavingsInvestmentsByUuidsQuery",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SAVINGS"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the Savings/Investment",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SavingsInvestmentsApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavingsInvestmentsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/scenarios": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get a list of scenarios",
        "operationId": "getScenarios",
        "parameters": [
          {
            "name": "show_all",
            "in": "query",
            "description": "Show scenarios created by all Users (Restricted to users with the Administrator role",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScenarioApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Create a scenario",
        "operationId": "createScenario",
        "requestBody": {
          "description": "Scenario input model",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/scenarios/{scenario_Uuid}": {
      "get": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Get a scenario by Id",
        "operationId": "getScenarioByName",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Configure the scenario",
        "operationId": "configureScenario",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The new name of the scenario",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Scope Group Uuids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "projection_days",
            "in": "query",
            "description": "Periods of the projection",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "add_historical",
            "in": "query",
            "description": "Add historical data",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_reservations",
            "in": "query",
            "description": "Include reservations",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "Baseline time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "desired_state_center",
            "in": "query",
            "description": "Desired state: performance/efficiency",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "desired_state_diameter",
            "in": "query",
            "description": "Desired state: narrow/wide",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "host_provision",
            "in": "query",
            "description": "Host provisioning",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "host_suspension",
            "in": "query",
            "description": "Host suspension",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "datastore_provision",
            "in": "query",
            "description": "Datastore provisioning",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "datastore_removal",
            "in": "query",
            "description": "Datastore removal",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resize",
            "in": "query",
            "description": "Resize",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "List of settings",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Scenarios"
        ],
        "summary": "Delete a scenario",
        "operationId": "deleteScenario",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenario_Uuid}/entities/{entity_Uuid}": {
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Add entities, change the utilization or modify their constraints",
        "operationId": "configureEntities",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Number to add",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projection_days",
            "in": "query",
            "description": "Periods of when to add in days",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "template_name",
            "in": "query",
            "description": "Template Uuid used for replace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "load",
            "in": "query",
            "description": "Load value",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "max_utilization",
            "in": "query",
            "description": "Max Load Threshold value",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "commodity_name",
            "in": "query",
            "description": "Constraint commodity name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "enable constraint commodity",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Remove an entity from a scenario",
        "operationId": "deleteEntities",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "entity_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projection_days",
            "in": "query",
            "description": "When to remove in days",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenario_Uuid}/groups/{group_Uuid}": {
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Add groups, change the utilization or modify their constraints",
        "operationId": "configureGroups",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "group_Uuid",
            "in": "path",
            "description": "The Uuid of the group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Number to add",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projection_days",
            "in": "query",
            "description": "Periods of when to add in days",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          {
            "name": "template_name",
            "in": "query",
            "description": "Template Uuid used for replace",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "load",
            "in": "query",
            "description": "Load value",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "max_utilization",
            "in": "query",
            "description": "Max Load Threshold value, from 0 to 100",
            "schema": {
              "type": "number",
              "format": "float"
            }
          },
          {
            "name": "time",
            "in": "query",
            "description": "Peak time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commodity_name",
            "in": "query",
            "description": "Commodity name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enable",
            "in": "query",
            "description": "enable constraint commodity",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenario_Uuid}/markets": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Given a scenario_id, get the list of markets connected",
        "operationId": "getMarketsByScenario",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenario_Uuid}/policies": {
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Add a placement policy to a scenario",
        "operationId": "addScenarioPolicy",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/PolicyApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/scenarios/{scenario_Uuid}/policies/{policy_Uuid}": {
      "delete": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Delete a placement policy from a scenario",
        "operationId": "deleteScenarioPolicy",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policy_Uuid",
            "in": "path",
            "description": "The Uuid of the policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/scenarios/{scenario_Uuid}/templates/{template_name}": {
      "put": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Add a template to a scenario",
        "operationId": "addScenarioTemplate",
        "parameters": [
          {
            "name": "scenario_Uuid",
            "in": "path",
            "description": "The Uuid of the scenario",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "template_name",
            "in": "path",
            "description": "The Uuid of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "Number to add",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projection_days",
            "in": "query",
            "description": "When to add in days",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScenarioApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get a list of all schedules on your instance",
        "operationId": "getSchedules",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create a new schedule",
        "operationId": "addSchedule",
        "requestBody": {
          "description": "The ScheduleApiDTO representing the schedule to add.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules/timespans": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get a list of time spans-based schedules",
        "operationId": "listTimespanSchedules",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Controls the starting point for the results page. When making subsequent calls to retrieve additional results, set this to the cursor returned by the last call to this method. If not set, the first page is returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "display_name",
              "enum": [
                "DISPLAY_NAME"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Create a new time spans-based schedule",
        "operationId": "addTimeSpanSchedule",
        "requestBody": {
          "description": "The ScheduleTimeSpansApiDTO representing the schedule to add.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules/timespans/query": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Search time spans-based schedules",
        "operationId": "searchTimespanSchedules",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "Controls the starting point for the results page. When making subsequent calls to retrieve additional results, set this to the cursor returned by the last call to this method. If not set, the first page is returned.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "display_name",
              "enum": [
                "DISPLAY_NAME"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "Json object with the filters to be applied.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeSpansInputApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules/timespans/{timeSpanSchedule_Uuid}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get an existing time spans-based schedule",
        "operationId": "getTimeSpanSchedule",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "timeSpanSchedule_Uuid representing the unique time span schedule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Edit an existing time spans-based schedule (completely replacing all fields).",
        "operationId": "editTimeSpanSchedule",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "The Uuid of the time span schedule to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ScheduleTimeSpansApiDTO representing the updated time span-based schedule.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleTimeSpansApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete a time spans-based schedule",
        "operationId": "deleteTimeSpanSchedule",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "timeSpanSchedule_Uuid of the time span-based schedule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/schedules/timespans/{timeSpanSchedule_Uuid}/entities": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Fetches parkable entities attached to specified time span-based schedule.",
        "operationId": "fetchTimespanEntities",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "timeSpanSchedule_Uuid representing the unique time span schedule.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParkableEntityUUIDSetDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Replaces existing parkable entities attached to time spans-based schedule",
        "operationId": "updateTimeSpanScheduleAttachment",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "The Uuid of the time span based schedule to replace existing parkable entities attached.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ParkableEntityUUIDSetDTO representing the list entity uuids to replace existing parkable entities attached to time span based schedule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityUUIDSetDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleEntityResponseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Schedule"
        ],
        "summary": "Attaches parkable entities to time spans-based schedule without affecting other previously attached entities",
        "operationId": "attachTimeSpanSchedule",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "The Uuid of the time span based schedule to attach parkable entities.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ParkableEntityUUIDSetDTO representing the list entity uuids to attach to time span based schedule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityUUIDSetDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleEntityResponseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Detaches parkable entities from time spans-based schedule",
        "operationId": "detachTimeSpanSchedule",
        "parameters": [
          {
            "name": "timeSpanSchedule_Uuid",
            "in": "path",
            "description": "The Uuid of the time span based schedule to detach parkable entities.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ParkableEntityUUIDSetDTO representing the list entity uuids to detach from time span based schedule",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ParkableEntityUUIDSetDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleEntityResponseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/schedules/{schedule_Uuid}": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get a specified schedule",
        "operationId": "getSchedule",
        "parameters": [
          {
            "name": "schedule_Uuid",
            "in": "path",
            "description": "The Uuid of the schedule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Schedule"
        ],
        "summary": "Edit a schedule (completely replacing all fields).",
        "operationId": "editSchedule",
        "parameters": [
          {
            "name": "schedule_Uuid",
            "in": "path",
            "description": "The Uuid of the schedule to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The ScheduleApiDTO representing the updated schedule.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Schedule"
        ],
        "summary": "Delete a specified schedule",
        "operationId": "deleteSchedule",
        "parameters": [
          {
            "name": "schedule_Uuid",
            "in": "path",
            "description": "The Uuid of the schedule to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/schedules/{schedule_Uuid}/actions": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a list of actions that will be executed during the next schedule window",
        "operationId": "getActionsToBeExecutedInSchedule",
        "parameters": [
          {
            "name": "schedule_Uuid",
            "in": "path",
            "description": "The Uuid of the schedule whose actions will be returned",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{schedule_Uuid}/settingsPolicy": {
      "get": {
        "tags": [
          "Schedule"
        ],
        "summary": "Get the policies that use a schedule",
        "operationId": "getPoliciesUsingTheSchedule",
        "parameters": [
          {
            "name": "schedule_Uuid",
            "in": "path",
            "description": "The Uuid of the Schedule",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get a filtered list of objects (entities, groups, or business units) by various search criteria. ",
        "operationId": "getSearchResults",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "Object types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Scopes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "State",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "group_type",
            "in": "query",
            "description": "GroupType",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the response",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "probe_types",
            "in": "query",
            "description": "The probe types used to filter results, server will only return entities discovered by targets in the provided probe types, valid inputs can be obtained through endpoint /targets/specs. NB: Cloud targets have additional infrastructure type, like 'AWS Infrastructure', 'Azure Infrastructure' and 'GCP Infrastructure'",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor to include in the next request for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a service-specific maximum limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "NAME",
              "enum": [
                "NAME",
                "UTILIZATION",
                "SEVERITY",
                "COST"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending (true) or descending (false) order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "query_type",
            "in": "query",
            "description": "The query type can be exact, regex or contains",
            "schema": {
              "type": "string",
              "enum": [
                "EXACT",
                "REGEX",
                "CONTAINS"
              ]
            }
          },
          {
            "name": "group_origin",
            "in": "query",
            "description": "Filter by group origin. DISCOVERED groups are groups discovered by managed targets.USER groups are groups created within the product, and SYSTEM groups are those created internally",
            "schema": {
              "type": "string",
              "enum": [
                "DISCOVERED",
                "USER",
                "SYSTEM"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Get members based on filter",
        "operationId": "getMembersBasedOnCriteria",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "The String query to apply in addition to the filters. The query will only match the display name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query_type",
            "in": "query",
            "description": "The query type can be exact, regex or contains",
            "schema": {
              "type": "string",
              "enum": [
                "EXACT",
                "REGEX",
                "CONTAINS"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor to include in the next request for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a service-specific maximum limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "NAME",
              "enum": [
                "NAME",
                "UTILIZATION",
                "SEVERITY",
                "COST"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "Filter the entity aspects by names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The search filter to use",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/GroupApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/search/criteria": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get group builder usecases - criteria per entity type",
        "operationId": "getGroupBuilderUsecases",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/criteria/{criteria_key}/options": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get criteria options",
        "operationId": "getCriteriaOptions",
        "parameters": [
          {
            "name": "criteria_key",
            "in": "path",
            "description": "Criteria key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Scope list",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "description": "Entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag_type",
            "in": "query",
            "description": "Tag type",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "BUSINESS_DIMENSION",
                "TAG_DIMENSION"
              ]
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "The String query to apply in addition to the filters. The query will only match the display name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor to include in the next request for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a service-specific maximum limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "DISPLAY_NAME",
              "enum": [
                "DISPLAY_NAME"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CriteriaOptionApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/query": {
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Search all",
        "operationId": "searchAll",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SearchAllQueryApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchQueryRecordApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/search/{object_Uuid}": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Get an object (an entity, group, or business unit) by Uuid",
        "operationId": "getObjectByUuid",
        "parameters": [
          {
            "name": "object_Uuid",
            "in": "path",
            "description": "The Uuid of the object",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a list of settings",
        "operationId": "getSettings",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsManagerApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/specs": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get settings definition",
        "operationId": "getSettingsSpecs",
        "parameters": [
          {
            "name": "manager_uuid",
            "in": "query",
            "description": "The Uuid of the settings manager",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "description": "The entity type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "The settings category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_plan",
            "in": "query",
            "description": "Realtime or plan",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsManagerApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/{settingsManager_Uuid}": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get a setting by Manager Uuid",
        "operationId": "getSettingByUuid",
        "parameters": [
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/settings/{settingsManager_Uuid}/{setting_Uuid}": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get a setting value by setting Uuid and value name",
        "operationId": "getSettingByUuidAndName",
        "parameters": [
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingApiDTOSerializable"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Put a setting value by setting Uuid and value name",
        "operationId": "putSettingByUuidAndName",
        "parameters": [
          {
            "name": "settingsManager_Uuid",
            "in": "path",
            "description": "The Uuid of the settings manager",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "setting_Uuid",
            "in": "path",
            "description": "The Uuid of the setting",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The new value for the setting",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SettingApiDTOSerializable"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingApiDTOSerializable"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/settingspolicies": {
      "get": {
        "tags": [
          "Settings Policies"
        ],
        "summary": "Get a list of settings policy",
        "operationId": "getSettingsPolicies",
        "parameters": [
          {
            "name": "only_defaults",
            "in": "query",
            "description": "Show only the default policies",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "description": "Filter the list by entity type",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Settings Policies"
        ],
        "summary": "Create a settings policy",
        "operationId": "createSettingsPolicyByUuid",
        "requestBody": {
          "description": "The Settings Policy to create",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SettingsPolicyApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/settingspolicies/{settingsPolicy_Uuid}": {
      "get": {
        "tags": [
          "Settings Policies"
        ],
        "summary": "Get a settings policy by Uuid",
        "operationId": "getSettingsPolicyByUuid",
        "parameters": [
          {
            "name": "settingsPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of settings policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Settings Policies"
        ],
        "summary": "Edit a settings policy",
        "operationId": "editSettingsPolicyByUuid",
        "parameters": [
          {
            "name": "settingsPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of settings policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reset_defaults",
            "in": "query",
            "description": "Reset the policy to the default values",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The Settings Policy to edit",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SettingsPolicyApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsPolicyApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Settings Policies"
        ],
        "summary": "Delete a settings policy by Uuid",
        "operationId": "deleteSettingsPolicyByUuid",
        "parameters": [
          {
            "name": "settingsPolicy_Uuid",
            "in": "path",
            "description": "The Uuid of settings policy",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/stats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get the list of APIs for Statistics",
        "operationId": "getStats",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stats"
        ],
        "summary": "Get the list of statistics by multiple Uuids using query parameters",
        "operationId": "getStatsByUuidsQuery",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by. This should be the name of a stat. If the query object contains a time range with multiple stat snapshots, the server will use the first (i.e. earliest) snapshot for the order. If not set, there will be no guaranteed order. An entity that doesn't have a value for the specified stat will be displayed before entities that have values.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatScopesApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityStatsApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/stats/{statistic_Uuid}": {
      "get": {
        "tags": [
          "Stats"
        ],
        "summary": "Get the list of statistics by entity",
        "operationId": "getStatsByEntityUuid",
        "parameters": [
          {
            "name": "statistic_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Encoded query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stats"
        ],
        "summary": "Get the list of statistics by entity using query parameters",
        "operationId": "getStatsByEntityQuery",
        "parameters": [
          {
            "name": "statistic_Uuid",
            "in": "path",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object used to query the statistics",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/StatPeriodApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/stats/{statistic_Uuid}/types": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the related stats types of an entity or a group",
        "operationId": "getRelatedStatTypes",
        "parameters": [
          {
            "name": "statistic_Uuid",
            "in": "path",
            "description": "The Uuid of the entity or group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RelatedStatsApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supplychains": {
      "get": {
        "tags": [
          "Supply Chains"
        ],
        "summary": "Get supply chain by supplyChainUuids",
        "operationId": "getSupplyChainByUuids",
        "parameters": [
          {
            "name": "uuids",
            "in": "query",
            "description": "Uuids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_states",
            "in": "query",
            "description": "filter by Entity types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IDLE",
                  "RESOURCE_ALLOCATION",
                  "LAUNCH",
                  "ACTIVE",
                  "RESOURCE_RELEASE",
                  "SUSPEND",
                  "SUSPEND_PENDING",
                  "TERMINATE_PENDING",
                  "NOT_MONITORED",
                  "MAINTENANCE",
                  "FAILOVER",
                  "UNKNOWN",
                  "EVACUATED",
                  "QUEUED",
                  "NOT_FOUND"
                ]
              }
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "detail_type",
            "in": "query",
            "description": "the level of details of the supply chain. Compact detailtype returns only entities count unless there is only one entity where in that case details about the entity are displayed. Entity detail type returns all details about entities and aspects detailtype also adds the aspects. The default value is compact.",
            "schema": {
              "type": "string",
              "enum": [
                "compact",
                "entity",
                "aspects"
              ]
            }
          },
          {
            "name": "aspect_names",
            "in": "query",
            "description": "filter by list of aspect names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "health",
            "in": "query",
            "description": "include health summary of entities",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupplychainApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/supplychains/leafEntities": {
      "get": {
        "tags": [
          "Supply Chains"
        ],
        "summary": "Get the set of leaf entities in a supply chain, where leaf entities are entities that have no consumers in the supply chain.",
        "operationId": "getSupplyChainLeafEntities",
        "parameters": [
          {
            "name": "uuids",
            "in": "query",
            "description": "List of uuids to be used as the starting scope of the supply chain",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "filterEntityTypes",
            "in": "query",
            "description": "Classes to be filtered out of the supply chain. Note that the filter is applied before leaf entities are calculated.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Application",
                  "ApplicationComponent",
                  "ApplicationServer",
                  "AvailabilityZone",
                  "BusinessAccount",
                  "BusinessApplication",
                  "BusinessTransaction",
                  "BusinessUser",
                  "Chassis",
                  "CloudService",
                  "ComputeTier",
                  "Container",
                  "ContainerPod",
                  "ContainerSpec",
                  "Database",
                  "DatabaseServer",
                  "DatabaseServerTier",
                  "DatabaseTier",
                  "DataCenter",
                  "DesktopPool",
                  "DiskArray",
                  "DPod",
                  "HCIPhysicalMachine",
                  "HypervisorServer",
                  "Internet",
                  "IOModule",
                  "LoadBalancer",
                  "LogicalPool",
                  "Namespace",
                  "Network",
                  "PhysicalMachine",
                  "ProcessorPool",
                  "Region",
                  "ReservedInstance",
                  "Service",
                  "ServiceProvider",
                  "Storage",
                  "StorageController",
                  "StorageTier",
                  "Switch",
                  "Unknown",
                  "ViewPod",
                  "VirtualApplication",
                  "VirtualDataCenter",
                  "VirtualMachine",
                  "VirtualVolume",
                  "VPod",
                  "WorkloadController",
                  "ContainerPlatformCluster",
                  "CloudCommitment",
                  "ApplicationComponentSpec",
                  "VirtualMachineSpec",
                  "DocumentCollection",
                  "NodeGroup",
                  "PowerVMPhysicalMachine",
                  "DataWarehouse",
                  "DataWarehouseTier"
                ]
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor to include in the next request for pagination.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a service-specific maximum limit",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/supplychains/stats": {
      "post": {
        "tags": [
          "Supply Chains"
        ],
        "summary": "Get the statistics for a supply chain",
        "operationId": "getEntitiesCountStatsByUuid",
        "requestBody": {
          "description": "The filters for the entity list",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/SupplyChainStatsApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a list of available tags",
        "operationId": "getTags",
        "parameters": [
          {
            "name": "scopes",
            "in": "query",
            "description": "List of scopes to query for tags",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_type",
            "in": "query",
            "description": "Limit query to tags containing entities of this type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environment_type",
            "in": "query",
            "description": "Limit query to tags in the following environment",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.  Defaults to KEY.",
            "schema": {
              "type": "string",
              "enum": [
                "KEY"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/entities": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Gets a list of entities for the specified tag",
        "operationId": "getEntitiesByTagKey",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "Tag key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.  Defaults to NAME.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "SEVERITY"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_type}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieves all tag keys that exist in the topology for a given tag type",
        "operationId": "getTagKeysByType",
        "parameters": [
          {
            "name": "tag_type",
            "in": "path",
            "description": "Tag type for the query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "BUSINESS_DIMENSION",
                "TAG_DIMENSION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tags/{tag_type}/{key}/actions": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Retrieves actions for a specific tag type and key",
        "operationId": "getActionsForTag",
        "parameters": [
          {
            "name": "tag_type",
            "in": "path",
            "description": "Tag type for the query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "BUSINESS_DIMENSION",
                "TAG_DIMENSION"
              ]
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Tag key for the query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results,this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.",
            "schema": {
              "type": "string",
              "default": "SEVERITY",
              "enum": [
                "NAME",
                "SEVERITY",
                "RISK_CATEGORY",
                "SAVINGS",
                "CREATION_DATE",
                "DISRUPTIVENESS",
                "REVERSIBILITY",
                "IDLE_TIME",
                "FILE_SIZE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "forceExpansionOfAggregatedEntities",
            "in": "query",
            "description": "This parameter controls how the entity will be expanded when searching for related entities. When true, composite entities (like datacenters) within the scope will be expanded to their contained entities (like physical machines) before traversing the supply chain looking for related entities of a given type. When false, the supply chain of the composite entity (e.g. datacenter) itself will be traversed. Defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Filters and groupings for the action stats",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/tags/{tag_type}/{key}/actions/stats": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieves action stats grouped by tag value for a given tag type and tag key",
        "operationId": "getActionStatsByTagTypeAndKey",
        "parameters": [
          {
            "name": "tag_type",
            "in": "path",
            "description": "Tag type for the query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "BUSINESS_DIMENSION",
                "TAG_DIMENSION"
              ]
            }
          },
          {
            "name": "key",
            "in": "path",
            "description": "Tag key for the query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Filters and groupings for the action stats",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/targets": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get a list of targets",
        "operationId": "getTargets",
        "parameters": [
          {
            "name": "environment_type",
            "in": "query",
            "description": "filter by Environment type",
            "schema": {
              "type": "string",
              "enum": [
                "HYBRID",
                "CLOUD",
                "ONPREM",
                "UNKNOWN"
              ]
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "A regex that is used to filter targets by the display name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "target_category",
            "in": "query",
            "description": "The target category to filter by.",
            "schema": {
              "type": "string"
            },
            "example": "Hypervisor"
          },
          {
            "name": "target_type",
            "in": "query",
            "description": "Filter by target type.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACTION_SCRIPT",
                  "ACTIONSTREAM_KAFKA",
                  "APPDYNAMICS",
                  "APPINSIGHTS",
                  "APPTIO_CLOUDABILITY",
                  "AWS_ACCOUNTS",
                  "AWS_BILLING",
                  "AWS_CLOUD_BILLING",
                  "AWS_COST",
                  "AWS_LAMBDA",
                  "AWS",
                  "AWS_INFRASTRUCTURE",
                  "AZURE_BILLING",
                  "AZURE_COST",
                  "AZURE_EA",
                  "AZURE_PRICING",
                  "AZURE_SERVICE_PRINCIPAL",
                  "AZURE_SUBSCRIPTION",
                  "AZURE_WASTED_VOLUMES",
                  "AZURE_INFRASTRUCTURE",
                  "AZURE",
                  "CISCO_APIC",
                  "CISCO_HYPERFLEX",
                  "CISCO_UCS_CENTRAL",
                  "CISCO_UCS_DIRECTOR",
                  "CISCO_UCS_MANAGER",
                  "CISCO_UCS",
                  "CITRIX_HYPERVISOR",
                  "CLOUDFOUNDRY",
                  "CLOUDSTACK",
                  "DATADOG",
                  "DELEGATINGPROBE",
                  "DELL_COMPELLENT",
                  "DATAINGESTIONFRAMEWORKTURBONOMIC",
                  "DATAINGESTIONFRAMEWORK",
                  "DYNATRACE",
                  "EMC_SCALEIO",
                  "EMC_VMAX",
                  "EMC_VNX",
                  "EMC_VPLEX",
                  "EMC_XTREMIO_SDK",
                  "FLEXERA",
                  "FLEXERAONE",
                  "FLEXNET_MANAGER",
                  "GCP_BILLING",
                  "GCP_COST",
                  "GCP_PROJECT",
                  "GCP_SERVICE_ACCOUNT",
                  "GCP_INFRASTRUCTURE",
                  "GCP",
                  "HITACHI_VANTARA",
                  "HP_ONEVIEW",
                  "HPE_3PAR",
                  "HYPERV",
                  "IBM_APPTIO",
                  "IBM_FLASHSYSTEM",
                  "IBM_POWERVM",
                  "INSTANA",
                  "INTERSIGHT_HYPERFLEX",
                  "INTERSIGHT_UCS",
                  "INTERSIGHT",
                  "ISTIO",
                  "JBOSS",
                  "JVM",
                  "KUBERNETESK8S116DC11",
                  "KUBERNETES",
                  "MS_EXCHANGE",
                  "MYSQL",
                  "NETAPP",
                  "NETFLOW",
                  "NETSCALER",
                  "NEWRELIC",
                  "NUTANIX",
                  "OPENSTACK",
                  "ORACLE",
                  "PowerVM",
                  "PROMETHEUS",
                  "PURE",
                  "RED_HAT_VIRTUALIZATION_MANAGER",
                  "RHEV",
                  "SERVICENOW",
                  "SFLOW",
                  "SNMP",
                  "SOFTLAYER",
                  "SQLSERVER",
                  "TANIUM",
                  "TERRAFORM",
                  "TETRATION",
                  "TOMCAT",
                  "USERDEFINED_ENTITIES",
                  "VCENTER_STORAGE_BROWSING",
                  "VCENTER",
                  "VCLOUDDIRECTOR",
                  "VMM",
                  "VMWARE_HORIZON",
                  "WEBHOOK",
                  "WEBLOGIC",
                  "WEBSPHERE",
                  "WMI"
                ]
              }
            }
          },
          {
            "name": "validation_status",
            "in": "query",
            "description": "Filter by validation status.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "IN_PROGRESS",
                  "SUCCESS",
                  "FAILED"
                ]
              }
            }
          },
          {
            "name": "health_state",
            "in": "query",
            "description": "Filter by health state.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CRITICAL",
                  "MAJOR",
                  "MINOR",
                  "NORMAL"
                ]
              }
            }
          },
          {
            "name": "rollup_state",
            "in": "query",
            "description": "Filter by rollup state, where the rollup state is the health state of the target including its derived targets.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CRITICAL",
                  "MAJOR",
                  "MINOR",
                  "NORMAL"
                ]
              }
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If omitted, a default value will be provided when call is paginated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by.  Defaults to validation_status when call is paginated.",
            "schema": {
              "type": "string",
              "default": "validation_status",
              "enum": [
                "DISPLAY_NAME",
                "VALIDATION_STATUS",
                "HEALTH_STATE",
                "ROLLUP_STATE",
                "LAST_EDIT_TIME",
                "TARGET_TYPE"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true when call is paginated.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "query_method",
            "in": "query",
            "description": "The field specifying the method used to query for targets.  Defaults to regular expression.",
            "schema": {
              "type": "string",
              "default": "regex",
              "enum": [
                "REGEX",
                "STRING_CONTAINS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Targets"
        ],
        "summary": "Add a Target",
        "operationId": "addTarget",
        "parameters": [
          {
            "name": "validate",
            "in": "query",
            "description": "Validate all targets",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rediscover",
            "in": "query",
            "description": "Rediscover all targets",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Target to add. Target type and input fields are required, other fields are ignored. If this is not provided we choose to validate and/or rediscover all targets.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TargetApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/targets/health": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get health check results for targets in requested state.",
        "operationId": "getTargetsHealth",
        "parameters": [
          {
            "name": "health_state",
            "in": "query",
            "description": "filter by the state of health",
            "schema": {
              "type": "string",
              "enum": [
                "CRITICAL",
                "MAJOR",
                "MINOR",
                "NORMAL"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetHealthApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/targets/specs": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get a list of probes",
        "operationId": "getProbes",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TargetApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/targets/stats": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get statistics for different properties of the targets",
        "operationId": "getTargetStats",
        "parameters": [
          {
            "name": "group_by",
            "in": "query",
            "description": "The fields used to group the stats by. Suppose you have 5 vCenter targets and 3 HyperV targets. If groupBy is empty, the returned count will be 8. If groupBy is \"category\" the returned counts will be 5 and 3, with filters set accordingly (i.e. key: \"category\", value: \"vCenter\" or \"HyperV\")",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "CATEGORY"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/targets/{target_Uuid}": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get a target",
        "operationId": "getTarget",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Targets"
        ],
        "summary": "Edit a Target",
        "operationId": "editTarget",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Target to edit. Only input fields are required, all the other values are ignored",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TargetApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Targets"
        ],
        "summary": "Validate/Rediscover a Target",
        "operationId": "executeOnTarget",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "validate",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "rediscover",
            "in": "query",
            "description": "rediscover",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetApiDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Targets"
        ],
        "summary": "Delete target by Uuid",
        "operationId": "deleteTarget",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/targets/{target_Uuid}/actions": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get the list of current actions by target",
        "operationId": "getCurrentActionsByTargetUuid",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "detail_level",
            "in": "query",
            "description": "Level of details returned in the Actions",
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "EXECUTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Targets"
        ],
        "summary": "Get the list of actions by a Target",
        "operationId": "getActionsByTargetUuid",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The targetUuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The filters for actions",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActionApiInputDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionApiDTO"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/targets/{target_Uuid}/entities": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get the list of entities by target.  Call paginated with either cursor, limit, order_by or ascending being set",
        "operationId": "getEntitiesByTargetUuid",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "description": "When making subsequent calls to retrieve additional results, this is the cursor returned by the last call to this method.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of items to return. Must be a positive integer. If not set, the server will provide a default.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "The field to order the results by. Defaults to NAME.",
            "schema": {
              "type": "string",
              "enum": [
                "NAME",
                "SEVERITY"
              ]
            }
          },
          {
            "name": "ascending",
            "in": "query",
            "description": "Whether to arrange in ascending order. Defaults to true.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/targets/{target_Uuid}/health": {
      "get": {
        "tags": [
          "Targets"
        ],
        "summary": "Get health info for a target",
        "operationId": "getTargetHealth",
        "parameters": [
          {
            "name": "target_Uuid",
            "in": "path",
            "description": "The Uuid of the target",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TargetHealthApiDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get a list of templates",
        "operationId": "getTemplates",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Create a Template",
        "operationId": "addTemplate",
        "requestBody": {
          "description": "The Template to create",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TemplateApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/templates/cloudos": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get list of supported OSes",
        "operationId": "getListOfSupportedOSes",
        "parameters": [
          {
            "name": "scopeUuid",
            "in": "query",
            "description": "Group scope Uuid or Zone Uuid. It should be the Uuid of the group,containing zones (physical machines)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/physicalmachine/cpumodels": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get Cpu List for Host Template Creation",
        "operationId": "getCpuList",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CpuModelApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{template_Uuid}": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Get templates by type or Uuid",
        "operationId": "getTemplatesByTypeOrUuid",
        "parameters": [
          {
            "name": "template_Uuid",
            "in": "path",
            "description": "The type or Uuid of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Templates"
        ],
        "summary": "Edit a Template",
        "operationId": "editTemplate",
        "parameters": [
          {
            "name": "template_Uuid",
            "in": "path",
            "description": "The Uuid of the VM Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Template to edit",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TemplateApiInputDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Delete template by Uuid",
        "operationId": "deleteTemplateByUuid",
        "parameters": [
          {
            "name": "template_Uuid",
            "in": "path",
            "description": "The Uuid of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/templates/{template_Uuid}/entities": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get entities that match the template",
        "operationId": "getTemplateEntities",
        "parameters": [
          {
            "name": "template_Uuid",
            "in": "path",
            "description": "The Uuid of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceEntityApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/templates/{template_Uuid}/prices": {
      "get": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Get the rates per datacenter for given template within business unit, price adjustment will be applied if exists.",
        "operationId": "getTemplatePrices",
        "parameters": [
          {
            "name": "template_Uuid",
            "in": "path",
            "description": "The Uuid of the template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entity_Uuid",
            "in": "query",
            "description": "The Uuid of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "businessunit",
            "in": "query",
            "description": "The Uuid of the entity's region/dc",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityPriceDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/topologydefinitions": {
      "get": {
        "tags": [
          "Topology Definitions"
        ],
        "summary": "Get all topology definitions.",
        "operationId": "getAllTopologyDefinitions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Topology Definitions"
        ],
        "summary": "Create a topology definition.",
        "operationId": "createTopologyDefinition",
        "requestBody": {
          "description": "The new topology definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/topologydefinitions/{topologyDefinition_Uuid}": {
      "get": {
        "tags": [
          "Topology Definitions"
        ],
        "summary": "Get a single topology definition.",
        "operationId": "getTopologyDefinition",
        "parameters": [
          {
            "name": "topologyDefinition_Uuid",
            "in": "path",
            "description": "The Uuid of the topology definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Topology Definitions"
        ],
        "summary": "Edit topology definition.",
        "operationId": "editTopologyDefinition",
        "parameters": [
          {
            "name": "topologyDefinition_Uuid",
            "in": "path",
            "description": "The Uuid of the topology definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The updated topology definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TopologyDataDefinitionApiDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Topology Definitions"
        ],
        "summary": "Delete specified topology definition.",
        "operationId": "deleteTopologyDefinition",
        "parameters": [
          {
            "name": "topologyDefinition_Uuid",
            "in": "path",
            "description": "The Uuid of the topology definition.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of User",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new user",
        "operationId": "createUser",
        "requestBody": {
          "description": "Properties to create a user",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/frontdoor": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get IDP information",
        "operationId": "getFrontdoorIdp",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FrontdoorIdpApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/users/isAuthenticated": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get information if a user is authenticated",
        "operationId": "isAuthenticated",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        }
      }
    },
    "/users/ldap": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of Active Directories",
        "operationId": "getActiveDirectories",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveDirectoryApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update the Active Directory",
        "operationId": "updateActiveDirectory",
        "requestBody": {
          "description": "Properties of updated Active Directory",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveDirectoryApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new Active Directory",
        "operationId": "createActiveDirectory",
        "requestBody": {
          "description": "Properties to create a Active Directory",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveDirectoryApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete the Active Directory",
        "operationId": "deleteActiveDirectory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/users/ldap/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of Active Directory groups",
        "operationId": "getActiveDirectoryGroups",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change an existing Active Directory group",
        "operationId": "changeActiveDirectoryGroup",
        "requestBody": {
          "description": "New properties for an existing Active Directory group",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a new Active Directory group",
        "operationId": "createActiveDirectoryGroup",
        "requestBody": {
          "description": "Properties to create an Active Directory group",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/ldap/groups/{ad_group_Uuid}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete an existing Active Directory group",
        "operationId": "deleteActiveDirectoryGroup",
        "parameters": [
          {
            "name": "ad_group_Uuid",
            "in": "path",
            "description": "The Uuid of Active Directory group",
            "required": true,
            "schema": {
              "pattern": ".+",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the logged User",
        "operationId": "getLoggedUser",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/users/me/checkpermissions": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Check the turbo permissions to access various licensed features, for the current user",
        "operationId": "checkLoggedInUserFeaturePermissions",
        "parameters": [
          {
            "name": "feature",
            "in": "query",
            "description": "The feature for which to check permissions",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/users/saml": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get IDP information",
        "operationId": "getSAMLIdp",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SAMLIdpApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_Uuid}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a User by Uuid",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Edit an existing user",
        "operationId": "editUser",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties to edit a user",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/UserApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by uuid",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/{user_Uuid}/passwords": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Change password for an existing user",
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Properties to edit a user",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordApiDTO"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/users/{user_Uuid}/preferences/properties": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get user preference properties by user Uuid",
        "operationId": "getPreferencePropertiesByUser",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_Uuid}/preferences/properties/{property}": {
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "PUT a user preference property by user Uuid",
        "operationId": "setPreferenceProperty",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "property",
            "in": "path",
            "description": "The Key of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Value of the Property",
          "content": {
            "*/*": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "DELETE a user preference property by user Uuid",
        "operationId": "deletePreferenceProperty",
        "parameters": [
          {
            "name": "user_Uuid",
            "in": "path",
            "description": "The Uuid of the user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "property",
            "in": "path",
            "description": "The Key of the Property",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              }
            }
          }
        }
      }
    },
    "/widgetsets": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a list of widgetsets",
        "operationId": "getWidgetsetList",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "Category",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "scope_type",
            "in": "query",
            "description": "Scope Type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WidgetsetApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Create a widgetset",
        "operationId": "createWidgetset",
        "requestBody": {
          "description": "Widgetset input parameters",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/WidgetsetApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetsetApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/widgetsets/{widgetset_Uuid}": {
      "get": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Get a widgetset",
        "operationId": "getWidgetset",
        "parameters": [
          {
            "name": "widgetset_Uuid",
            "in": "path",
            "description": "The widgetset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetsetApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Update a widgetset",
        "operationId": "updateWidgetset",
        "parameters": [
          {
            "name": "widgetset_Uuid",
            "in": "path",
            "description": "The widgetset id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Widgetset input parameters",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/WidgetsetApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetsetApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "[INTERNAL USE - NOT SUPPORTED]"
        ],
        "summary": "Delete widgetset",
        "operationId": "deleteWidgetset",
        "parameters": [
          {
            "name": "widgetset_Uuid",
            "in": "path",
            "description": "The id of the widgetset",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/workflows": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Gets a list of discovered workflows",
        "operationId": "getWorkflows",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowApiDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Create a new workflow",
        "operationId": "addWorkflow",
        "requestBody": {
          "description": "The WorkflowApiDTO representing the workflow to add.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/workflows/definitionTests": {
      "post": {
        "tags": [
          "[IN DEVELOPMENT]"
        ],
        "summary": "Tests a workflow definition without actually creating the workflow.",
        "operationId": "validateWorkflow",
        "parameters": [
          {
            "name": "action_Uuid",
            "in": "query",
            "description": "The uuid of the action against which we are performing workflow validation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The workflow input to be validated",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowOperationResponseApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/workflows/stats": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get statistics for different properties of the workflows",
        "operationId": "getWorkflowsStats",
        "parameters": [
          {
            "name": "group_by",
            "in": "query",
            "description": "The fields used to group the stats by. Suppose you have 5 Webhook workflows and 2 Servicenow workflows. If groupBy is empty, the returned count will be 8. If groupBy is \"type\", the returned DTO would have two stat snapshots, with counts of 5 and 3 respectively, and filters set accordingly (i.e. key: \\\"type\\\", value: \\\"Webhook\\\" or \\\"Servicenow\\\".)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "TYPE"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StatSnapshotApiDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/workflows/{workflow_Uuid}": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Gets detailed information for the specified workflow",
        "operationId": "getWorkflowByUuid",
        "parameters": [
          {
            "name": "workflow_Uuid",
            "in": "path",
            "description": "The UUID of the workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowApiDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Workflows"
        ],
        "summary": "Edit a Workflow",
        "operationId": "editWorkflow",
        "parameters": [
          {
            "name": "workflow_Uuid",
            "in": "path",
            "description": "The Uuid of the workflow to edit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The full WorkflowApiDTO with any changed values.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Workflows"
        ],
        "summary": "Performs an operation on a workflow.",
        "operationId": "performOperation",
        "parameters": [
          {
            "name": "workflow_Uuid",
            "in": "path",
            "description": "The Uuid of the workflow to perform operation on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The details related to the operation of the workflow.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/WorkflowOperationRequestApiDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowOperationResponseApiDTO"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Workflows"
        ],
        "summary": "Delete a specified workflow",
        "operationId": "deleteWorkflow",
        "parameters": [
          {
            "name": "workflow_Uuid",
            "in": "path",
            "description": "The Uuid of the workflow to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {}
          }
        }
      }
    },
    "/workflows/{workflow_Uuid}/settingspolicies": {
      "get": {
        "tags": [
          "Workflows"
        ],
        "summary": "Get all policies used by this workflow.",
        "operationId": "getWorkflowsPolicies",
        "parameters": [
          {
            "name": "workflow_Uuid",
            "in": "path",
            "description": "The UUID of the workflow",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseApiDTO"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcceleratorCardApiDTO": {
        "type": "object",
        "properties": {
          "acceleratorFamily": {
            "type": "string",
            "description": "Accelerator/GPU Micro architecture family E.G NVIDIA_TURING, NVIDIA_AMPERE, AMD_RADEON_PRO"
          },
          "acceleratorModel": {
            "type": "string",
            "description": "Accelerator/GPU Micro model. E.G NVIDIA_T4, NVIDIA_T4G, NVIDIA_A10G, AMD_V520"
          },
          "numCores": {
            "type": "integer",
            "description": "Number of Accelerator/GPU cards",
            "format": "int32"
          },
          "memoryPerCore": {
            "type": "number",
            "description": "Memory in GB per Accelerator/GPU card",
            "format": "double"
          }
        },
        "description": "Model to describe info about an Accelerator/GPU Card"
      },
      "ActionApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "actionImpactID": {
            "type": "integer",
            "description": "The ID for the action, which will persist across restarts",
            "format": "int64"
          },
          "marketID": {
            "type": "integer",
            "description": "The ID of the market for which the action was generated",
            "format": "int64"
          },
          "createTime": {
            "type": "string",
            "description": "Creation time"
          },
          "updateTime": {
            "type": "string",
            "description": "Update time"
          },
          "clearTime": {
            "type": "string",
            "description": "Execution time"
          },
          "actionType": {
            "type": "string",
            "description": "Type",
            "enum": [
              "START",
              "MOVE",
              "SCALE",
              "ALLOCATE",
              "SUSPEND",
              "PROVISION",
              "RECONFIGURE",
              "RESIZE",
              "DELETE",
              "RIGHT_SIZE",
              "BUY_RI"
            ]
          },
          "actionState": {
            "type": "string",
            "description": "Action State.",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "PRE_IN_PROGRESS",
              "POST_IN_PROGRESS",
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED",
              "DISABLED",
              "QUEUED",
              "CLEARED",
              "ACCOUNTING",
              "READY",
              "FAILING",
              "BEFORE_EXEC",
              "IN_PROGRESS_NON_CRITICAL"
            ]
          },
          "actionMode": {
            "type": "string",
            "description": "Action Mode",
            "enum": [
              "DISABLED",
              "RECOMMEND",
              "EXTERNAL_APPROVAL",
              "MANUAL",
              "AUTOMATIC",
              "COLLECTION"
            ]
          },
          "userName": {
            "type": "string",
            "description": "Username of the user that accepted the action [DEPRECATED - Use: userInfo.userName in executionStatus.executorInfo]"
          },
          "details": {
            "type": "string",
            "description": "A user-readable string describing the action"
          },
          "importance": {
            "type": "number",
            "description": "Numeric value that describes the priority of the action",
            "format": "float"
          },
          "target": {
            "$ref": "#/components/schemas/ServiceEntityApiDTO"
          },
          "currentEntity": {
            "$ref": "#/components/schemas/ServiceEntityApiDTO"
          },
          "newEntity": {
            "$ref": "#/components/schemas/ServiceEntityApiDTO"
          },
          "currentValue": {
            "type": "string",
            "description": "Current value of a property, for example vMEM for a VM resize action"
          },
          "newValue": {
            "type": "string",
            "description": "Calculated value to resize to, such as vMEM for a VM resize action"
          },
          "valueUnits": {
            "type": "string",
            "description": "Units of the currentValue and newValue, such as KB for a VM vMEM resize action"
          },
          "resizeAttribute": {
            "type": "string",
            "description": "The commodity attribute to be resized",
            "enum": [
              "CAPACITY",
              "LIMIT",
              "RESERVATION"
            ]
          },
          "template": {
            "$ref": "#/components/schemas/TemplateApiDTO"
          },
          "risk": {
            "$ref": "#/components/schemas/LogEntryApiDTO"
          },
          "prerequisites": {
            "type": "array",
            "description": "Description(s) of any prerequisite(s) that must occur before execution is possible. If this field is populated, the action would otherwise be executable but has been blocked by this prerequisite, and is displayed accordingly. If this field is not populated, no prerequisite has caused the action mode to be modified, and the action is displayed as normal.",
            "items": {
              "type": "string"
            }
          },
          "prioritizedAutomationOpportunities": {
            "type": "array",
            "description": "The Action is generated using the 'Prioritze Automation' setting, indicating that it is possible to have more savings if these opportunities are satisfied",
            "items": {
              "type": "string"
            }
          },
          "stats": {
            "type": "array",
            "description": "Statistics, such as Mem, vCPU, costPrice",
            "items": {
              "$ref": "#/components/schemas/StatApiDTO"
            }
          },
          "progress": {
            "type": "integer",
            "description": "Moved the 'progress' percentage value inside 'executionStatus', available when action detail level is 'EXECUTION' - [DEPRECATED - Use: executionStatus.progress]",
            "format": "int32"
          },
          "currentLocation": {
            "$ref": "#/components/schemas/DiscoveredEntityApiDTO"
          },
          "newLocation": {
            "$ref": "#/components/schemas/DiscoveredEntityApiDTO"
          },
          "virtualDisks": {
            "type": "array",
            "description": "Virtual Disk used for the action, for example in a storage move",
            "items": {
              "$ref": "#/components/schemas/VirtualDiskApiDTO"
            }
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyApiDTO"
          },
          "relatedSettingsPolicies": {
            "type": "array",
            "description": "The related settings policies associated with the action",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "actionSchedule": {
            "$ref": "#/components/schemas/ActionScheduleApiDTO"
          },
          "compoundActions": {
            "type": "array",
            "description": "Property for compound move actions",
            "items": {
              "$ref": "#/components/schemas/ActionApiDTO"
            }
          },
          "reservedInstance": {
            "$ref": "#/components/schemas/ReservedInstanceApiDTO"
          },
          "reservedInstancePlatform": {
            "type": "string",
            "description": "The platform of the recommended RI if the action has a supersaving"
          },
          "externalActionName": {
            "type": "string",
            "description": "The name under which this action appears in third-party software or external approval backend"
          },
          "externalActionUrl": {
            "type": "string",
            "description": "URL to third-party software showing this action. Suitable for external action approval"
          },
          "executionStatus": {
            "$ref": "#/components/schemas/ActionExecutionAuditApiDTO"
          },
          "executionCharacteristics": {
            "$ref": "#/components/schemas/ActionExecutionCharacteristicApiDTO"
          },
          "entityCharacteristics": {
            "$ref": "#/components/schemas/DBEntityAspectApiDTO"
          },
          "source": {
            "type": "string",
            "description": "Defines what generated this action.",
            "enum": [
              "MARKET",
              "PARKING"
            ]
          },
          "actionID": {
            "type": "integer",
            "description": "Id of the action",
            "format": "int64"
          }
        },
        "description": "Model to describe an Action"
      },
      "ActionApiInputDTO": {
        "required": [
          "startTime"
        ],
        "type": "object",
        "properties": {
          "actionStateList": {
            "type": "array",
            "description": "List of States to filter.",
            "items": {
              "type": "string",
              "enum": [
                "ACCEPTED",
                "REJECTED",
                "PRE_IN_PROGRESS",
                "POST_IN_PROGRESS",
                "IN_PROGRESS",
                "SUCCEEDED",
                "FAILED",
                "DISABLED",
                "QUEUED",
                "CLEARED",
                "ACCOUNTING",
                "READY",
                "FAILING",
                "BEFORE_EXEC",
                "IN_PROGRESS_NON_CRITICAL"
              ]
            }
          },
          "actionModeList": {
            "type": "array",
            "description": "List of Modes to filter",
            "items": {
              "type": "string",
              "enum": [
                "DISABLED",
                "RECOMMEND",
                "EXTERNAL_APPROVAL",
                "MANUAL",
                "AUTOMATIC",
                "COLLECTION"
              ]
            }
          },
          "riskSeverityList": {
            "type": "array",
            "description": "List of Risk Severities to filter",
            "items": {
              "type": "string"
            }
          },
          "riskSubCategoryList": {
            "type": "array",
            "description": "List of Risk Severities to filter",
            "items": {
              "type": "string"
            }
          },
          "actionRelationTypeFilter": {
            "type": "array",
            "description": "Filters the main list of actions based on the types of relationships they have to other actions.",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "BLOCKED_BY",
                "BLOCKING",
                "CAUSED_BY",
                "CAUSING"
              ]
            }
          },
          "environmentType": {
            "type": "string",
            "description": "Filter the actions by Environment Type",
            "enum": [
              "ONPREM",
              "CLOUD"
            ]
          },
          "costType": {
            "type": "string",
            "description": "Filter the actions by cost Type",
            "enum": [
              "SAVING",
              "INVESTMENT"
            ]
          },
          "descriptionQuery": {
            "$ref": "#/components/schemas/QueryInputApiDTO"
          },
          "riskQuery": {
            "$ref": "#/components/schemas/QueryInputApiDTO"
          },
          "executionCharacteristics": {
            "$ref": "#/components/schemas/ActionExecutionCharacteristicInputApiDTO"
          },
          "savingsAmountRange": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          },
          "hasSchedule": {
            "type": "boolean",
            "description": "If true, only actions that have an associated execution schedule will be returned."
          },
          "hasPrerequisites": {
            "type": "boolean",
            "description": "If true, only actions that have a prerequisite preventing execution of the action will be returned."
          },
          "startTime": {
            "type": "string",
            "description": "Start time of the period to filter, based on Actions Creation Time"
          },
          "endTime": {
            "type": "string",
            "description": "End time of the period to filter, based on Actions Creation Time"
          },
          "cleared": {
            "type": "boolean",
            "description": "Filter by Actions Executed"
          },
          "cumulative": {
            "type": "boolean",
            "description": "Show the action savings as cumulative values"
          },
          "hasReservedInstance": {
            "type": "boolean",
            "description": "Filter the actions by whether having related reserved instance"
          },
          "excludeNotifications": {
            "type": "boolean",
            "description": "Exclude the notifications from the result"
          },
          "limitEntities": {
            "type": "integer",
            "description": "Limit number of entities in the result",
            "format": "int32"
          },
          "detailLevel": {
            "type": "string",
            "description": "Detail level of the Action, 'standard' is the default value",
            "enum": [
              "STANDARD",
              "EXECUTION"
            ]
          },
          "vendorId": {
            "type": "string",
            "description": "Vendor Id indicating the related vendor to the entity in the actions"
          },
          "actionTypeList": {
            "type": "array",
            "description": "List of Types to filter",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "START",
                "MOVE",
                "SCALE",
                "ALLOCATE",
                "SUSPEND",
                "TERMINATE",
                "SPAWN",
                "ADD_PROVIDER",
                "CHANGE",
                "REMOVE_PROVIDER",
                "PROVISION",
                "RECONFIGURE",
                "RESIZE",
                "RESIZE_CAPACITY",
                "WARN",
                "RECONFIGURE_THRESHOLD",
                "DELETE",
                "RIGHT_SIZE",
                "RESERVE_ON_PM",
                "RESERVE_ON_DS",
                "RESIZE_FOR_EFFICIENCY",
                "RESIZE_FOR_PERFORMANCE",
                "CROSS_TARGET_MOVE",
                "MOVE_TOGETHER",
                "ACTIVATE",
                "DEACTIVATE",
                "BUY_RI"
              ]
            }
          },
          "relatedEntityTypes": {
            "type": "array",
            "description": "Related Entity Types to include from the supply chain for this entity",
            "example": "Selecting a VCD, and specifying '\"related_entities\": [\"VirtualMachine\"] will include the actions for any VM in the given VDC",
            "items": {
              "type": "string"
            }
          },
          "targetEntityTypes": {
            "type": "array",
            "description": "Filter the actions where the target entity of the action matches the provided list of entity types",
            "example": "Specifying '\"target_entities\": [\"VirtualMachine\"] will include the actions where the target entity is a VM.",
            "items": {
              "type": "string"
            }
          },
          "relatedCloudServiceProviderIds": {
            "type": "array",
            "description": "Filter the actions by the related Cloud Service Providers.",
            "items": {
              "type": "string"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "Fields used to Group the Stats",
            "items": {
              "type": "string"
            }
          },
          "tagValueFilter": {
            "$ref": "#/components/schemas/StringListFilterApiDTO"
          },
          "virtualDiskDisplayName": {
            "$ref": "#/components/schemas/QueryInputApiDTO"
          }
        },
        "description": "Model to describe a Filter for Actions"
      },
      "ActionDetailsApiDTO": {
        "required": [
          "actionDetailType",
          "actionType"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string"
          },
          "actionDetailType": {
            "type": "string"
          }
        },
        "description": "Parent class for action details. Implementing classes include: CloudResizeActionDetailsApiDTO, NoDetailsApiDTO, RIBuyActionDetailsApiDTO, CloudProvisionActionDetailsApiDTO, CloudSuspendActionDetailsApiDTO, OnPremResizeActionDetailsApiDTO and ReconfigureActionDetailsApiDTO.",
        "discriminator": {
          "propertyName": "actionDetailType"
        }
      },
      "ActionExecutionApiDTO": {
        "required": [
          "acceptTime",
          "actionIds",
          "id",
          "skippedActions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Action Execution ID"
          },
          "actionIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "List of action IDs",
            "items": {
              "type": "string"
            }
          },
          "skippedActions": {
            "type": "array",
            "description": "List of actions that were skipped in execution",
            "items": {
              "$ref": "#/components/schemas/SkippedActionApiDTO"
            }
          },
          "acceptTime": {
            "type": "string",
            "description": "Time when actions were accepted (in ISO8601 format - YYYY-MM-DDTHH:MM:SS)"
          }
        },
        "description": "Model to describe an Action Execution."
      },
      "ActionExecutionAuditApiDTO": {
        "required": [
          "executionTime",
          "executorInfo",
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "State of the execution",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "PRE_IN_PROGRESS",
              "POST_IN_PROGRESS",
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED",
              "DISABLED",
              "QUEUED",
              "CLEARED",
              "ACCOUNTING",
              "READY",
              "FAILING",
              "BEFORE_EXEC",
              "IN_PROGRESS_NON_CRITICAL"
            ]
          },
          "executionTime": {
            "type": "string",
            "description": "Start of the execution time"
          },
          "completionTime": {
            "type": "string",
            "description": "End of the execution time"
          },
          "message": {
            "type": "string",
            "description": "Status message, if the Action failed, it will contains the Error details"
          },
          "progress": {
            "type": "integer",
            "description": "Action execution progress value, from 0 to 100",
            "format": "int32"
          },
          "executorInfo": {
            "$ref": "#/components/schemas/ExecutorInfoApiDTO"
          }
        },
        "description": "Model to describe an Action Execution status."
      },
      "ActionExecutionCharacteristicApiDTO": {
        "type": "object",
        "properties": {
          "disruptiveness": {
            "type": "string",
            "description": "whether action is disruptive.",
            "enum": [
              "DISRUPTIVE",
              "NON_DISRUPTIVE"
            ]
          },
          "reversibility": {
            "type": "string",
            "description": "whether action is reversible.",
            "enum": [
              "REVERSIBLE",
              "IRREVERSIBLE"
            ]
          }
        },
        "description": "Model to describe action execution characteristics"
      },
      "ActionExecutionCharacteristicInputApiDTO": {
        "type": "object",
        "properties": {
          "disruptiveness": {
            "type": "string",
            "description": "whether action is disruptive.",
            "enum": [
              "DISRUPTIVE",
              "NON_DISRUPTIVE"
            ]
          },
          "reversibility": {
            "type": "string",
            "description": "whether action is reversible.",
            "enum": [
              "REVERSIBLE",
              "IRREVERSIBLE"
            ]
          }
        },
        "description": "Model to describe action execution characteristics"
      },
      "ActionExecutionInputApiDto": {
        "required": [
          "actionIds"
        ],
        "type": "object",
        "properties": {
          "actionIds": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "List of action IDs",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Model to describe an Action Execution input."
      },
      "ActionResourceImpactStatApiInputDTO": {
        "required": [
          "actionResourceImpactStatList"
        ],
        "type": "object",
        "properties": {
          "actionStateList": {
            "type": "array",
            "description": "List of States to filter.",
            "items": {
              "type": "string",
              "enum": [
                "ACCEPTED",
                "REJECTED",
                "PRE_IN_PROGRESS",
                "POST_IN_PROGRESS",
                "IN_PROGRESS",
                "SUCCEEDED",
                "FAILED",
                "DISABLED",
                "QUEUED",
                "CLEARED",
                "ACCOUNTING",
                "READY",
                "FAILING",
                "BEFORE_EXEC",
                "IN_PROGRESS_NON_CRITICAL"
              ]
            }
          },
          "actionModeList": {
            "type": "array",
            "description": "List of Modes to filter",
            "items": {
              "type": "string",
              "enum": [
                "DISABLED",
                "RECOMMEND",
                "EXTERNAL_APPROVAL",
                "MANUAL",
                "AUTOMATIC",
                "COLLECTION"
              ]
            }
          },
          "riskSeverityList": {
            "type": "array",
            "description": "List of Risk Severities to filter",
            "items": {
              "type": "string"
            }
          },
          "riskSubCategoryList": {
            "type": "array",
            "description": "List of Risk Severities to filter",
            "items": {
              "type": "string"
            }
          },
          "actionRelationTypeFilter": {
            "type": "array",
            "description": "Filters the main list of actions based on the types of relationships they have to other actions.",
            "items": {
              "type": "string",
              "enum": [
                "NONE",
                "BLOCKED_BY",
                "BLOCKING",
                "CAUSED_BY",
                "CAUSING"
              ]
            }
          },
          "environmentType": {
            "type": "string",
            "description": "Filter the actions by Environment Type",
            "enum": [
              "ONPREM",
              "CLOUD"
            ]
          },
          "costType": {
            "type": "string",
            "description": "Filter the actions by cost Type",
            "enum": [
              "SAVING",
              "INVESTMENT"
            ]
          },
          "descriptionQuery": {
            "$ref": "#/components/schemas/QueryInputApiDTO"
          },
          "riskQuery": {
            "$ref": "#/components/schemas/QueryInputApiDTO"
          },
          "executionCharacteristics": {
            "$ref": "#/components/schemas/ActionExecutionCharacteristicInputApiDTO"
          },
          "savingsAmountRange": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          },
          "unattachedDays": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          },
          "hasSchedule": {
            "type": "boolean",
            "description": "If true, only actions that have an associated execution schedule will be returned."
          },
          "hasPrerequisites": {
            "type": "boolean",
            "description": "If true, only actions that have a prerequisite preventing execution of the action will be returned."
          },
          "actionResourceImpactStatList": {
            "type": "array",
            "description": "List of Action Resource Impact Stat Inputs",
            "items": {
              "$ref": "#/components/schemas/ActionResourceImpactStatInput"
            }
          }
        },
        "description": "Model to describe an input for Action Resource Impact Stats"
      },
      "ActionResourceImpactStatInput": {
        "required": [
          "actionType",
          "commodityType",
          "targetEntityType"
        ],
        "type": "object",
        "properties": {
          "targetEntityType": {
            "type": "string",
            "description": "Target entity type for an action. For example, VirtualMachine for a resize virtual machine action",
            "enum": [
              "ApplicationComponent",
              "VirtualMachine",
              "Storage",
              "DiskArray",
              "Database",
              "DatabaseServer",
              "Container",
              "LogicalPool"
            ]
          },
          "actionType": {
            "type": "string",
            "description": "Action Type",
            "enum": [
              "NONE",
              "START",
              "MOVE",
              "SCALE",
              "ALLOCATE",
              "SUSPEND",
              "TERMINATE",
              "SPAWN",
              "ADD_PROVIDER",
              "CHANGE",
              "REMOVE_PROVIDER",
              "PROVISION",
              "RECONFIGURE",
              "RESIZE",
              "RESIZE_CAPACITY",
              "WARN",
              "RECONFIGURE_THRESHOLD",
              "DELETE",
              "RIGHT_SIZE",
              "RESERVE_ON_PM",
              "RESERVE_ON_DS",
              "RESIZE_FOR_EFFICIENCY",
              "RESIZE_FOR_PERFORMANCE",
              "CROSS_TARGET_MOVE",
              "MOVE_TOGETHER",
              "ACTIVATE",
              "DEACTIVATE",
              "BUY_RI"
            ]
          },
          "commodityType": {
            "type": "string",
            "description": "Commodity Type that could be impacted by the action. For example, VCPU or VMEM for a Resize VM action.",
            "example": "VCPU",
            "enum": [
              "ACTION_PERMIT",
              "ACTIVE_SESSIONS",
              "APPLICATION",
              "BALLOONING",
              "BUFFER_COMMODITY",
              "CLUSTER",
              "COLLECTION_TIME",
              "COOLING",
              "CONNECTION",
              "COUPON",
              "CPU",
              "CPU_ALLOCATION",
              "CPU_PROVISIONED",
              "CPU_REQUEST_ALLOCATION",
              "CROSS_CLOUD_MOVE_SVC",
              "CROSS_CLUSTER_MOVE_SVC",
              "DATACENTER",
              "DATASTORE",
              "DB_CACHE_HIT_RATE",
              "DB_MEM",
              "DISK_ARRAY_ACCESS",
              "DRS_SEGMENTATION",
              "DSPM_ACCESS",
              "EXTENT",
              "FLOW",
              "FLOW_ALLOCATION",
              "HEAP",
              "HOST_LUN_ACCESS",
              "IMAGE_CPU",
              "IMAGE_MEM",
              "IMAGE_STORAGE",
              "INSTANCE_DISK_SIZE",
              "INSTANCE_DISK_TYPE",
              "IO_THROUGHPUT",
              "LICENSE_ACCESS",
              "MEM",
              "MEM_ALLOCATION",
              "MEM_REQUEST_ALLOCATION",
              "MEM_PROVISIONED",
              "NET_THROUGHPUT",
              "NETWORK",
              "NUM_DISK",
              "NUMBER_CONSUMERS",
              "NUM_VCORE",
              "POOL_CPU",
              "POOL_MEM",
              "POOL_STORAGE",
              "PORT_CHANNEL",
              "POWER",
              "Q16_VCPU",
              "Q1_VCPU",
              "Q2_VCPU",
              "Q32_VCPU",
              "Q4_VCPU",
              "Q64_VCPU",
              "Q8_VCPU",
              "RESPONSE_TIME",
              "SAME_CLUSTER_MOVE_SVC",
              "SEGMENTATION",
              "SLA_COMMODITY",
              "SOFTWARE_LICENSE_COMMODITY",
              "SPACE",
              "STORAGE_ACCESS",
              "STORAGE_ALLOCATION",
              "STORAGE_AMOUNT",
              "STORAGE_CLUSTER",
              "STORAGE_LATENCY",
              "STORAGE_PROVISIONED",
              "SWAPPING",
              "THREADS",
              "TRANSACTION",
              "TRANSACTION_LOG",
              "VCPU",
              "VCPU_LIMIT_QUOTA",
              "VCPU_REQUEST",
              "VCPU_REQUEST_QUOTA",
              "VDC",
              "VMEM",
              "VMEM_LIMIT_QUOTA",
              "VMEM_REQUEST",
              "VMEM_REQUEST_QUOTA",
              "VMPM_ACCESS",
              "VSTORAGE",
              "ZONE",
              "LICENSE_COMMODITY",
              "Q3_VCPU",
              "NUMBER_CONSUMERS_PM",
              "Q6_VCPU",
              "Q7_VCPU",
              "QN_VCPU",
              "RIGHT_SIZE_SVC",
              "RIGHT_SIZE_DOWN",
              "MOVE",
              "Q5_VCPU",
              "STORAGE",
              "NUMBER_CONSUMERS_STORAGE",
              "ACCESS",
              "RIGHT_SIZE_UP",
              "VAPP_ACCESS",
              "HOT_STORAGE",
              "HA_COMMODITY",
              "NETWORK_POLICY",
              "SERVICE_LEVEL_CLUSTER",
              "PROCESSING_UNITS",
              "TENANCY_ACCESS",
              "TEMPLATE_ACCESS",
              "BURST_BALANCE",
              "DESIRED_COUPON",
              "NETWORK_INTERFACE_COUNT",
              "BICLIQUE",
              "TAINT",
              "LABEL",
              "PEER_TO_PEER_AFFINITY",
              "PEER_TO_PEER_ANTI_AFFINITY",
              "ENERGY",
              "CARBON",
              "VIRTUAL_PROCESSORS",
              "CPU_READY",
              "PROCESSING_UNITS_PROVISIONED",
              "HARDWARE_VERSION",
              "GPU_MEM_ALLOCATION",
              "GPU_MEM",
              "GPU_COUNT",
              "GPU_TENSOR_ENGINE",
              "GPU_FP64_ENGINE",
              "GPU_FP32_ENGINE",
              "GPU_FP16_ENGINE",
              "GPU_MEMORY_BANDWIDTH",
              "CORE_SPEED",
              "VGPU_MEM",
              "CONCURRENT_QUERIES",
              "VGPU_COMPUTE",
              "GPU",
              "GPU_REQUEST",
              "GPU_REQUEST_QUOTA",
              "QUEUING_TIME",
              "SERVICE_TIME",
              "RAID_HOSTS",
              "UNKNOWN"
            ]
          }
        },
        "description": "Model to describe an Action Resource Impact Stat Input"
      },
      "ActionScheduleApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "nextOccurrence": {
            "type": "string",
            "description": "The time of the next occurrence represented in ISO8601 local time (YYYY-MM-DDTHH:MM:SS). For example, 2019-04-04T19:15."
          },
          "nextOccurrenceTimestamp": {
            "type": "integer",
            "description": "The time of the next occurence of this schedule represented in Timestamp in milliseconds. For example, 1562100619000",
            "format": "int64"
          },
          "timeZoneId": {
            "type": "string",
            "description": "The timezone of the schedule"
          },
          "mode": {
            "type": "string",
            "description": "The action mode affected by the schedule",
            "enum": [
              "DISABLED",
              "RECOMMEND",
              "EXTERNAL_APPROVAL",
              "MANUAL",
              "AUTOMATIC",
              "COLLECTION"
            ]
          },
          "acceptedByUserForMaintenanceWindow": {
            "type": "boolean",
            "description": "Boolean signifying acceptance or rejection of the action."
          },
          "userName": {
            "type": "string",
            "description": "The user who accepted the action for the maintenance window."
          },
          "remaingTimeActiveInMs": {
            "type": "integer",
            "description": "The amount of time that the schedule is going to be active at the time of call in milliseconds. This field will not be populated if the schedule is not currently active.",
            "format": "int64"
          }
        },
        "description": "Model to describe an Action Schedule."
      },
      "ActionScopesApiInputDTO": {
        "required": [
          "actionInput"
        ],
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "List of uuid to use as scope",
            "items": {
              "type": "string"
            }
          },
          "actionInput": {
            "$ref": "#/components/schemas/ActionApiInputDTO"
          },
          "relatedType": {
            "type": "string",
            "description": "Get the actions for the entity type related to the scopes"
          }
        },
        "description": "Model to describe the request for Actions in multiple Scopes"
      },
      "ActionScopesResourceImpactStatApiInputDTO": {
        "required": [
          "actionResourceImpactStatApiInput",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "List of uuid to use as scope",
            "items": {
              "type": "string"
            }
          },
          "actionResourceImpactStatApiInput": {
            "$ref": "#/components/schemas/ActionResourceImpactStatApiInputDTO"
          }
        },
        "description": "Model to describe the request for Actions Resource Impacts in multiple Scopes"
      },
      "ActionStateChangeApiDTO": {
        "required": [
          "state",
          "stateChangeTime"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "Action state",
            "enum": [
              "ACCEPTED",
              "REJECTED",
              "PRE_IN_PROGRESS",
              "POST_IN_PROGRESS",
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED",
              "DISABLED",
              "QUEUED",
              "CLEARED",
              "ACCOUNTING",
              "READY",
              "FAILING",
              "BEFORE_EXEC",
              "IN_PROGRESS_NON_CRITICAL"
            ]
          },
          "stateChangeTime": {
            "type": "string",
            "description": "Action state change time"
          }
        },
        "description": "Model to describe an Action State Change."
      },
      "ActiveDirectoryApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "domainName": {
            "type": "string",
            "description": "The domain name of current active directory"
          },
          "loginProviderURI": {
            "type": "string",
            "description": "The server name of current active directory"
          },
          "isSecure": {
            "type": "boolean",
            "description": "The server name of current active directory"
          },
          "groups": {
            "type": "array",
            "description": "Active directory groups defined in Ops Mgr for current active directory",
            "items": {
              "$ref": "#/components/schemas/ActiveDirectoryGroupApiDTO"
            }
          }
        },
        "description": "Model to describe an Active Directory. It contains domain name and server name which are global to Turbonomic server."
      },
      "ActiveDirectoryGroupApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The user type for current active directory group"
          },
          "roleName": {
            "type": "string",
            "description": "The user role name of current active directory group"
          },
          "scope": {
            "type": "array",
            "description": "The scope of current active directory group",
            "items": {
              "$ref": "#/components/schemas/GroupApiDTO"
            }
          }
        },
        "description": "Model to describe an Active Dierctory Group. Active Directory groups are used to manage user authentication. You can specify role and scope for the group, and any member of the AD group can log into Turbonomic with those privileges. "
      },
      "AddObjectApiDTO": {
        "type": "object",
        "properties": {
          "projectionDays": {
            "type": "array",
            "description": "List of projection days, indicate when to apply the changes",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "count": {
            "type": "integer",
            "description": "How many times to apply the add change",
            "format": "int32"
          },
          "targetEntityType": {
            "type": "string",
            "description": "Type of entity to add from group target"
          }
        },
        "description": "Model to describe an add change in the scenario"
      },
      "AggregateCommodityFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "aggregation",
              "commodityAttribute",
              "commodityType"
            ],
            "type": "object",
            "properties": {
              "commodityType": {
                "type": "string",
                "description": "The commodity name.",
                "readOnly": true,
                "enum": [
                  "ACTION_PERMIT",
                  "ACTIVE_SESSIONS",
                  "APPLICATION",
                  "BALLOONING",
                  "BUFFER_COMMODITY",
                  "CLUSTER",
                  "COLLECTION_TIME",
                  "COOLING",
                  "CONNECTION",
                  "COUPON",
                  "CPU",
                  "CPU_ALLOCATION",
                  "CPU_PROVISIONED",
                  "CPU_REQUEST_ALLOCATION",
                  "CROSS_CLOUD_MOVE_SVC",
                  "CROSS_CLUSTER_MOVE_SVC",
                  "DATACENTER",
                  "DATASTORE",
                  "DB_CACHE_HIT_RATE",
                  "DB_MEM",
                  "DISK_ARRAY_ACCESS",
                  "DRS_SEGMENTATION",
                  "DSPM_ACCESS",
                  "EXTENT",
                  "FLOW",
                  "FLOW_ALLOCATION",
                  "HEAP",
                  "HOST_LUN_ACCESS",
                  "IMAGE_CPU",
                  "IMAGE_MEM",
                  "IMAGE_STORAGE",
                  "INSTANCE_DISK_SIZE",
                  "INSTANCE_DISK_TYPE",
                  "IO_THROUGHPUT",
                  "LICENSE_ACCESS",
                  "MEM",
                  "MEM_ALLOCATION",
                  "MEM_REQUEST_ALLOCATION",
                  "MEM_PROVISIONED",
                  "NET_THROUGHPUT",
                  "NETWORK",
                  "NUM_DISK",
                  "NUMBER_CONSUMERS",
                  "NUM_VCORE",
                  "POOL_CPU",
                  "POOL_MEM",
                  "POOL_STORAGE",
                  "PORT_CHANNEL",
                  "POWER",
                  "Q16_VCPU",
                  "Q1_VCPU",
                  "Q2_VCPU",
                  "Q32_VCPU",
                  "Q4_VCPU",
                  "Q64_VCPU",
                  "Q8_VCPU",
                  "RESPONSE_TIME",
                  "SAME_CLUSTER_MOVE_SVC",
                  "SEGMENTATION",
                  "SLA_COMMODITY",
                  "SOFTWARE_LICENSE_COMMODITY",
                  "SPACE",
                  "STORAGE_ACCESS",
                  "STORAGE_ALLOCATION",
                  "STORAGE_AMOUNT",
                  "STORAGE_CLUSTER",
                  "STORAGE_LATENCY",
                  "STORAGE_PROVISIONED",
                  "SWAPPING",
                  "THREADS",
                  "TRANSACTION",
                  "TRANSACTION_LOG",
                  "VCPU",
                  "VCPU_LIMIT_QUOTA",
                  "VCPU_REQUEST",
                  "VCPU_REQUEST_QUOTA",
                  "VDC",
                  "VMEM",
                  "VMEM_LIMIT_QUOTA",
                  "VMEM_REQUEST",
                  "VMEM_REQUEST_QUOTA",
                  "VMPM_ACCESS",
                  "VSTORAGE",
                  "ZONE",
                  "LICENSE_COMMODITY",
                  "Q3_VCPU",
                  "NUMBER_CONSUMERS_PM",
                  "Q6_VCPU",
                  "Q7_VCPU",
                  "QN_VCPU",
                  "RIGHT_SIZE_SVC",
                  "RIGHT_SIZE_DOWN",
                  "MOVE",
                  "Q5_VCPU",
                  "STORAGE",
                  "NUMBER_CONSUMERS_STORAGE",
                  "ACCESS",
                  "RIGHT_SIZE_UP",
                  "VAPP_ACCESS",
                  "HOT_STORAGE",
                  "HA_COMMODITY",
                  "NETWORK_POLICY",
                  "SERVICE_LEVEL_CLUSTER",
                  "PROCESSING_UNITS",
                  "TENANCY_ACCESS",
                  "TEMPLATE_ACCESS",
                  "BURST_BALANCE",
                  "DESIRED_COUPON",
                  "NETWORK_INTERFACE_COUNT",
                  "BICLIQUE",
                  "TAINT",
                  "LABEL",
                  "PEER_TO_PEER_AFFINITY",
                  "PEER_TO_PEER_ANTI_AFFINITY",
                  "ENERGY",
                  "CARBON",
                  "VIRTUAL_PROCESSORS",
                  "CPU_READY",
                  "PROCESSING_UNITS_PROVISIONED",
                  "HARDWARE_VERSION",
                  "GPU_MEM_ALLOCATION",
                  "GPU_MEM",
                  "GPU_COUNT",
                  "GPU_TENSOR_ENGINE",
                  "GPU_FP64_ENGINE",
                  "GPU_FP32_ENGINE",
                  "GPU_FP16_ENGINE",
                  "GPU_MEMORY_BANDWIDTH",
                  "CORE_SPEED",
                  "VGPU_MEM",
                  "CONCURRENT_QUERIES",
                  "VGPU_COMPUTE",
                  "GPU",
                  "GPU_REQUEST",
                  "GPU_REQUEST_QUOTA",
                  "QUEUING_TIME",
                  "SERVICE_TIME",
                  "RAID_HOSTS",
                  "UNKNOWN"
                ]
              },
              "commodityAttribute": {
                "type": "string",
                "description": "The commodity attribute.",
                "readOnly": true,
                "enum": [
                  "USED",
                  "CAPACITY",
                  "PEAK",
                  "CURRENT_UTILIZATION",
                  "WEIGHTED_HISTORICAL_UTILIZATION",
                  "PERCENTILE_HISTORICAL_UTILIZATION"
                ]
              },
              "aggregation": {
                "type": "string",
                "description": "The type of aggregation.",
                "readOnly": true,
                "enum": [
                  "TOTAL",
                  "AVERAGE"
                ]
              }
            },
            "description": "An aggregation of commodities in a group.  Only groups have aggregated commodity fields."
          }
        ]
      },
      "AggregatedHealthResponseDTO": {
        "required": [
          "healthState",
          "numberOfItems",
          "subcategory"
        ],
        "type": "object",
        "properties": {
          "subcategory": {
            "type": "string",
            "description": "Health subcategory."
          },
          "healthState": {
            "type": "string",
            "description": "The (aggregated) health state for the subcategory.",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          },
          "numberOfItems": {
            "type": "integer",
            "description": "Number of entities whose state matches healthState.",
            "format": "int32"
          },
          "recommendations": {
            "type": "array",
            "description": "A list of recommendations specific for each problem (error) type.",
            "items": {
              "$ref": "#/components/schemas/Recommendation"
            }
          }
        },
        "description": "A DTO for a single aggregated health response item."
      },
      "AppliedScopeApiDTO": {
        "type": "object",
        "properties": {
          "appliedScopeType": {
            "type": "object",
            "properties": {},
            "description": "The group or entity type to which the cloud commitment is applicable"
          },
          "appliedScopeIds": {
            "type": "array",
            "description": "The IDs of the group or entity to which the cloud commitment is applicable",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Model to describe the scnope of resources to which a cloud commitment can be applied"
      },
      "AppliedScopeApiDTOObject": {
        "type": "object",
        "properties": {
          "appliedScopeType": {
            "type": "object",
            "properties": {},
            "description": "The group or entity type to which the cloud commitment is applicable"
          },
          "appliedScopeIds": {
            "type": "array",
            "description": "The IDs of the group or entity to which the cloud commitment is applicable",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Model to describe the scnope of resources to which a cloud commitment can be applied"
      },
      "AutomatedEntityDefinitionData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IEntityDefinitionData"
          },
          {
            "required": [
              "entityType",
              "namePrefix"
            ],
            "type": "object",
            "properties": {
              "namePrefix": {
                "type": "string",
                "description": "Naming prefix for automated entity definition"
              },
              "entityType": {
                "type": "string",
                "description": "Connected entity type",
                "enum": [
                  "ApplicationComponent",
                  "BusinessTransaction",
                  "Container",
                  "ContainerPod",
                  "DatabaseServer",
                  "Service",
                  "VirtualMachine"
                ]
              },
              "generationAndConnectionAttribute": {
                "$ref": "#/components/schemas/FilterApiDTO"
              }
            },
            "description": "Model to describe an automated part of user-defined topology definition."
          }
        ]
      },
      "BaseApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          }
        },
        "description": "Basic information of an entity"
      },
      "BaseCommodityApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the commodity",
            "enum": [
              "ACTION_PERMIT",
              "ACTIVE_SESSIONS",
              "APPLICATION",
              "BALLOONING",
              "BUFFER_COMMODITY",
              "CLUSTER",
              "COLLECTION_TIME",
              "COOLING",
              "CONNECTION",
              "COUPON",
              "CPU",
              "CPU_ALLOCATION",
              "CPU_PROVISIONED",
              "CPU_REQUEST_ALLOCATION",
              "CROSS_CLOUD_MOVE_SVC",
              "CROSS_CLUSTER_MOVE_SVC",
              "DATACENTER",
              "DATASTORE",
              "DB_CACHE_HIT_RATE",
              "DB_MEM",
              "DISK_ARRAY_ACCESS",
              "DRS_SEGMENTATION",
              "DSPM_ACCESS",
              "EXTENT",
              "FLOW",
              "FLOW_ALLOCATION",
              "HEAP",
              "HOST_LUN_ACCESS",
              "IMAGE_CPU",
              "IMAGE_MEM",
              "IMAGE_STORAGE",
              "INSTANCE_DISK_SIZE",
              "INSTANCE_DISK_TYPE",
              "IO_THROUGHPUT",
              "LICENSE_ACCESS",
              "MEM",
              "MEM_ALLOCATION",
              "MEM_REQUEST_ALLOCATION",
              "MEM_PROVISIONED",
              "NET_THROUGHPUT",
              "NETWORK",
              "NUM_DISK",
              "NUMBER_CONSUMERS",
              "NUM_VCORE",
              "POOL_CPU",
              "POOL_MEM",
              "POOL_STORAGE",
              "PORT_CHANNEL",
              "POWER",
              "Q16_VCPU",
              "Q1_VCPU",
              "Q2_VCPU",
              "Q32_VCPU",
              "Q4_VCPU",
              "Q64_VCPU",
              "Q8_VCPU",
              "RESPONSE_TIME",
              "SAME_CLUSTER_MOVE_SVC",
              "SEGMENTATION",
              "SLA_COMMODITY",
              "SOFTWARE_LICENSE_COMMODITY",
              "SPACE",
              "STORAGE_ACCESS",
              "STORAGE_ALLOCATION",
              "STORAGE_AMOUNT",
              "STORAGE_CLUSTER",
              "STORAGE_LATENCY",
              "STORAGE_PROVISIONED",
              "SWAPPING",
              "THREADS",
              "TRANSACTION",
              "TRANSACTION_LOG",
              "VCPU",
              "VCPU_LIMIT_QUOTA",
              "VCPU_REQUEST",
              "VCPU_REQUEST_QUOTA",
              "VDC",
              "VMEM",
              "VMEM_LIMIT_QUOTA",
              "VMEM_REQUEST",
              "VMEM_REQUEST_QUOTA",
              "VMPM_ACCESS",
              "VSTORAGE",
              "ZONE",
              "LICENSE_COMMODITY",
              "Q3_VCPU",
              "NUMBER_CONSUMERS_PM",
              "Q6_VCPU",
              "Q7_VCPU",
              "QN_VCPU",
              "RIGHT_SIZE_SVC",
              "RIGHT_SIZE_DOWN",
              "MOVE",
              "Q5_VCPU",
              "STORAGE",
              "NUMBER_CONSUMERS_STORAGE",
              "ACCESS",
              "RIGHT_SIZE_UP",
              "VAPP_ACCESS",
              "HOT_STORAGE",
              "HA_COMMODITY",
              "NETWORK_POLICY",
              "SERVICE_LEVEL_CLUSTER",
              "PROCESSING_UNITS",
              "TENANCY_ACCESS",
              "TEMPLATE_ACCESS",
              "BURST_BALANCE",
              "DESIRED_COUPON",
              "NETWORK_INTERFACE_COUNT",
              "BICLIQUE",
              "TAINT",
              "LABEL",
              "PEER_TO_PEER_AFFINITY",
              "PEER_TO_PEER_ANTI_AFFINITY",
              "ENERGY",
              "CARBON",
              "VIRTUAL_PROCESSORS",
              "CPU_READY",
              "PROCESSING_UNITS_PROVISIONED",
              "HARDWARE_VERSION",
              "GPU_MEM_ALLOCATION",
              "GPU_MEM",
              "GPU_COUNT",
              "GPU_TENSOR_ENGINE",
              "GPU_FP64_ENGINE",
              "GPU_FP32_ENGINE",
              "GPU_FP16_ENGINE",
              "GPU_MEMORY_BANDWIDTH",
              "CORE_SPEED",
              "VGPU_MEM",
              "CONCURRENT_QUERIES",
              "VGPU_COMPUTE",
              "GPU",
              "GPU_REQUEST",
              "GPU_REQUEST_QUOTA",
              "QUEUING_TIME",
              "SERVICE_TIME",
              "RAID_HOSTS",
              "UNKNOWN"
            ]
          },
          "key": {
            "type": "string",
            "description": "The specific commodity"
          },
          "units": {
            "type": "string",
            "description": "The units in which the commodity is measured, if any"
          }
        },
        "description": "Describes a commodity"
      },
      "BaseGroupApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "membersCount": {
            "type": "integer",
            "description": "Number of members of the Group",
            "format": "int32"
          }
        },
        "description": "Base model to describe a Group."
      },
      "BasicActionApiDTO": {
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string",
            "description": "Type",
            "enum": [
              "START",
              "MOVE",
              "SCALE",
              "ALLOCATE",
              "SUSPEND",
              "PROVISION",
              "RECONFIGURE",
              "RESIZE",
              "DELETE",
              "RIGHT_SIZE",
              "BUY_RI"
            ]
          },
          "details": {
            "type": "string",
            "description": "A user-readable string describing the action"
          },
          "target": {
            "$ref": "#/components/schemas/DiscoveredEntityApiDTO"
          },
          "currentEntity": {
            "$ref": "#/components/schemas/DiscoveredEntityApiDTO"
          },
          "newEntity": {
            "$ref": "#/components/schemas/DiscoveredEntityApiDTO"
          },
          "actionID": {
            "type": "integer",
            "description": "Id of the action",
            "format": "int64"
          }
        },
        "description": "Model to tersely describe an action, providing only a set of basic fields"
      },
      "BillingFamilyApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "masterAccountUuid": {
                "type": "string",
                "description": "The UUID of the master account."
              },
              "businessUnitApiDTOList": {
                "type": "array",
                "description": "List of business units, for all accounts in this billing family.",
                "items": {
                  "$ref": "#/components/schemas/BusinessUnitApiDTO"
                }
              }
            },
            "description": "A group consisting of (AWS) master account and its related sub-accounts."
          }
        ]
      },
      "BooleanConditionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The value of the field must be equal to this boolean value",
                "readOnly": true
              }
            },
            "description": "A condition for a boolean value."
          }
        ]
      },
      "BooleanFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "boolean",
                "description": "The value.",
                "readOnly": true
              }
            },
            "description": "A boolean value of a field."
          }
        ]
      },
      "BulkActionRequestApiDTO": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "state",
            "enum": [
              "RUNNING",
              "STOPPED",
              "SUSPENDED",
              "MAINTENANCE",
              "FAILOVER",
              "UNKNOWN",
              "STARTING",
              "STOPPING"
            ]
          },
          "error": {
            "type": "string",
            "description": "error"
          },
          "entityUUID": {
            "type": "string"
          }
        },
        "description": "BulkActionRequest"
      },
      "BulkActionRequestInputDTO": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "action",
            "enum": [
              "START",
              "STOP"
            ]
          },
          "entityUuids": {
            "type": "array",
            "description": "entityUuids",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "BulkActionInput"
      },
      "BusinessUnitApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discount": {
            "type": "number",
            "description": "Entity discount percentage",
            "format": "float"
          },
          "priceAdjustment": {
            "$ref": "#/components/schemas/PriceAdjustmentDTO"
          },
          "accountId": {
            "type": "string",
            "description": "Account ID"
          },
          "master": {
            "type": "boolean",
            "description": "Flag which shows whether this account is master or not"
          },
          "associatedTargetId": {
            "type": "integer",
            "description": "Target associated with this account, if workloads related to this account are being discovered. If no workloads are discovered for this account, the associatedTargetId will be empty.",
            "format": "int64"
          },
          "budget": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "businessUnitType": {
            "type": "string",
            "description": "Type of the business unit instance",
            "enum": [
              "BUDGET",
              "DISCOUNT",
              "PRICE_ADJUSTMENT",
              "DISCOVERED"
            ]
          },
          "cloudType": {
            "type": "string",
            "description": "Type of the cloud target which is related to current business account. ",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "UNKNOWN"
            ]
          },
          "accountType": {
            "type": "string",
            "description": "The category of the current cloud account.",
            "enum": [
              "STANDARD",
              "GOVERNMENT_US"
            ]
          },
          "riSupported": {
            "type": "boolean",
            "description": "Flag which shows whether this account is RI supported"
          },
          "childrenBusinessUnits": {
            "type": "array",
            "description": "UUIDs of the discovered children business units that will share the budget or discounts configuration of this business unit.",
            "items": {
              "type": "string"
            }
          },
          "targets": {
            "type": "array",
            "description": "Targets associated with the business unit",
            "items": {
              "$ref": "#/components/schemas/TargetApiDTO"
            }
          },
          "costPrice": {
            "type": "number",
            "description": "Cost price per Hour",
            "format": "float"
          },
          "severity": {
            "type": "string",
            "description": "Calculated using the highest severity of the member entities",
            "enum": [
              "UNKNOWN",
              "NORMAL",
              "MINOR",
              "MAJOR",
              "CRITICAL"
            ]
          },
          "membersCount": {
            "type": "integer",
            "description": "Number of members of the business unit",
            "format": "int32"
          },
          "memberType": {
            "type": "string",
            "description": "The type of service entities comprising the business unit"
          },
          "resourceGroupsCount": {
            "type": "integer",
            "description": "The number of Resource Groups belonging to the business unit",
            "format": "int32"
          },
          "displayable": {
            "type": "boolean",
            "description": "Whether business unit is displayable or not"
          },
          "pricingIdentifiers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Pricing idenifiers for the business unit"
          }
        },
        "description": "Model to describe the property of a business unit."
      },
      "BusinessUnitApiInputDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the business unit"
          },
          "budget": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "childrenBusinessUnits": {
            "type": "array",
            "description": "UUIDs of the discovered children business units, that will share the budget or discounts configuration of this business unit.",
            "items": {
              "type": "string"
            }
          },
          "discount": {
            "type": "number",
            "description": "Business unit enterprise-level discount percentage. It will come to effect if cloud service or template-level discounts are not configured.",
            "format": "float"
          },
          "priceAdjustment": {
            "$ref": "#/components/schemas/PriceAdjustmentDTO"
          },
          "targets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nameWithBusinessAccountType": {
            "type": "string"
          }
        },
        "description": "Model to describe the parameters for creating a business unit."
      },
      "BusinessUnitPriceAdjustmentApiDTO": {
        "type": "object",
        "properties": {
          "servicePriceAdjustments": {
            "type": "array",
            "description": "Price adjustment information for the related cloud services and templates.",
            "items": {
              "$ref": "#/components/schemas/CloudServicePriceAdjustmentApiDTO"
            }
          },
          "serviceDiscounts": {
            "type": "array",
            "description": "Discount information for the related cloud services and templates",
            "items": {
              "$ref": "#/components/schemas/CloudServicePriceAdjustmentApiDTO"
            }
          }
        },
        "description": "Price adjustment values for cloud services and templates related to a business unit. The price adjustment configured on an user-defined business unit apply tocloud services and templates offered by the children business units."
      },
      "BusinessUserEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "sessions": {
                "type": "array",
                "description": "Information about sessions to entities (VM or other) established by this BusinessUser.",
                "items": {
                  "$ref": "#/components/schemas/BusinessUserSessionApiDTO"
                }
              }
            },
            "description": "Additional attributes for a BusinessUser"
          }
        ]
      },
      "BusinessUserSessionApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "businessUserUuid": {
            "type": "string",
            "description": "UUID of the connected BusinessUser"
          },
          "connectedEntityUuid": {
            "type": "string",
            "description": "UUID of the entity that user has a connection to"
          },
          "duration": {
            "type": "integer",
            "description": "Time elapsed since the session start in seconds- sessions are always timed",
            "format": "int64"
          }
        },
        "description": "Session information for a connection established by BusinessUser to an entity (VM or other)"
      },
      "ChangePasswordApiDTO": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "ClientConfigurationApiDTO": {
        "type": "object",
        "properties": {
          "clientFirewallAllowlist": {
            "type": "array",
            "description": "Endpoints that client sites need to be able to access",
            "items": {
              "$ref": "#/components/schemas/ClientConfigurationEndpoint"
            }
          }
        },
        "description": "Client configuration information"
      },
      "ClientConfigurationEndpoint": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The endpoint name"
          },
          "type": {
            "type": "string",
            "description": "The endpoint type (LoadBalancer or Route)"
          },
          "host": {
            "type": "string",
            "description": "The host string of the endpoint. May be null"
          },
          "ip": {
            "type": "string",
            "description": "The IP address of the endpoint"
          },
          "port": {
            "type": "integer",
            "description": "The port of the endpoint",
            "format": "int32"
          }
        }
      },
      "ClientInputDTO": {
        "required": [
          "name",
          "supportedServices"
        ],
        "type": "object",
        "properties": {
          "supportedServices": {
            "type": "array",
            "description": "List of supported services",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "Name of client"
          }
        }
      },
      "ClientNetworkRawTokenApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientNetworkTokenApiOutputDTO"
          },
          {
            "type": "object",
            "properties": {
              "apiVersion": {
                "type": "string"
              },
              "kind": {
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/ClientNetworkRawTokenMetadata"
              },
              "data": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "description": "Raw token format"
          }
        ]
      },
      "ClientNetworkRawTokenMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ClientNetworkSitesMetadataApiDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "name": {
            "type": "string",
            "description": "name"
          }
        }
      },
      "ClientNetworkTokenApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClientNetworkTokenApiOutputDTO"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "id"
              },
              "tokenData": {
                "type": "string",
                "description": "Token data"
              }
            },
            "description": "Encoded token format"
          }
        ]
      },
      "ClientNetworkTokenApiOutputDTO": {
        "type": "object",
        "description": "One of {ClientNetworkTokenApiDTO, ClientNetworkRawTokenApiDTO}"
      },
      "ClientNetworkTokenInputDTO": {
        "type": "object",
        "properties": {
          "claimLimit": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Claim Limit: Number of times the token can be reused",
            "format": "int32",
            "example": 1
          },
          "expiration": {
            "maximum": 10080,
            "minimum": 1,
            "type": "integer",
            "description": "Expiration time (in minutes) to claim the token",
            "format": "int32",
            "example": 15
          }
        }
      },
      "ClientNetworkTokensMetadataApiDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "created": {
            "type": "string",
            "description": "Created"
          },
          "claimsMade": {
            "type": "integer",
            "description": "Claims Made",
            "format": "int32"
          },
          "claimsRemaining": {
            "type": "integer",
            "description": "Claims Remaining",
            "format": "int32"
          },
          "claimExpiration": {
            "type": "string",
            "description": "Claim Expiration"
          }
        }
      },
      "ClientServiceApiDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "supportedServices": {
            "type": "array",
            "description": "Supported services",
            "items": {
              "type": "string"
            }
          },
          "secret": {
            "type": "string",
            "description": "Secret"
          },
          "name": {
            "type": "string",
            "description": "Name of client"
          }
        }
      },
      "CloudAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "zone": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "region": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "businessAccount": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "resourceGroup": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "template": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "billingType": {
                "type": "string",
                "description": "The Cloud Billing type"
              },
              "tier": {
                "type": "string",
                "description": "The Tier of the storage"
              },
              "riCoveragePercentage": {
                "type": "number",
                "description": "The RI coverage percentage",
                "format": "float"
              },
              "riCoverage": {
                "$ref": "#/components/schemas/StatApiDTO"
              },
              "onDemandCost": {
                "type": "number",
                "description": "On-demand cost paid for workload per Hour (includes Compute and License on-demand costs)",
                "format": "float"
              },
              "enhancedNetworking": {
                "type": "string",
                "description": "The type of Enhanced Networking supported. If the entity is an AWS VM, this field will be populated by a value describing what kind of enhanced networking, if any, the VM is currently using. If the entity is not an AWS VM, this field is not relevant and will not be populated or displayed.",
                "enum": [
                  "NONE",
                  "ENA"
                ]
              },
              "enaActive": {
                "type": "string",
                "description": "Whether ENA is active. If the entity is an AWS VM, this field will be populated by a value describing whether ENA is currently in use or not. If the entity is not an AWS VM, this field is not relevant and will not be populated or displayed.",
                "enum": [
                  "Active",
                  "Inactive"
                ]
              },
              "virtualizationType": {
                "type": "string",
                "description": "The virtualization type. If the entity is an AWS VM, this field will be populated by a value describing what kind of virtualization type, if any, the VM is currently using. If the entity is not an AWS VM, this field is not relevant and will not be populated or displayed.",
                "enum": [
                  "PVM",
                  "HVM"
                ]
              },
              "architecture": {
                "type": "string",
                "description": "If the entity is an AWS VM, this field will be populated by a value describing what is the architecture of the VM.If the entity is not an AWS VM, this field is not relevant and will not be populated or displayed.",
                "enum": [
                  "32-bit",
                  "64-bit"
                ]
              },
              "nvme": {
                "type": "string",
                "description": "NVMe driver support. If the entity is an AWS VM, this field will be true if NVMe driver installed. If the entity is not an AWS VM, this field is not relevant and will not be populated or displayed.",
                "enum": [
                  "Installed",
                  "Not installed"
                ]
              },
              "entityUptime": {
                "$ref": "#/components/schemas/EntityUptimeApiDTO"
              },
              "tenancy": {
                "type": "string",
                "description": "The tenancy type for VMs",
                "enum": [
                  "DEFAULT",
                  "DEDICATED",
                  "HOST"
                ]
              },
              "pathSegments": {
                "type": "array",
                "description": "Optional path segments that can represent hierarchical context for this entity such as the names of parents containing this entity.",
                "items": {
                  "type": "string"
                }
              },
              "cloudServiceName": {
                "type": "string",
                "description": "Optional parameter that represents the name of the cloud service",
                "enum": [
                  "AMAZON_RDS",
                  "AMAZON_EC2",
                  "AMAZON_EC2_AUTO_SCALING",
                  "AZURE_APP_SERVICE",
                  "AZURE_COSMOS_DB",
                  "AZURE_DISK_STORAGE",
                  "AZURE_SQL_DATABASE",
                  "AZURE_SQL_MANAGED_INSTANCE",
                  "AZURE_SYNAPSE_SQL_POOL",
                  "AZURE_VIRTUAL_MACHINES",
                  "GCP_DISK_STORAGE",
                  "GCP_VIRTUAL_MACHINES"
                ]
              }
            },
            "description": "Model to describe Cloud attributes"
          }
        ]
      },
      "CloudCommitmentAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "startTimeInMilliseconds": {
                "type": "integer",
                "description": "The start time of the Cloud Commitment in UTC.",
                "format": "int64"
              },
              "expirationTimeInMilliseconds": {
                "type": "integer",
                "description": "The expiration time of the Cloud Commitment in UTC.",
                "format": "int64"
              },
              "termInMilliseconds": {
                "type": "integer",
                "description": "The term of the Cloud Commitment.",
                "format": "int64"
              },
              "cloudCommitmentScopeType": {
                "type": "string",
                "description": "The scope of the Cloud Commitment.",
                "enum": [
                  "FamilyScoped",
                  "FamilyAndOSScoped",
                  "CloudServiceScoped"
                ]
              },
              "cloudCommitmentScopeDTO": {
                "$ref": "#/components/schemas/CloudCommitmentScopeDTO"
              },
              "cloudCommitmentScopeInfo": {
                "$ref": "#/components/schemas/CloudCommitmentScopeInfoApiDTO"
              },
              "cloudCommitmentPricing": {
                "$ref": "#/components/schemas/CloudCommitmentPricingApiDTO"
              },
              "cloudCommitmentCapacityApiDTO": {
                "$ref": "#/components/schemas/CloudCommitmentCapacityApiDTO"
              },
              "payment": {
                "type": "string",
                "description": "Payment option of the cloud commitment.",
                "enum": [
                  "ALL_UPFRONT",
                  "PARTIAL_UPFRONT",
                  "NO_UPFRONT"
                ]
              },
              "providerSpecificType": {
                "type": "string",
                "description": "The provider specific type.",
                "enum": [
                  "SAVINGS_PLAN",
                  "COMMITTED_USE",
                  "RESERVED_INSTANCE"
                ]
              },
              "commitmentStatus": {
                "type": "string",
                "description": "The cloud commitment status.",
                "enum": [
                  "Unknown",
                  "Pending",
                  "Active",
                  "Expired",
                  "Canceled"
                ]
              },
              "instanceCount": {
                "type": "integer",
                "description": "Number of commitment instances with the same type, template, platform, etc.",
                "format": "int32"
              },
              "term": {
                "$ref": "#/components/schemas/StatApiDTO"
              }
            },
            "description": "Model to describe Cloud Commitment attributes"
          }
        ]
      },
      "CloudCommitmentCapacityApiDTO": {
        "type": "object",
        "properties": {
          "instanceCapacity": {
            "type": "integer",
            "description": "The instance capacity of the cloud commitment.",
            "format": "int64"
          },
          "spendCapacity": {
            "type": "number",
            "description": "The spend capacity of the cloud commitment.",
            "format": "double"
          },
          "commoditiesBought": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            },
            "description": "The capacity for each type commodity bought by the commitment."
          }
        },
        "description": "Model to describe cloud commitment capacity"
      },
      "CloudCommitmentPricingApiDTO": {
        "type": "object",
        "properties": {
          "reservedInstanceType": {
            "type": "string",
            "description": "The commitment offering type, e.g. standard or convertible",
            "enum": [
              "STANDARD",
              "CONVERTIBLE"
            ]
          },
          "paymentOption": {
            "type": "string",
            "description": "The commitment payment option",
            "enum": [
              "ALL_UPFRONT",
              "PARTIAL_UPFRONT",
              "NO_UPFRONT"
            ]
          },
          "fixedCost": {
            "type": "number",
            "description": "The fixed cost of the commitment",
            "format": "double"
          },
          "recurringCost": {
            "type": "number",
            "description": "The recurring cost of the commitment",
            "format": "double"
          },
          "effectiveCost": {
            "$ref": "#/components/schemas/StatApiDTO"
          }
        },
        "description": "Model to describe cloud commitment pricing"
      },
      "CloudCommitmentScopeDTO": {
        "type": "object",
        "properties": {
          "cloudFamilyReferenceApiDTO": {
            "$ref": "#/components/schemas/CloudFamilyReferenceApiDTO"
          }
        },
        "description": "Model to describe cloud committment scope."
      },
      "CloudCommitmentScopeInfoApiDTO": {
        "type": "object",
        "properties": {
          "topologyScopes": {
            "type": "array",
            "description": "A list of topology related scope objects that may apply to a cloud commitment",
            "items": {
              "$ref": "#/components/schemas/TopologyScopeApiDTO"
            }
          },
          "appliedScope": {
            "$ref": "#/components/schemas/AppliedScopeApiDTOObject"
          }
        },
        "description": "A container of scope related objects that may apply to a cloud commitment"
      },
      "CloudFamilyReferenceApiDTO": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The family of the Cloud Commitment."
          },
          "entityType": {
            "type": "string",
            "description": "The entity type the Cloud Commitment applies to.",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          }
        },
        "description": "Model describe a reference to a cloud family"
      },
      "CloudProvisionActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "onDemandRate": {
                "type": "number",
                "format": "float"
              },
              "onDemandCost": {
                "type": "number",
                "format": "float"
              },
              "subType": {
                "type": "string"
              }
            },
            "description": "Model to describe provision action details for cloud entities"
          }
        ]
      },
      "CloudResizeActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "onDemandRateBefore": {
                "type": "number",
                "format": "float"
              },
              "onDemandRateAfter": {
                "type": "number",
                "format": "float"
              },
              "onDemandCostBefore": {
                "type": "number",
                "format": "float"
              },
              "onDemandCostAfter": {
                "type": "number",
                "format": "float"
              },
              "riCoverageBefore": {
                "$ref": "#/components/schemas/StatApiDTO"
              },
              "riCoverageAfter": {
                "$ref": "#/components/schemas/StatApiDTO"
              },
              "commitmentRateBefore": {
                "type": "number",
                "format": "float"
              },
              "commitmentRateAfter": {
                "type": "number",
                "format": "float"
              },
              "effectiveCostBefore": {
                "type": "number",
                "format": "float"
              },
              "effectiveCostAfter": {
                "type": "number",
                "format": "float"
              },
              "commitmentCoverageBefore": {
                "$ref": "#/components/schemas/StatApiDTO"
              },
              "commitmentCoverageAfter": {
                "$ref": "#/components/schemas/StatApiDTO"
              },
              "entityUptime": {
                "$ref": "#/components/schemas/EntityUptimeApiDTO"
              },
              "subType": {
                "type": "string"
              }
            },
            "description": "Model to describe resize action details for cloud entities"
          }
        ]
      },
      "CloudServicePriceAdjustmentApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discount": {
            "type": "number",
            "description": "Entity discount percentage",
            "format": "float"
          },
          "priceAdjustment": {
            "$ref": "#/components/schemas/PriceAdjustmentDTO"
          },
          "pricingModel": {
            "type": "string",
            "description": "Pricing model, 'On demand' for time-based, 'Reserved' for coupon-based, 'Spot' for customer bidding",
            "enum": [
              "ON_DEMAND",
              "RESERVED",
              "SPOT"
            ]
          },
          "templateDiscounts": {
            "type": "array",
            "description": "Discount values for the templates offered by the cloud service under certain pricing model.",
            "items": {
              "$ref": "#/components/schemas/TemplatePriceAdjustmentDTO"
            }
          },
          "templatePriceAdjustments": {
            "type": "array",
            "description": "Price adjustment values for the templates offered by the cloud service under certain pricing model.",
            "items": {
              "$ref": "#/components/schemas/TemplatePriceAdjustmentDTO"
            }
          }
        },
        "description": "Price adjustments for cloud service and related templates specified for a certain pricing model."
      },
      "CloudServicePricingModelApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discount": {
            "type": "number",
            "description": "Entity discount percentage",
            "format": "float"
          },
          "priceAdjustment": {
            "$ref": "#/components/schemas/PriceAdjustmentDTO"
          },
          "pricingModel": {
            "type": "string",
            "description": "Pricing model, 'On demand' for time-based, 'Reserved' for coupon-based, 'Spot' for customer bidding",
            "enum": [
              "ON_DEMAND",
              "RESERVED",
              "SPOT"
            ]
          }
        },
        "description": "Cloud service + pricing model pair that is available for a business unit."
      },
      "CloudSuspendActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "onDemandRate": {
                "type": "number",
                "format": "float"
              },
              "onDemandCost": {
                "type": "number",
                "format": "float"
              },
              "subType": {
                "type": "string"
              }
            },
            "description": "Model to describe suspend action details for cloud entities"
          }
        ]
      },
      "CommodityDetailsApiDTO": {
        "required": [
          "commodityType",
          "filters"
        ],
        "type": "object",
        "properties": {
          "commodityType": {
            "type": "string",
            "description": "Relation Type",
            "enum": [
              "ACTION_PERMIT",
              "ACTIVE_SESSIONS",
              "APPLICATION",
              "BALLOONING",
              "BUFFER_COMMODITY",
              "CLUSTER",
              "COLLECTION_TIME",
              "COOLING",
              "CONNECTION",
              "COUPON",
              "CPU",
              "CPU_ALLOCATION",
              "CPU_PROVISIONED",
              "CPU_REQUEST_ALLOCATION",
              "CROSS_CLOUD_MOVE_SVC",
              "CROSS_CLUSTER_MOVE_SVC",
              "DATACENTER",
              "DATASTORE",
              "DB_CACHE_HIT_RATE",
              "DB_MEM",
              "DISK_ARRAY_ACCESS",
              "DRS_SEGMENTATION",
              "DSPM_ACCESS",
              "EXTENT",
              "FLOW",
              "FLOW_ALLOCATION",
              "HEAP",
              "HOST_LUN_ACCESS",
              "IMAGE_CPU",
              "IMAGE_MEM",
              "IMAGE_STORAGE",
              "INSTANCE_DISK_SIZE",
              "INSTANCE_DISK_TYPE",
              "IO_THROUGHPUT",
              "LICENSE_ACCESS",
              "MEM",
              "MEM_ALLOCATION",
              "MEM_REQUEST_ALLOCATION",
              "MEM_PROVISIONED",
              "NET_THROUGHPUT",
              "NETWORK",
              "NUM_DISK",
              "NUMBER_CONSUMERS",
              "NUM_VCORE",
              "POOL_CPU",
              "POOL_MEM",
              "POOL_STORAGE",
              "PORT_CHANNEL",
              "POWER",
              "Q16_VCPU",
              "Q1_VCPU",
              "Q2_VCPU",
              "Q32_VCPU",
              "Q4_VCPU",
              "Q64_VCPU",
              "Q8_VCPU",
              "RESPONSE_TIME",
              "SAME_CLUSTER_MOVE_SVC",
              "SEGMENTATION",
              "SLA_COMMODITY",
              "SOFTWARE_LICENSE_COMMODITY",
              "SPACE",
              "STORAGE_ACCESS",
              "STORAGE_ALLOCATION",
              "STORAGE_AMOUNT",
              "STORAGE_CLUSTER",
              "STORAGE_LATENCY",
              "STORAGE_PROVISIONED",
              "SWAPPING",
              "THREADS",
              "TRANSACTION",
              "TRANSACTION_LOG",
              "VCPU",
              "VCPU_LIMIT_QUOTA",
              "VCPU_REQUEST",
              "VCPU_REQUEST_QUOTA",
              "VDC",
              "VMEM",
              "VMEM_LIMIT_QUOTA",
              "VMEM_REQUEST",
              "VMEM_REQUEST_QUOTA",
              "VMPM_ACCESS",
              "VSTORAGE",
              "ZONE",
              "LICENSE_COMMODITY",
              "Q3_VCPU",
              "NUMBER_CONSUMERS_PM",
              "Q6_VCPU",
              "Q7_VCPU",
              "QN_VCPU",
              "RIGHT_SIZE_SVC",
              "RIGHT_SIZE_DOWN",
              "MOVE",
              "Q5_VCPU",
              "STORAGE",
              "NUMBER_CONSUMERS_STORAGE",
              "ACCESS",
              "RIGHT_SIZE_UP",
              "VAPP_ACCESS",
              "HOT_STORAGE",
              "HA_COMMODITY",
              "NETWORK_POLICY",
              "SERVICE_LEVEL_CLUSTER",
              "PROCESSING_UNITS",
              "TENANCY_ACCESS",
              "TEMPLATE_ACCESS",
              "BURST_BALANCE",
              "DESIRED_COUPON",
              "NETWORK_INTERFACE_COUNT",
              "BICLIQUE",
              "TAINT",
              "LABEL",
              "PEER_TO_PEER_AFFINITY",
              "PEER_TO_PEER_ANTI_AFFINITY",
              "ENERGY",
              "CARBON",
              "VIRTUAL_PROCESSORS",
              "CPU_READY",
              "PROCESSING_UNITS_PROVISIONED",
              "HARDWARE_VERSION",
              "GPU_MEM_ALLOCATION",
              "GPU_MEM",
              "GPU_COUNT",
              "GPU_TENSOR_ENGINE",
              "GPU_FP64_ENGINE",
              "GPU_FP32_ENGINE",
              "GPU_FP16_ENGINE",
              "GPU_MEMORY_BANDWIDTH",
              "CORE_SPEED",
              "VGPU_MEM",
              "CONCURRENT_QUERIES",
              "VGPU_COMPUTE",
              "GPU",
              "GPU_REQUEST",
              "GPU_REQUEST_QUOTA",
              "QUEUING_TIME",
              "SERVICE_TIME",
              "RAID_HOSTS",
              "UNKNOWN"
            ]
          },
          "filters": {
            "type": "array",
            "description": "Describes the grouping this commodity is included in, for examplewhether the commodity has real time stats available.",
            "items": {
              "$ref": "#/components/schemas/StatFilterApiDTO"
            }
          }
        },
        "description": "Information on relation type and its related commodities"
      },
      "CommodityFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "commodityAttribute",
              "commodityType"
            ],
            "type": "object",
            "properties": {
              "commodityType": {
                "type": "string",
                "description": "The commodity name.",
                "readOnly": true,
                "enum": [
                  "ACTION_PERMIT",
                  "ACTIVE_SESSIONS",
                  "APPLICATION",
                  "BALLOONING",
                  "BUFFER_COMMODITY",
                  "CLUSTER",
                  "COLLECTION_TIME",
                  "COOLING",
                  "CONNECTION",
                  "COUPON",
                  "CPU",
                  "CPU_ALLOCATION",
                  "CPU_PROVISIONED",
                  "CPU_REQUEST_ALLOCATION",
                  "CROSS_CLOUD_MOVE_SVC",
                  "CROSS_CLUSTER_MOVE_SVC",
                  "DATACENTER",
                  "DATASTORE",
                  "DB_CACHE_HIT_RATE",
                  "DB_MEM",
                  "DISK_ARRAY_ACCESS",
                  "DRS_SEGMENTATION",
                  "DSPM_ACCESS",
                  "EXTENT",
                  "FLOW",
                  "FLOW_ALLOCATION",
                  "HEAP",
                  "HOST_LUN_ACCESS",
                  "IMAGE_CPU",
                  "IMAGE_MEM",
                  "IMAGE_STORAGE",
                  "INSTANCE_DISK_SIZE",
                  "INSTANCE_DISK_TYPE",
                  "IO_THROUGHPUT",
                  "LICENSE_ACCESS",
                  "MEM",
                  "MEM_ALLOCATION",
                  "MEM_REQUEST_ALLOCATION",
                  "MEM_PROVISIONED",
                  "NET_THROUGHPUT",
                  "NETWORK",
                  "NUM_DISK",
                  "NUMBER_CONSUMERS",
                  "NUM_VCORE",
                  "POOL_CPU",
                  "POOL_MEM",
                  "POOL_STORAGE",
                  "PORT_CHANNEL",
                  "POWER",
                  "Q16_VCPU",
                  "Q1_VCPU",
                  "Q2_VCPU",
                  "Q32_VCPU",
                  "Q4_VCPU",
                  "Q64_VCPU",
                  "Q8_VCPU",
                  "RESPONSE_TIME",
                  "SAME_CLUSTER_MOVE_SVC",
                  "SEGMENTATION",
                  "SLA_COMMODITY",
                  "SOFTWARE_LICENSE_COMMODITY",
                  "SPACE",
                  "STORAGE_ACCESS",
                  "STORAGE_ALLOCATION",
                  "STORAGE_AMOUNT",
                  "STORAGE_CLUSTER",
                  "STORAGE_LATENCY",
                  "STORAGE_PROVISIONED",
                  "SWAPPING",
                  "THREADS",
                  "TRANSACTION",
                  "TRANSACTION_LOG",
                  "VCPU",
                  "VCPU_LIMIT_QUOTA",
                  "VCPU_REQUEST",
                  "VCPU_REQUEST_QUOTA",
                  "VDC",
                  "VMEM",
                  "VMEM_LIMIT_QUOTA",
                  "VMEM_REQUEST",
                  "VMEM_REQUEST_QUOTA",
                  "VMPM_ACCESS",
                  "VSTORAGE",
                  "ZONE",
                  "LICENSE_COMMODITY",
                  "Q3_VCPU",
                  "NUMBER_CONSUMERS_PM",
                  "Q6_VCPU",
                  "Q7_VCPU",
                  "QN_VCPU",
                  "RIGHT_SIZE_SVC",
                  "RIGHT_SIZE_DOWN",
                  "MOVE",
                  "Q5_VCPU",
                  "STORAGE",
                  "NUMBER_CONSUMERS_STORAGE",
                  "ACCESS",
                  "RIGHT_SIZE_UP",
                  "VAPP_ACCESS",
                  "HOT_STORAGE",
                  "HA_COMMODITY",
                  "NETWORK_POLICY",
                  "SERVICE_LEVEL_CLUSTER",
                  "PROCESSING_UNITS",
                  "TENANCY_ACCESS",
                  "TEMPLATE_ACCESS",
                  "BURST_BALANCE",
                  "DESIRED_COUPON",
                  "NETWORK_INTERFACE_COUNT",
                  "BICLIQUE",
                  "TAINT",
                  "LABEL",
                  "PEER_TO_PEER_AFFINITY",
                  "PEER_TO_PEER_ANTI_AFFINITY",
                  "ENERGY",
                  "CARBON",
                  "VIRTUAL_PROCESSORS",
                  "CPU_READY",
                  "PROCESSING_UNITS_PROVISIONED",
                  "HARDWARE_VERSION",
                  "GPU_MEM_ALLOCATION",
                  "GPU_MEM",
                  "GPU_COUNT",
                  "GPU_TENSOR_ENGINE",
                  "GPU_FP64_ENGINE",
                  "GPU_FP32_ENGINE",
                  "GPU_FP16_ENGINE",
                  "GPU_MEMORY_BANDWIDTH",
                  "CORE_SPEED",
                  "VGPU_MEM",
                  "CONCURRENT_QUERIES",
                  "VGPU_COMPUTE",
                  "GPU",
                  "GPU_REQUEST",
                  "GPU_REQUEST_QUOTA",
                  "QUEUING_TIME",
                  "SERVICE_TIME",
                  "RAID_HOSTS",
                  "UNKNOWN"
                ]
              },
              "commodityAttribute": {
                "type": "string",
                "description": "The commodity attribute.",
                "readOnly": true,
                "enum": [
                  "USED",
                  "CAPACITY",
                  "PEAK",
                  "CURRENT_UTILIZATION",
                  "WEIGHTED_HISTORICAL_UTILIZATION",
                  "PERCENTILE_HISTORICAL_UTILIZATION"
                ]
              }
            },
            "description": "A commodity field.  Only entities have commodity fields."
          }
        ]
      },
      "ComputeTierAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "required": [
              "instanceStorageSize",
              "numInstanceStorages",
              "tierFamily"
            ],
            "type": "object",
            "properties": {
              "tierFamily": {
                "type": "string",
                "description": "Family of compute tier (for example 'M4' for M4.large)"
              },
              "numInstanceStorages": {
                "type": "number",
                "description": "Number of instance storage disks. Compute tiers can have 0 or more instance storage disks.",
                "format": "float"
              },
              "instanceStorageSize": {
                "type": "number",
                "description": "Size per instance storage in GB. This will be 0 if no instance storage's are present for compute tier.",
                "format": "float"
              },
              "customConfigurable": {
                "type": "boolean",
                "description": "If the compute tier has commodities that can be configured per VM.",
                "example": true
              },
              "acceleratorCards": {
                "type": "array",
                "description": "The Accelerator/GPU cards",
                "items": {
                  "$ref": "#/components/schemas/AcceleratorCardApiDTO"
                }
              }
            },
            "description": "Model to describe Compute Tier attributes"
          }
        ]
      },
      "ConditionApiDTO": {
        "required": [
          "conditionType",
          "field",
          "operator"
        ],
        "type": "object",
        "properties": {
          "conditionType": {
            "type": "string",
            "description": "Type of compared values.",
            "readOnly": true,
            "enum": [
              "NUMBER",
              "TEXT",
              "INCLUSION",
              "INTEGER",
              "BOOLEAN"
            ]
          },
          "field": {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          "operator": {
            "type": "string",
            "description": "Operator to use.",
            "readOnly": true,
            "enum": [
              "EQ",
              "NEQ",
              "GT",
              "LT",
              "GE",
              "LE",
              "LIKE",
              "IN"
            ]
          }
        },
        "description": "A condition on a field of an entity or group.",
        "discriminator": {
          "propertyName": "conditionType"
        }
      },
      "ConfigChangesApiDTO": {
        "type": "object",
        "properties": {
          "addPolicyList": {
            "type": "array",
            "description": "List of Placement Policies to add",
            "items": {
              "$ref": "#/components/schemas/PolicyApiDTO"
            }
          },
          "removePolicyList": {
            "type": "array",
            "description": "List of Placement Policies to remove",
            "items": {
              "$ref": "#/components/schemas/PolicyApiDTO"
            }
          },
          "automationSettingList": {
            "type": "array",
            "description": "List of automation settings",
            "items": {
              "$ref": "#/components/schemas/SettingApiDTOString"
            }
          },
          "removeConstraintList": {
            "type": "array",
            "description": "List of constraints to remove",
            "items": {
              "$ref": "#/components/schemas/RemoveConstraintApiDTO"
            }
          },
          "riSettingList": {
            "type": "array",
            "description": "List of Reserved Instance settings",
            "items": {
              "$ref": "#/components/schemas/SettingApiDTO"
            }
          },
          "osMigrationSettingList": {
            "type": "array",
            "description": "List of OS migration settings",
            "items": {
              "$ref": "#/components/schemas/SettingApiDTOString"
            }
          },
          "includedCoupons": {
            "$ref": "#/components/schemas/IncludedCouponsApiDTO"
          },
          "subscription": {
            "$ref": "#/components/schemas/BusinessUnitApiDTO"
          }
        },
        "description": "Policies and Settings changes in the scenario"
      },
      "ConstraintApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "relation": {
            "type": "string",
            "enum": [
              "sold",
              "bought"
            ]
          },
          "entityType": {
            "type": "string",
            "description": "entity type of providers or consumers"
          },
          "relatedEntities": {
            "type": "array",
            "description": "if relation is sold they are consumers, if bought they are providers",
            "items": {
              "$ref": "#/components/schemas/ServiceEntityApiDTO"
            }
          },
          "numPotentialEntities": {
            "type": "integer",
            "description": "how many other providers/consumers can fulfill the constraint",
            "format": "int32"
          },
          "placementOptions": {
            "type": "array",
            "description": "A list of constraints prevent finding better placement for an entity",
            "items": {
              "$ref": "#/components/schemas/PlacementOptionApiDTO"
            }
          }
        },
        "description": "Model to describe the property of constraints, corresponding to entities constraints view in ui."
      },
      "ConstraintApiInputDTO": {
        "type": "object",
        "properties": {
          "relation": {
            "type": "string",
            "enum": [
              "sold",
              "bought"
            ]
          },
          "placementOptions": {
            "type": "array",
            "description": "A list of constraints prevent finding better placement for an entity",
            "items": {
              "$ref": "#/components/schemas/PlacementOptionApiInputDTO"
            }
          },
          "entityTypeFilter": {
            "type": "string",
            "description": "potential entity type filter",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          }
        },
        "description": "Model to describe the property of constraints"
      },
      "ContainerPlatformContextAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "namespace": {
                "type": "string",
                "description": "The namespace that a container platform entity belong to - [DEPRECATED - Use: namespaceEntity]"
              },
              "containerPlatformCluster": {
                "type": "string",
                "description": "The container platform cluster name that an entity belongs to - [DEPRECATED - Use: containerClusterEntity]"
              },
              "workloadControllerEntity": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "namespaceEntity": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "containerClusterEntity": {
                "$ref": "#/components/schemas/BaseApiDTO"
              },
              "serviceEntity": {
                "$ref": "#/components/schemas/BaseApiDTO"
              }
            },
            "description": "Model to describe Container Platform Context attributes"
          }
        ]
      },
      "CostInputApiDTO": {
        "type": "object",
        "properties": {
          "tagFilters": {
            "type": "array",
            "description": "List of Tag Filters.  NOTE: Required non-empty when used with costGroupBys set to \"TAG\"",
            "items": {
              "$ref": "#/components/schemas/TagApiDTO"
            }
          },
          "costGroupBys": {
            "type": "array",
            "description": "List of values to group the results by.  NOTE: When used non-empty tagFilters required",
            "items": {
              "type": "string",
              "enum": [
                "TAG",
                "TAG_GROUP",
                "TAG_VAL",
                "ENTITY",
                "ENTITY_TYPE",
                "ACCOUNT",
                "REGION",
                "CLOUD_SERVICE",
                "SERVICE_PROVIDER",
                "CLOUD_TIER_PROVIDER",
                "COST_CATEGORY",
                "PRICE_MODEL"
              ]
            }
          },
          "startDate": {
            "type": "string",
            "description": "Start time of the period to filter.  If startDate and endDate not provided current stats will be processed"
          },
          "endDate": {
            "type": "string",
            "description": "End time of the period to filter.  If startDate and endDate not provided current stats will be processed"
          }
        },
        "description": "Model to describe the request for Cost Statistics by a Time range"
      },
      "CpuModelApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "numCores": {
            "type": "integer",
            "description": "Number of Cores",
            "format": "int32"
          },
          "speed": {
            "type": "integer",
            "description": "Speed",
            "format": "int32"
          },
          "scalingFactor": {
            "type": "number",
            "description": "Scaling Factor",
            "format": "double"
          },
          "modelName": {
            "type": "string"
          }
        },
        "description": "Model to describe a Template: contains the resources used to Deploy a VM or to Add Workload/Supply in a Plan"
      },
      "CriteriaOptionApiDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "value"
          },
          "displayName": {
            "type": "string",
            "description": "value to display, more readable"
          },
          "subValues": {
            "type": "array",
            "description": "possible sub-values associated with the main value",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Generic model used to describe a search criteria option"
      },
      "DBEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "dbEngine": {
                "type": "string",
                "description": "The Database engine"
              },
              "dbEdition": {
                "type": "string",
                "description": "The Database edition"
              },
              "dbVersion": {
                "type": "string",
                "description": "The Database engine version"
              },
              "licenseModel": {
                "type": "string",
                "description": "The license model of the database engine"
              },
              "deploymentType": {
                "type": "string",
                "description": "The deployment type of the database engine"
              },
              "maxConcurrentWorkers": {
                "type": "integer",
                "description": "Maximum concurrent workers allowed for the DB",
                "format": "int32"
              },
              "maxConcurrentSessions": {
                "type": "integer",
                "description": "Maximum concurrent sessions allowed for the DB",
                "format": "int32"
              },
              "pricingModel": {
                "type": "string",
                "description": "Database Pricing Model.",
                "example": "DTU",
                "enum": [
                  "DTU",
                  "vCore",
                  "DWU",
                  "RU"
                ]
              },
              "replicationRole": {
                "type": "string",
                "description": "Replication role if DB is part of geo replicated DB. Currently applies to Azure DB only.",
                "example": "Primary",
                "enum": [
                  "Primary",
                  "Secondary",
                  "None"
                ]
              },
              "storageTier": {
                "type": "string",
                "description": "Storage Tier",
                "example": "GP2"
              },
              "dbServerName": {
                "type": "string",
                "description": "The server name of a database"
              },
              "serviceTier": {
                "type": "string",
                "description": "The service tier of a database, generally defines the storage architecture, space and I/O limits, and business continuity options related to availability and disaster recovery.",
                "example": "Hyperscale",
                "enum": [
                  "Free",
                  "Basic",
                  "Standard",
                  "Premium",
                  "GeneralPurpose",
                  "BusinessCritical",
                  "Hyperscale"
                ]
              },
              "computeTier": {
                "type": "string",
                "description": "The compute tier of a database. Compute tier options include the provisioned and serverless compute tiers",
                "example": "Provisioned Compute"
              },
              "hardwareGeneration": {
                "type": "string",
                "description": "Database hardware generation. The generation of hardware that underlies the DB instance",
                "example": "Gen4"
              },
              "backupPolicy": {
                "type": "string",
                "description": "The policy to backup and restore a database.",
                "example": "Enabled"
              },
              "workspace": {
                "type": "string",
                "description": "The resource group where the database is located."
              },
              "idleTime": {
                "type": "integer",
                "description": "Time duration for a database being idle in milliseconds.",
                "format": "int64"
              },
              "poolType": {
                "type": "string",
                "description": "Type of database pool."
              },
              "resourceId": {
                "type": "string",
                "description": "Resource identifier of the database. For example, the resource id in Azure, the ARN in AWS, or the full resource name in GCP."
              },
              "serverConfiguration": {
                "type": "string",
                "description": "The Database server configuration"
              },
              "creationTimeStamp": {
                "type": "integer",
                "description": "Timestamp in milliseconds for the creation of the database.",
                "format": "int64"
              }
            },
            "description": "Model to describe the db entity."
          }
        ]
      },
      "DatabaseServerEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "dbEngine": {
                "type": "string",
                "description": "The Database engine"
              },
              "dbEdition": {
                "type": "string",
                "description": "The Database edition"
              },
              "dbVersion": {
                "type": "string",
                "description": "The Database engine version"
              },
              "licenseModel": {
                "type": "string",
                "description": "The license model of the database engine"
              },
              "deploymentType": {
                "type": "string",
                "description": "The deployment type of the database engine"
              },
              "maxConcurrentWorkers": {
                "type": "integer",
                "description": "Maximum concurrent workers allowed for the DB",
                "format": "int32"
              },
              "maxConcurrentSessions": {
                "type": "integer",
                "description": "Maximum concurrent sessions allowed for the DB",
                "format": "int32"
              },
              "pricingModel": {
                "type": "string",
                "description": "Pricing Model followed by DB.",
                "example": "DTU"
              },
              "storageTier": {
                "type": "string",
                "description": "Storage Tier",
                "example": "GP2"
              },
              "clusterRole": {
                "type": "string",
                "description": "Cluster Role",
                "enum": [
                  "Writer",
                  "Reader"
                ]
              },
              "hourlyBilledOps": {
                "type": "number",
                "description": "Hourly Billed Ops - Count of operations per hour",
                "format": "double"
              },
              "featureStateMap": {
                "type": "object",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    "Enabled",
                    "Disabled",
                    "Unknown"
                  ]
                },
                "description": "Features"
              },
              "resourceId": {
                "type": "string",
                "description": "Resource identifier of the database server. For example, the resource id in Azure, the ARN in AWS, or the full resource name in GCP."
              },
              "creationTimeStamp": {
                "type": "integer",
                "description": "Timestamp in milliseconds for the creation of the database server.",
                "format": "int64"
              },
              "serverConfiguration": {
                "type": "string",
                "description": "The Database server configuration"
              },
              "replicas": {
                "type": "array",
                "description": "Replicas associated with this database",
                "items": {
                  "$ref": "#/components/schemas/ReplicaApiDTO"
                }
              },
              "databases": {
                "type": "array",
                "description": "Databases that run on this instance",
                "items": {
                  "type": "string"
                }
              },
              "fullyQualifiedDomainName": {
                "type": "string",
                "description": "Fully qualified domain name"
              },
              "backupStorageRedundancy": {
                "type": "string",
                "description": "Backup Storage Redundancy - refers to how data is duplicated across storage locations"
              }
            },
            "description": "Data related to database servers"
          }
        ]
      },
      "DatabaseServerTierAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "required": [
              "tierFamily"
            ],
            "type": "object",
            "properties": {
              "tierFamily": {
                "type": "string",
                "description": "Family of database server tier (for example 'M5' for db.M5.large)"
              }
            },
            "description": "Model to describe Database Server Tier attributes"
          }
        ]
      },
      "DatabaseServerTierInfoApiDTO": {
        "type": "object",
        "properties": {
          "databaseEngine": {
            "type": "string",
            "description": "The database engine to which a cloud commitment applies",
            "enum": [
              "UNKNOWN",
              "MARIADB",
              "MYSQL",
              "POSTGRESQL",
              "AURORAMYSQL",
              "AURORAPOSTGRESQL",
              "SQLSERVER",
              "ORACLE"
            ]
          },
          "deploymentType": {
            "type": "string",
            "description": "The deployment type that the commitment covers",
            "enum": [
              "SINGLE_AZ",
              "MULTI_AZ"
            ]
          },
          "licenseType": {
            "type": "string",
            "description": "The license type associated with the commitment",
            "enum": [
              "LICENSE_INCLUDED",
              "AHUB",
              "BRING_YOUR_OWN_LICENSE",
              "NO_LICENSE_REQUIRED"
            ]
          }
        },
        "description": "Model to describe the database server tier to which a cloud commitment applies"
      },
      "DatabaseTierAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "required": [
              "tierFamily"
            ],
            "type": "object",
            "properties": {
              "tierFamily": {
                "type": "string",
                "description": "Family of database tier (for example 'S' for S4)"
              }
            },
            "description": "Model to describe Database Tier attributes"
          }
        ]
      },
      "DemandEntityInfoDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "deploymentProfile": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "operationalCost": {
            "type": "string"
          },
          "placements": {
            "$ref": "#/components/schemas/PlacementInfoDTO"
          }
        },
        "description": "Model to describe a reservation entity "
      },
      "DemandReservationApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "reserveDateTime": {
            "type": "string"
          },
          "expireDateTime": {
            "type": "string"
          },
          "deployDateTime": {
            "type": "string"
          },
          "reserveCount": {
            "type": "integer",
            "format": "int32"
          },
          "deployCount": {
            "type": "integer",
            "format": "int32"
          },
          "placementExpirationDateTime": {
            "type": "string"
          },
          "placementResultMessage": {
            "type": "string",
            "description": "Details of placement during failure or success"
          },
          "constraintInfos": {
            "type": "array",
            "description": "The constraints user specified when running reservation which limit where templates could be placed.",
            "items": {
              "$ref": "#/components/schemas/ReservationConstraintApiDTO"
            }
          },
          "reservationDeployed": {
            "type": "boolean",
            "description": "When true, the reservation will be included in the system and will keep utilizing the resources from host and storage until the corresponding virtual machine utilization starts to reflect on the historically computed utilization."
          },
          "mode": {
            "type": "string",
            "description": "Demand related behavior for reservation of NO_GROUPING/AFFINITY. This value interacts with the grouping value which is specifying the type of grouping that the demand should consider the mode for. NO_GROUPING and NONE must be paired together and cannot be paired with other values. Combinations such as: (NO_GROUPING - NONE), (AFFINITY - CLUSTER) are valid. Examples of invalid combinations are (NO_GROUPING - CLUSTER), (AFFINITY - NONE).",
            "enum": [
              "NO_GROUPING",
              "AFFINITY"
            ]
          },
          "grouping": {
            "type": "string",
            "description": "Grouping related behavior for reservation of NONE and CLUSTER. This value interacts with the mode value.",
            "enum": [
              "NONE",
              "CLUSTER"
            ]
          },
          "scope": {
            "type": "array",
            "description": "List of uuids of groups (currently limited to Clusters or Host Groups) whose members are the only possible providers of that type of entity. These are further constrained by the constraintIds passed in placement parameters. If multiple groups of providers are specified then it is possible that entities will be placed within different groups.",
            "items": {
              "type": "string"
            }
          },
          "demandEntities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DemandEntityInfoDTO"
            }
          }
        },
        "description": "Basic information of an entity"
      },
      "DemandReservationApiInputDTO": {
        "required": [
          "action",
          "demandName",
          "parameters"
        ],
        "type": "object",
        "properties": {
          "demandName": {
            "maxLength": 2147483647,
            "minLength": 1,
            "type": "string",
            "description": "Name of the reservation"
          },
          "action": {
            "type": "string",
            "description": "Action requested for the reservation",
            "enum": [
              "RESERVATION"
            ]
          },
          "mode": {
            "type": "string",
            "description": "Demand related behavior for reservation of NO_GROUPING/AFFINITY. This value interacts with the grouping value which is specifying the type of grouping that the demand should consider the mode for. NO_GROUPING and NONE must be paired together and cannot be paired with other values. Combinations such as: (NO_GROUPING - NONE), (AFFINITY - CLUSTER) are valid. Examples of invalid combinations are (NO_GROUPING - CLUSTER), (AFFINITY - NONE).",
            "enum": [
              "NO_GROUPING",
              "AFFINITY"
            ]
          },
          "grouping": {
            "type": "string",
            "description": "Grouping related behavior for reservation of NONE and CLUSTER. This value interacts with the mode value.",
            "enum": [
              "NONE",
              "CLUSTER"
            ]
          },
          "reserveDateTime": {
            "type": "string",
            "description": "Date to specify when to reserve the Demand"
          },
          "expireDateTime": {
            "type": "string",
            "description": "Date to specify when the Demand request will expire, required if action = RESERVATION"
          },
          "deployDateTime": {
            "type": "string",
            "description": "Date to specify when to deploy the Demand"
          },
          "parameters": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "description": "Reservation Parameters",
            "items": {
              "$ref": "#/components/schemas/DemandReservationParametersDTO"
            }
          },
          "scope": {
            "type": "array",
            "description": "List of uuids of groups (currently limited to Clusters or Host Groups) whose members are the only possible providers of that type of entity. These are further constrained by the constraintIds passed in placement parameters. If multiple groups of providers are specified then it is possible that entities will be placed within different groups.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DemandReservationParametersDTO": {
        "required": [
          "placementParameters"
        ],
        "type": "object",
        "properties": {
          "placementParameters": {
            "$ref": "#/components/schemas/PlacementParametersDTO"
          },
          "deploymentParameters": {
            "$ref": "#/components/schemas/DeploymentParametersDTO"
          }
        }
      },
      "DeploymentInfoDTO": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client Id",
            "example": "turbonomic1"
          },
          "clientSvcAccount": {
            "type": "string",
            "description": "The client service account",
            "example": "turbonomic1-sa"
          },
          "oidcProviderUrl": {
            "type": "string",
            "description": "The OIDC provider URL",
            "example": "https://rh-oidc.s3.us-east-1.amazonaws.com/22ejnvnnturfmt6km08idd0nt4hekbn7"
          }
        },
        "description": "Contains deployment information about the running Turbonomic instance."
      },
      "DeploymentParametersDTO": {
        "type": "object",
        "properties": {
          "deploymentProfileID": {
            "type": "string",
            "description": "Deployment Profile uuid"
          },
          "highAvailability": {
            "type": "boolean",
            "description": "High availability"
          },
          "priority": {
            "type": "string",
            "description": "Workload priority",
            "enum": [
              "LOW",
              "NORMAL",
              "MISSION_CRITICAL"
            ]
          }
        }
      },
      "DeploymentProfileApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "account": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "deployParameters": {
            "type": "array",
            "description": "Target and Provider parameters of the Deployment Profile",
            "items": {
              "$ref": "#/components/schemas/DeploymentProfileTargetApiDTO"
            }
          }
        },
        "description": "Model to describe a Deployment Profile, including target and provider entity parameters"
      },
      "DeploymentProfileParamApiDTO": {
        "type": "object",
        "properties": {
          "parameterType": {
            "type": "string",
            "description": "Parameter type. For vCenter, this can be a folder, osConfiguration, or image. For all other technologies, this must be an image.",
            "enum": [
              "image",
              "folder",
              "osConfiguration"
            ]
          },
          "properties": {
            "type": "array",
            "description": "A NameValueInputDTO describing the name and value of the parameter.",
            "items": {
              "$ref": "#/components/schemas/NameValueInputDTO"
            }
          }
        },
        "description": "Provider-specific Deployment Profile parameters"
      },
      "DeploymentProfileProviderApiDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "parameters": {
            "type": "array",
            "description": "A DeploymentProfileParamApiDTO describing the parameters for the provider entities",
            "items": {
              "$ref": "#/components/schemas/DeploymentProfileParamApiDTO"
            }
          }
        },
        "description": "Deployment profile Provider properties"
      },
      "DeploymentProfileTargetApiDTO": {
        "type": "object",
        "properties": {
          "targetType": {
            "type": "string",
            "description": "Target type for the deployment profile",
            "enum": [
              "vCenter",
              "AWS",
              "Azure",
              "Softlayer"
            ]
          },
          "providers": {
            "type": "array",
            "description": "DeploymentProfileProviderApiInputDTO describing the provider entity parameters",
            "items": {
              "$ref": "#/components/schemas/DeploymentProfileProviderApiDTO"
            }
          }
        },
        "description": "Deployment Profile Target properties"
      },
      "DesktopPoolEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "cloneType": {
                "type": "string",
                "description": "Type of a clone provided by the DesktopPool",
                "enum": [
                  "FULL",
                  "LINKED",
                  "INSTANT"
                ]
              },
              "provisionType": {
                "type": "string",
                "description": "How clones are provisioned in the DesktopPool",
                "enum": [
                  "UPFRONT",
                  "ON_DEMAND"
                ]
              },
              "assignmentType": {
                "type": "string",
                "description": "Whether the same clone is assigned each time when user logs back in",
                "enum": [
                  "PERSISTENT",
                  "DYNAMIC"
                ]
              },
              "masterTemplateUuid": {
                "type": "string",
                "description": "UUID of a master template that is used to create clones. Only one of master VM and master template can be set."
              },
              "masterVirtualMachineUuid": {
                "type": "string",
                "description": "UUID of a master virtual machine that is used to create clones. Only one of master VM and master template can be set."
              },
              "masterVirtualMachineSnapshot": {
                "type": "string",
                "description": "Name of the snapshot of a master virtual machine that is used to create clones."
              },
              "getvCenterClusterName": {
                "type": "string",
                "description": "Name of the vCenter cluster that this DesktopPool draws resources from."
              },
              "vendorId": {
                "type": "string",
                "description": "Vendor Identifier for the DesktopPool."
              }
            },
            "description": "Additional attributes for a DesktopPool"
          }
        ]
      },
      "DetailDataApiDTO": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Detail key"
          },
          "value": {
            "type": "string",
            "description": "Detail value"
          },
          "critical": {
            "type": "boolean"
          }
        },
        "description": "A single entity detail, represented as key-value pair"
      },
      "DiscountCoverageFilterApiDTO": {
        "type": "object",
        "properties": {
          "currentDiscountCoverageFilter": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          },
          "newDiscountCoverageFilter": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          }
        },
        "description": "Model to describe the discount coverage filter information for the action filtering."
      },
      "DiscoveredEntityApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discoveredBy": {
            "$ref": "#/components/schemas/TargetApiDTO"
          },
          "vendorIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The mapping of target identifier to vendor-provided identity of this entity on the remote target"
          }
        },
        "description": "Model to describe a discovered entity in the system"
      },
      "EntityActionsApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "realtimeMarketReference": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "actions": {
            "type": "array",
            "description": "List of actions for this entity",
            "items": {
              "$ref": "#/components/schemas/ActionApiDTO"
            }
          }
        },
        "description": "Basic informations of an entity + actions"
      },
      "EntityAspect": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "sli": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Parent class for entity aspects",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "EntityCostApiDTO": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "The cost value",
            "format": "float"
          },
          "hairCutRatio": {
            "type": "number",
            "description": "The hair cut ratio, it represents the portion of cost will be taken into consideration",
            "format": "float"
          },
          "costType": {
            "type": "string",
            "description": "Type of the Cost"
          },
          "costUnit": {
            "type": "string",
            "description": "Unit of the Cost"
          }
        },
        "description": "Model to describe the Costs of an entity"
      },
      "EntityCountRequestApiDTO": {
        "type": "object",
        "properties": {
          "groupBy": {
            "type": "array",
            "description": "Criteria to group the results by.",
            "readOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "ENTITY_TYPE",
                "ENVIRONMENT_TYPE"
              ]
            }
          }
        },
        "description": "A query used to fetch entity counts."
      },
      "EntityDetailsApiDTO": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "type": "integer",
            "description": "The internal UUID of the entity",
            "format": "int64"
          },
          "details": {
            "type": "array",
            "description": "A list of details, represented as key-value",
            "items": {
              "$ref": "#/components/schemas/DetailDataApiDTO"
            }
          }
        },
        "description": "Model to describe an entity with all its details"
      },
      "EntityMetadataRequestApiDTO": {
        "required": [
          "entityType"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "description": "Entity type to fetch metadata for.",
            "readOnly": true,
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          }
        },
        "description": "A query used to fetch entity metadata."
      },
      "EntityPriceDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "description": "Price in the context of a related entity",
            "format": "float"
          }
        },
        "description": "Context-specific price. For example the base rate of a template in the context of certain business unit."
      },
      "EntityQueryApiDTO": {
        "required": [
          "select"
        ],
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/SelectEntityApiDTO"
          },
          "where": {
            "$ref": "#/components/schemas/WhereApiDTO"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationApiDTO"
          }
        },
        "description": "A query used to search topology entities."
      },
      "EntityStatsApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "realtimeMarketReference": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "stats": {
            "type": "array",
            "description": "Collected monitoring statistics",
            "items": {
              "$ref": "#/components/schemas/StatSnapshotApiDTO"
            }
          }
        },
        "description": "Basic informations of an entity + statistics"
      },
      "EntityUptimeApiDTO": {
        "type": "object",
        "properties": {
          "creationTimestamp": {
            "type": "integer",
            "description": "The creation timestamp of the entity",
            "format": "int64"
          },
          "uptimeDurationInMilliseconds": {
            "type": "integer",
            "description": "Uptime duration in milliseconds for the total analyzed duration",
            "format": "int64"
          },
          "totalDurationInMilliseconds": {
            "type": "integer",
            "description": "Total analyzed duration in milliseconds for which uptime is calculated",
            "format": "int64"
          },
          "uptimePercentage": {
            "type": "number",
            "description": "The uptime of the entity as a percentage",
            "format": "double"
          }
        },
        "description": "Model to describe the uptime of an entity"
      },
      "EnumFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The string representation of the value.",
                "readOnly": true
              }
            },
            "description": "An enum value of an entity or group field."
          }
        ]
      },
      "ExecutorInfoApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the executor. such as a user or a schedule.",
            "enum": [
              "USER",
              "SCHEDULE",
              "EXECUTED_EXTERNALLY"
            ]
          },
          "scheduleInfo": {
            "$ref": "#/components/schemas/ExecutorScheduleApiDTO"
          },
          "userInfo": {
            "$ref": "#/components/schemas/ExecutorUserApiDTO"
          }
        },
        "description": "Model to describe the entity that triggered action execution. such as a user or a schedule."
      },
      "ExecutorScheduleApiDTO": {
        "required": [
          "scheduleName"
        ],
        "type": "object",
        "properties": {
          "scheduleName": {
            "type": "string",
            "description": "Name of the schedule"
          }
        },
        "description": "Model to describe the Schedule that executed the action."
      },
      "ExecutorUserApiDTO": {
        "required": [
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Name of the user"
          }
        },
        "description": "Model to describe the user who triggered this action."
      },
      "FailedResourceApiDTO": {
        "required": [
          "commodity",
          "requestedAmount"
        ],
        "type": "object",
        "properties": {
          "commodity": {
            "$ref": "#/components/schemas/BaseCommodityApiDTO"
          },
          "requestedAmount": {
            "type": "number",
            "description": "The requested amount of the commodity that caused the entity to be unplaced",
            "format": "double"
          },
          "maxAvailable": {
            "type": "number",
            "description": "The maximum available amount of the requested commodity. Populated only if there are one or more entities selling the requested commodity.",
            "format": "double"
          }
        },
        "description": "A description of the resource that caused an entity to be unplaced"
      },
      "FamilyScopeApiDTO": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The name of the instance family"
          }
        },
        "description": "Model to describe the instance family of a cloud commitment"
      },
      "FieldApiDTO": {
        "type": "object",
        "properties": {
          "fieldType": {
            "type": "string",
            "description": "The kind of the field.",
            "enum": [
              "PRIMITIVE",
              "COMMODITY",
              "RELATED_ENTITY",
              "RELATED_GROUP",
              "RELATED_ACTION",
              "AGGREGATE_COMMODITY",
              "MEMBER"
            ]
          }
        },
        "description": "A field of an entity or group.",
        "discriminator": {
          "propertyName": "fieldType"
        }
      },
      "FieldValueApiDTO": {
        "required": [
          "field",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "valueType": {
            "type": "string",
            "description": "Type of compared values.",
            "readOnly": true,
            "enum": [
              "NUMBER",
              "TEXT",
              "ENUM",
              "INTEGER",
              "BOOLEAN",
              "MULTI_TEXT"
            ]
          },
          "field": {
            "$ref": "#/components/schemas/FieldApiDTO"
          }
        },
        "description": "A field of an entity or group with its value.",
        "discriminator": {
          "propertyName": "valueType"
        }
      },
      "FieldValueTypeApiDTO": {
        "required": [
          "field",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "valueType": {
            "type": "string",
            "description": "Type of values of this field.",
            "readOnly": true,
            "enum": [
              "NUMBER",
              "TEXT",
              "ENUM",
              "INTEGER",
              "BOOLEAN",
              "MULTI_TEXT"
            ]
          },
          "field": {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          "allowableValues": {
            "type": "array",
            "description": "Allowable string values for this field.",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          }
        },
        "description": "A field of an entity or group associated with the type of its values."
      },
      "FilterApiDTO": {
        "required": [
          "caseSensitive",
          "expType",
          "expVal",
          "filterType"
        ],
        "type": "object",
        "properties": {
          "expVal": {
            "type": "string",
            "description": "Regex to be searched for"
          },
          "expType": {
            "type": "string",
            "description": "Type of comparator used while building a filter, the allowable values are 'EQ', 'NEQ', 'RXEQ', 'RXNEQ' for strings, 'EQ', 'NEQ', 'GT', 'LT', 'GTE', 'LTE' for numbers",
            "enum": [
              "EQ",
              "NEQ",
              "GT",
              "LT",
              "GTE",
              "LTE",
              "RXEQ",
              "RXNEQ"
            ]
          },
          "filterType": {
            "type": "string",
            "description": "Internal name for criterion such as pmsByName, pmsByDC, storageByPMCluster"
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "Whether the regex is case sensitive"
          },
          "entityType": {
            "type": "string",
            "description": "The entity type which this filter should be applied on"
          },
          "singleLine": {
            "type": "boolean",
            "description": "Whether the regex dot matches all characters including line break characters. Defaults to false."
          }
        },
        "description": "Model used to filter Groups or Entities, every filter is built using a filterType + expType + expVal"
      },
      "FrontdoorIdpApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "isFrontdoorEnabled": {
            "type": "boolean"
          }
        },
        "description": "Model to describe a Frontdoor IDP. It contains IDP URL and is FD enabled or not"
      },
      "GroupApiDTO": {
        "required": [
          "groupClassName",
          "isStatic"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "membersCount": {
            "type": "integer",
            "description": "Number of members of the Group",
            "format": "int32"
          },
          "entitiesCount": {
            "type": "integer",
            "description": "Number of entities of the Group",
            "format": "int32"
          },
          "costPrice": {
            "type": "number",
            "description": "Cost of the Group per Hour: sum of the costs of the member entities",
            "format": "float"
          },
          "groupType": {
            "type": "string",
            "description": "The type of service entities comprising the group"
          },
          "severity": {
            "type": "string",
            "description": "Calculated using the highest severity of the member entities",
            "enum": [
              "UNKNOWN",
              "NORMAL",
              "MINOR",
              "MAJOR",
              "CRITICAL"
            ]
          },
          "state": {
            "type": "string",
            "description": "Calculated using the state of the member entities",
            "enum": [
              "UNKNOWN",
              "ACTIVE"
            ]
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "HYBRID",
              "CLOUD",
              "ONPREM",
              "UNKNOWN"
            ]
          },
          "scope": {
            "type": "array",
            "description": "Scope within which the criteria have to be applied to the list of specific entity type",
            "items": {
              "type": "string"
            }
          },
          "isStatic": {
            "type": "boolean",
            "description": "True if group is static"
          },
          "logicalOperator": {
            "type": "string",
            "description": "Logical operator to be applied across all the criteria used to create dynamic group.It can take values 'AND', 'OR', 'XOR'"
          },
          "criteriaList": {
            "type": "array",
            "description": "Criteria list of elements, expression type, expression value, seType - needed to create a dynamic group",
            "items": {
              "$ref": "#/components/schemas/FilterApiDTO"
            }
          },
          "memberUuidList": {
            "type": "array",
            "description": "Uuid list for members of the group - if group is static",
            "items": {
              "type": "string"
            }
          },
          "realtimeMarketReference": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "stats": {
            "type": "array",
            "description": "Collected monitoring statistics",
            "items": {
              "$ref": "#/components/schemas/StatSnapshotApiDTO"
            }
          },
          "temporary": {
            "type": "boolean",
            "description": "The Group is only valid for a limited period of time, it will be removed automatically"
          },
          "activeEntitiesCount": {
            "type": "integer",
            "description": "The active entities count of a group",
            "format": "int32"
          },
          "cloudType": {
            "type": "string",
            "description": "Type of the Cloud if environmentType = CLOUD.[DEPRECATED - Use: targetType",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "HYBRID",
              "UNKNOWN"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/TargetApiDTO"
          },
          "memberTypes": {
            "type": "array",
            "description": "The types for immediate members of the group.",
            "items": {
              "type": "string"
            }
          },
          "entityTypes": {
            "type": "array",
            "description": "The types of entities contained in the group. This includes types of entities in nested levels of the group if the group is nested.",
            "items": {
              "type": "string"
            }
          },
          "aspects": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntityAspect"
            },
            "description": "Additional info about the Group categorized as Aspects"
          },
          "vendorIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The mapping of target identifier to vendor-provided identity of this group, if the group is discovered"
          },
          "groupOrigin": {
            "type": "string",
            "description": "Origin of entities and groups",
            "enum": [
              "DISCOVERED",
              "USER",
              "SYSTEM"
            ]
          },
          "targetType": {
            "type": "string",
            "description": "Target type of group entities.  TargetType UNKNOWN if multiple target types"
          },
          "groupClassName": {
            "type": "string"
          }
        },
        "description": "Model to describe a Group: a collection of Entities. Subclasses include BillingFamilyApiDTO and ResourceGroupApiDTO.",
        "discriminator": {
          "propertyName": "groupClassName"
        }
      },
      "GroupCountRequestApiDTO": {
        "type": "object",
        "properties": {
          "groupBy": {
            "uniqueItems": true,
            "type": "array",
            "description": "Criteria to group the results by.",
            "readOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "GROUP_TYPE",
                "ORIGIN"
              ]
            }
          }
        },
        "description": "A query used to fetch group counts."
      },
      "GroupMetadataRequestApiDTO": {
        "required": [
          "groupType"
        ],
        "type": "object",
        "properties": {
          "groupType": {
            "type": "string",
            "description": "Group type to fetch metadata for.",
            "readOnly": true,
            "enum": [
              "Group",
              "Resource",
              "Cluster",
              "VMCluster",
              "StorageCluster",
              "BusinessAccountFolder",
              "BillingFamily",
              "NodePool"
            ]
          }
        },
        "description": "A query used to fetch group metadata."
      },
      "GroupQueryApiDTO": {
        "required": [
          "select"
        ],
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/SelectGroupApiDTO"
          },
          "where": {
            "$ref": "#/components/schemas/WhereApiDTO"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationApiDTO"
          }
        },
        "description": "A query used to search groups."
      },
      "HealthCategoryResponseDTO": {
        "required": [
          "categoryDisplayName",
          "categoryHealthState",
          "healthCategory"
        ],
        "type": "object",
        "properties": {
          "healthCategory": {
            "type": "string",
            "description": "The reported health category.",
            "enum": [
              "TARGET",
              "ACTION",
              "COMPONENT"
            ]
          },
          "categoryDisplayName": {
            "type": "string",
            "description": "The reported health category name."
          },
          "categoryHealthState": {
            "type": "string",
            "description": "The health state for the reported category.",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          },
          "responseItems": {
            "type": "array",
            "description": "A list of individual health response items for this health category.",
            "items": {
              "$ref": "#/components/schemas/AggregatedHealthResponseDTO"
            }
          }
        },
        "description": "A DTO to collect the aggregated health data for one health category."
      },
      "HttpProxyDTO": {
        "required": [
          "isProxyEnabled"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "isProxyEnabled": {
            "type": "boolean",
            "description": "Whether proxy is enabled or not"
          },
          "proxyHost": {
            "type": "string",
            "description": "Proxy host"
          },
          "proxyPortNumber": {
            "type": "integer",
            "description": "Proxy port number",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "description": "Proxy username"
          },
          "password": {
            "type": "string",
            "description": "Proxy password"
          },
          "isProxySecure": {
            "type": "boolean",
            "description": "Whether proxy is secure: SSL is used to connect to the proxy host. Defaults for 'false'."
          }
        },
        "description": "Model to describe http proxy settings, like username, password, port number and host"
      },
      "IEntityDefinitionData": {
        "required": [
          "definitionType"
        ],
        "type": "object",
        "properties": {
          "definitionType": {
            "type": "string",
            "enum": [
              "MANUAL",
              "AUTOMATED"
            ]
          }
        },
        "description": "Parent class for topology data definition",
        "discriminator": {
          "propertyName": "definitionType"
        }
      },
      "IManualConnectionsData": {
        "required": [
          "connectionType"
        ],
        "type": "object",
        "properties": {
          "connectionType": {
            "type": "string",
            "enum": [
              "DYNAMIC",
              "STATIC",
              "GROUP",
              "GROUPS"
            ]
          }
        },
        "description": "Parent class for manual connections.",
        "discriminator": {
          "propertyName": "connectionType"
        }
      },
      "IncludedCouponsApiDTO": {
        "type": "object",
        "properties": {
          "includedCouponOidsList": {
            "type": "array",
            "description": "User selected list of RIs to be included in plans",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "iswhiteList": {
            "type": "boolean"
          }
        },
        "description": "Included RI/Coupon and related information in the scenario"
      },
      "InclusionConditionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "description": "A set of strings. The value must belong to one of those.",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "An inclusion condition for an enum field."
          }
        ]
      },
      "InputFieldApiDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the field, used for field identification."
          },
          "value": {
            "type": "string",
            "description": "Field value. Used if field holds primitive value (String, number or boolean"
          },
          "defaultValue": {
            "type": "string",
            "description": "Default value of the field"
          },
          "isMandatory": {
            "type": "boolean",
            "description": "Whether the field is mandatory. Valid targets must have all the mandatory fields set."
          },
          "isSecret": {
            "type": "boolean",
            "description": "Whether the field is secret. This means, that field value is stored in an encrypted value and not shown in any logs."
          },
          "isMultiline": {
            "type": "boolean",
            "description": "Whether the field can have multiline values. Can be only true when the valueType field is set to STRING."
          },
          "isTargetDisplayName": {
            "type": "boolean",
            "description": "Whether the field is used as a target display name."
          },
          "valueType": {
            "type": "string",
            "description": "Type of the value this field holds",
            "enum": [
              "STRING",
              "BOOLEAN",
              "NUMERIC",
              "INTEGER",
              "LIST",
              "OBJECT",
              "GROUP_SCOPE"
            ]
          },
          "specificValueType": {
            "type": "string",
            "description": "A specific Type of the value that can't be described in valueType"
          },
          "description": {
            "type": "string",
            "description": "Additional information about what the input to the field should be"
          },
          "verificationRegex": {
            "type": "string",
            "description": "The regex pattern that needs to be satisfied for the input field text"
          },
          "groupProperties": {
            "type": "array",
            "description": "Group scope structure, filled if this field represents group scope value",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "allowedValues": {
            "type": "array",
            "description": "Potential values for this field. If nonempty, value must be one of the choices in the list.",
            "items": {
              "type": "string"
            }
          },
          "dependencyKey": {
            "type": "string",
            "description": "A key of a dependency account value field. If this value is not set, field is declared without any dependencies. If an annotated account value field has a dependency it means that it's presence is logically driven by the dependency field. \n This field is expected to be available ONLY when field specified by {@code dependencyKey} has value {@code dependencyValue}. If this field is not available because of unmet dependency, this field will not be validated and stored in target configuration data. If a dependency for this field is unmet value of this field will be null"
          },
          "dependencyValue": {
            "type": "string",
            "description": "Value of a field of account values referenced by {@code dependencyKey} to enable (activate) the annotated field. Value is specified using a regular expression. Specifying just a string will also work correctly. \nIf a referenced account value field is a boolean field, only \"true\" or \"false\" are supported as values.\n If a referenced account value is an enumeration ({@code allowedValues} is specified) this value is only restricted to contain a subset of the allowed values united using a pipe {@code one|two|four}.",
            "example": "one|two|four"
          }
        },
        "description": "Basic information of an entity"
      },
      "InstanceTypeFilterApiDTO": {
        "type": "object",
        "properties": {
          "currentInstanceTypeFilter": {
            "$ref": "#/components/schemas/InstanceTypeIdsApiDTO"
          },
          "newInstanceTypeFilter": {
            "$ref": "#/components/schemas/InstanceTypeIdsApiDTO"
          }
        },
        "description": "Model to describe instanceType filter information for the action filtering."
      },
      "InstanceTypeIdsApiDTO": {
        "type": "object",
        "properties": {
          "instanceTypeIds": {
            "type": "array",
            "description": "InstanceType Uuid list for the action filter.",
            "items": {
              "type": "string"
            }
          },
          "operator": {
            "type": "string",
            "description": "Operator for instanceType Uuid filter.the allowable values are 'EQ' and 'NEQ'",
            "enum": [
              "EQ",
              "NEQ"
            ]
          }
        },
        "description": "Model to describe instanceType Uuid list and operator for the action filtering."
      },
      "IntegerConditionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "Value to compare against.",
                "format": "int64",
                "readOnly": true
              }
            },
            "description": "A condition for a integer value."
          }
        ]
      },
      "IntegerFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "integer",
                "description": "The value.",
                "format": "int64",
                "readOnly": true
              },
              "units": {
                "type": "string",
                "description": "Units of measurement.",
                "readOnly": true
              }
            },
            "description": "An integer value of a field."
          }
        ]
      },
      "LicenseApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "licenseOwner": {
            "type": "string",
            "description": "The owner of current license"
          },
          "email": {
            "type": "string",
            "description": "The email of current license"
          },
          "customerId": {
            "type": "string",
            "description": "The customer id"
          },
          "expirationDate": {
            "type": "string",
            "description": "The expiration date of current license"
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of features contained in current license",
            "items": {
              "type": "string"
            }
          },
          "numLicensedEntities": {
            "type": "integer",
            "description": "The number of licensed sockets",
            "format": "int32"
          },
          "numInUseEntities": {
            "type": "integer",
            "description": "The number of sockets in use",
            "format": "int32"
          },
          "edition": {
            "type": "string",
            "description": "The edition of the current license"
          },
          "filename": {
            "type": "string",
            "description": "The name of the uploaded file"
          },
          "countedEntity": {
            "type": "string",
            "description": "Indicates which entity type is counted with respect to licensing",
            "enum": [
              "VM",
              "SOCKET"
            ]
          },
          "licenseSchemaVersion": {
            "type": "string",
            "description": "License format version"
          },
          "engagementType": {
            "type": "string",
            "description": "Engagement type"
          },
          "companyName": {
            "type": "string",
            "description": "Company name"
          },
          "parentCompanyName": {
            "type": "string",
            "description": "Parent company name"
          },
          "territory": {
            "type": "string",
            "description": "Sales territory"
          },
          "iscId": {
            "type": "string",
            "description": "ISC ID"
          },
          "iscPovId": {
            "type": "string",
            "description": "ISC POV ID"
          },
          "maxReportEditorsCount": {
            "type": "integer",
            "description": "Maximum number of report editors",
            "format": "int32"
          },
          "expirationDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "errorReasons": {
            "uniqueItems": true,
            "type": "array",
            "description": "Indicate why the license is invalid",
            "items": {
              "type": "string",
              "enum": [
                "DUPLICATE_LICENSE",
                "EXPIRED",
                "INVALID_EMAIL",
                "INVALID_CONTENT_TYPE",
                "INVALID_LICENSE_KEY",
                "INVALID_LICENSE_TYPE_CWOM_ONLY",
                "INVALID_LICENSE_TYPE_FREEMIUM_NOT_ALLOWED",
                "INVALID_FEATURE_SET",
                "INCOMPATIBLE"
              ]
            }
          },
          "isValid": {
            "type": "boolean",
            "description": "Indicate if current license is valid or not",
            "readOnly": true
          },
          "isExpired": {
            "type": "boolean",
            "description": "Indicate if current license is expired",
            "readOnly": true
          }
        },
        "description": "Model to describe properties of a license"
      },
      "Link": {
        "type": "object",
        "properties": {
          "rel": {
            "$ref": "#/components/schemas/LinkRelation"
          },
          "href": {
            "type": "string",
            "readOnly": true
          },
          "hreflang": {
            "type": "string",
            "readOnly": true
          },
          "media": {
            "type": "string",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "readOnly": true
          },
          "deprecation": {
            "type": "string",
            "readOnly": true
          },
          "profile": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "LinkRelation": {
        "type": "object"
      },
      "LoadChangesApiDTO": {
        "type": "object",
        "properties": {
          "baselineDate": {
            "type": "string",
            "description": "Baseline date"
          },
          "peakBaselineList": {
            "type": "array",
            "description": "List of peak baseline changes",
            "items": {
              "$ref": "#/components/schemas/PeakBaselineApiDTO"
            }
          },
          "utilizationList": {
            "type": "array",
            "description": "List of utilization changes",
            "items": {
              "$ref": "#/components/schemas/UtilizationApiDTO"
            }
          },
          "maxUtilizationList": {
            "type": "array",
            "description": "List of max utilization changes",
            "items": {
              "$ref": "#/components/schemas/MaxUtilizationApiDTO"
            }
          },
          "overlayStatsList": {
            "type": "array",
            "description": "List of stat changes to override the plan commodities values with the provided input",
            "items": {
              "$ref": "#/components/schemas/EntityStatsApiDTO"
            }
          }
        },
        "description": "Workload utilization changes in the scenario"
      },
      "LogEntryApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "logActionTime": {
            "type": "integer",
            "format": "int64"
          },
          "targetSE": {
            "type": "string"
          },
          "targetUuid": {
            "type": "string"
          },
          "currentSE": {
            "type": "string"
          },
          "currentSEUuid": {
            "type": "string"
          },
          "newSE": {
            "type": "string"
          },
          "newSEUuid": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "subCategory": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "user": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "importance": {
            "type": "number",
            "format": "float"
          },
          "reasonCommodities": {
            "uniqueItems": true,
            "type": "array",
            "description": "The distinct set of commodities that were the reason for the action. Not all actions are driven by commodities. So its possible that this can be an empty list.",
            "items": {
              "type": "string"
            }
          },
          "reasonCommodityRelationType": {
            "type": "string",
            "description": "Relation type (bought/sold) of the reason commodity",
            "enum": [
              "sold",
              "bought"
            ]
          },
          "logDBId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Basic information of an entity"
      },
      "LoggingApiDTO": {
        "type": "object",
        "properties": {
          "componentLoggingLevel": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "FATAL",
                "ERROR",
                "WARN",
                "INFO",
                "DEBUG",
                "TRACE",
                "UNKNOWN"
              ]
            },
            "description": "A map from component name to logging level, component could be Discovery, Monitoring,Presentation, Abstraction, Analysis, Extension; logging levels could be INFO, WARN, DEBUG,TRACE"
          }
        },
        "description": "Model to describe the component logging level"
      },
      "ManualDynamicConnections": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IManualConnectionsData"
          },
          {
            "type": "object",
            "properties": {
              "dynamicConnectionCriteria": {
                "type": "array",
                "description": "Connection criteria to define dynamically connected entities.",
                "items": {
                  "$ref": "#/components/schemas/FilterApiDTO"
                }
              }
            },
            "description": "Model to describe a dynamic connections of manually defined topology definition."
          }
        ]
      },
      "ManualEntityDefinitionData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IEntityDefinitionData"
          },
          {
            "required": [
              "manualConnectionData"
            ],
            "type": "object",
            "properties": {
              "manualConnectionData": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/IManualConnectionsData"
                },
                "description": "Entity connections set manually"
              }
            },
            "description": "Model to describe a manual part of user-defined topology definition."
          }
        ]
      },
      "ManualGroupConnections": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IManualConnectionsData"
          },
          {
            "required": [
              "connectedGroup"
            ],
            "type": "object",
            "properties": {
              "connectedGroup": {
                "$ref": "#/components/schemas/BaseGroupApiDTO"
              }
            },
            "description": "Model to describe a group connections of manually defined topology definition."
          }
        ]
      },
      "ManualGroupsConnections": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IManualConnectionsData"
          },
          {
            "required": [
              "connectedGroups"
            ],
            "type": "object",
            "properties": {
              "connectedGroups": {
                "type": "array",
                "description": "Groups for a connection.",
                "items": {
                  "$ref": "#/components/schemas/BaseGroupApiDTO"
                }
              }
            },
            "description": "Model to describe multiple groups connections of manually defined topology definition."
          }
        ]
      },
      "ManualStaticConnections": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IManualConnectionsData"
          },
          {
            "type": "object",
            "properties": {
              "staticConnections": {
                "type": "array",
                "description": "Oids to be statically connected to the created entity",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Model to describe a static connections of manually defined topology definition."
          }
        ]
      },
      "MarketApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "description": "State",
            "enum": [
              "CREATED",
              "READY_TO_START",
              "RUNNING",
              "COPYING",
              "SUCCEEDED",
              "STOPPING",
              "STOPPED",
              "DELETING"
            ]
          },
          "stateProgress": {
            "type": "integer",
            "description": "State progress indicated by a percentage, used in RUNNING state",
            "format": "int32"
          },
          "scenario": {
            "$ref": "#/components/schemas/ScenarioApiDTO"
          },
          "saved": {
            "type": "boolean",
            "description": "Shows if a Plan Market is saved"
          },
          "unplacedEntities": {
            "type": "boolean",
            "description": "Unplaced entities, shows if there are entities that could not be placed in the Plan Market"
          },
          "runDate": {
            "type": "string",
            "description": "Shows when a Plan Market started running"
          },
          "runCompleteDate": {
            "type": "string",
            "description": "Shows when a Plan Market was completed"
          },
          "violations": {
            "type": "array",
            "description": "Violations generated in a Plan Market",
            "items": {
              "$ref": "#/components/schemas/ServiceEntityApiDTO"
            }
          },
          "relatedPlanMarkets": {
            "type": "array",
            "description": "Related Plan Markets generated by particular Scenarios",
            "items": {
              "$ref": "#/components/schemas/MarketApiDTO"
            }
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "HYBRID",
              "CLOUD",
              "ONPREM"
            ]
          },
          "planDestination": {
            "$ref": "#/components/schemas/BaseApiDTO"
          }
        },
        "description": "Model to describe a Market"
      },
      "MasterImageEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "DisplayName of the masterImage used to create new VMs"
              },
              "numVcpus": {
                "type": "integer",
                "description": "The number of vCPUs allocated to each VM generated from the master image",
                "format": "int32"
              },
              "mem": {
                "type": "number",
                "description": "The amount of Mem allocated to each VM generated from the master image",
                "format": "float"
              },
              "storage": {
                "type": "number",
                "description": "The amount of Storage allocated to each VM generated from the master image",
                "format": "float"
              }
            },
            "description": "Attributes for a MasterImage"
          }
        ]
      },
      "MaxUtilizationApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "maxPercentage": {
            "type": "integer",
            "description": "Max utilization threshold percentage change",
            "format": "int32"
          },
          "selectedEntityType": {
            "type": "string",
            "description": "Type of entity to select in global scope configuration"
          },
          "globalScope": {
            "type": "boolean"
          }
        },
        "description": "Model to describe a max utilization change in the scenario"
      },
      "MemberFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "property"
            ],
            "type": "object",
            "properties": {
              "entityType": {
                "type": "string",
                "description": "Restricts the property to entities of this type.",
                "readOnly": true,
                "enum": [
                  "Application",
                  "ApplicationComponent",
                  "ApplicationServer",
                  "AvailabilityZone",
                  "BusinessAccount",
                  "BusinessApplication",
                  "BusinessTransaction",
                  "BusinessUser",
                  "Chassis",
                  "CloudService",
                  "ComputeTier",
                  "Container",
                  "ContainerPod",
                  "ContainerSpec",
                  "Database",
                  "DatabaseServer",
                  "DatabaseServerTier",
                  "DatabaseTier",
                  "DataCenter",
                  "DesktopPool",
                  "DiskArray",
                  "DPod",
                  "HCIPhysicalMachine",
                  "HypervisorServer",
                  "Internet",
                  "IOModule",
                  "LoadBalancer",
                  "LogicalPool",
                  "Namespace",
                  "Network",
                  "PhysicalMachine",
                  "ProcessorPool",
                  "Region",
                  "ReservedInstance",
                  "Service",
                  "ServiceProvider",
                  "Storage",
                  "StorageController",
                  "StorageTier",
                  "Switch",
                  "Unknown",
                  "ViewPod",
                  "VirtualApplication",
                  "VirtualDataCenter",
                  "VirtualMachine",
                  "VirtualVolume",
                  "VPod",
                  "WorkloadController",
                  "ContainerPlatformCluster",
                  "CloudCommitment",
                  "ApplicationComponentSpec",
                  "VirtualMachineSpec",
                  "DocumentCollection",
                  "NodeGroup",
                  "PowerVMPhysicalMachine",
                  "DataWarehouse",
                  "DataWarehouseTier"
                ]
              },
              "property": {
                "type": "string",
                "description": "The property of interest.",
                "readOnly": true,
                "enum": [
                  "COUNT"
                ]
              },
              "direct": {
                "type": "boolean",
                "description": "Whether this field refers to direct or indirect members (default = direct).",
                "readOnly": true
              }
            },
            "description": "A property of direct or indirect members of the group.  Only groups can have this field type"
          }
        ]
      },
      "MigrateObjectApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "source": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "destination": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "sources": {
            "type": "array",
            "description": "Sources of the migration, entities or groups.",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "destinations": {
            "type": "array",
            "description": "Destinations of the migration, entities or groups.",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "destinationEntityType": {
            "type": "string",
            "description": "Entity type of migration destination, default is VirtualMachine. Case 1, migration source VirtualMachine: destination entity must be VirtualMachine. Case 2, migration source Database Server: destination entity can be VirtualMachine or DatabaseServer.",
            "enum": [
              "VirtualMachine",
              "DatabaseServer"
            ]
          },
          "removeNonMigratingWorkloads": {
            "type": "boolean",
            "description": "If true, remove the existing Virtual Machines, Databases and Database Servers from the scope that are not migrating, so that only the newly migrated entities are included in the plan results."
          }
        },
        "description": "Model to describe a replace change in the scenario"
      },
      "MultiTextFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "array",
                "description": "The values associated with the field.",
                "readOnly": true,
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "A set of textual values for an entity field."
          }
        ]
      },
      "NameValueInputDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Parameter type. For vCenter, this can be a name or id. For all other target types, this must be an id.",
            "enum": [
              "name",
              "id"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Deployment Profile provider parameters"
      },
      "NetworkEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "networkName": {
                "type": "string",
                "description": "Network's name."
              },
              "clusterName": {
                "type": "string",
                "description": "Network's cluster name. [DEPRECATED - EOL: 8.15.1 - Use: clusterNames]"
              },
              "dataCenterName": {
                "type": "string",
                "description": "Network's data center name."
              },
              "clusterNames": {
                "type": "array",
                "description": "Clusters that the network is part of.",
                "items": {
                  "type": "string"
                }
              },
              "vlanId": {
                "type": "integer",
                "format": "int32"
              },
              "vswitchType": {
                "type": "string"
              }
            },
            "description": "Model to describe Network attributes"
          }
        ]
      },
      "NoDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "description": "Parent class for action details. Implementing classes include: CloudResizeActionDetailsApiDTO, NoDetailsApiDTO, RIBuyActionDetailsApiDTO, CloudProvisionActionDetailsApiDTO, CloudSuspendActionDetailsApiDTO, OnPremResizeActionDetailsApiDTO and ReconfigureActionDetailsApiDTO."
          }
        ]
      },
      "NoSqlEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "accountThroughputLimit": {
                "type": "integer",
                "description": "The throughput capacity limit that is set at account-level.",
                "format": "int32"
              },
              "noSqlApiType": {
                "type": "string",
                "description": "The NoSql engine or api the current entity is using.",
                "enum": [
                  "NOSQL",
                  "MONGODB",
                  "CASSANDRA",
                  "GREMLIN",
                  "TABLE"
                ]
              },
              "throughputType": {
                "type": "string",
                "description": "Indicates the way of how throughput is allocate to current entity.",
                "enum": [
                  "DEDICATED",
                  "SHARED",
                  "NONE"
                ]
              },
              "autoscaling": {
                "type": "string",
                "description": "Indicates whether the entity has autoscale setting enabled.",
                "enum": [
                  "Enabled",
                  "Disabled",
                  "Unknown"
                ]
              },
              "maxThroughput": {
                "type": "integer",
                "description": "The maximum throughput amount provisioned for current entity.",
                "format": "int32"
              },
              "minThroughput": {
                "type": "integer",
                "description": "The minimum throughput amount provisioned for current entity.",
                "format": "int32"
              },
              "effectiveThroughput": {
                "type": "number",
                "description": "The throughput amount provisioned for current entity, or the amount from host entity or sum of children entities.",
                "format": "double"
              },
              "databaseName": {
                "type": "string",
                "description": "The associated database name."
              }
            },
            "description": "Data related to a NoSQL db-related entity. This can be for a NoSQL database server entity, for a NoSQL database entity, or for a NoSQL document collection entity."
          }
        ]
      },
      "NumberConditionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "Value to compare against.",
                "format": "double",
                "readOnly": true
              }
            },
            "description": "A condition for a numeric value."
          }
        ]
      },
      "NumberFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "description": "The value.",
                "format": "double",
                "readOnly": true
              },
              "units": {
                "type": "string",
                "description": "Units of measurement.",
                "readOnly": true
              }
            },
            "description": "A numeric value of a field."
          }
        ]
      },
      "OAuth2ClientApiDTO": {
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string",
            "description": "The name of the client"
          },
          "clientId": {
            "type": "string",
            "description": "The ID of the client"
          },
          "grantTypes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The OAuth2 grants that the client can perform in order to acquire a token",
            "items": {
              "type": "string",
              "enum": [
                "client_credentials"
              ]
            }
          },
          "clientAuthenticationMethods": {
            "uniqueItems": true,
            "type": "array",
            "description": "The authentication methods that the client supports when acquiring a token.\n* client_secret_basic: Provide the credentials using the HTTP Basic Authentication Scheme\n* client_secret_post: Provide the credentials in the HTTP request body as a form parameter\n",
            "items": {
              "type": "string",
              "enum": [
                "client_secret_basic",
                "client_secret_post"
              ]
            }
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The scopes that the client can request when acquiring a token",
            "items": {
              "type": "string"
            }
          },
          "audience": {
            "uniqueItems": true,
            "type": "array",
            "description": "The audience that the client can request when acquiring a token",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "integer",
            "description": "Creation timestamp",
            "format": "int64"
          },
          "tokenSettings": {
            "$ref": "#/components/schemas/OAuth2ClientOutputTokenSettings"
          }
        }
      },
      "OAuth2ClientInputAccessToken": {
        "type": "object",
        "properties": {
          "ttlSeconds": {
            "maximum": 2592000,
            "minimum": 1,
            "type": "integer",
            "description": "The lifespan of access tokens acquired by the client in seconds",
            "format": "int64",
            "example": 600
          }
        }
      },
      "OAuth2ClientInputTokenSettings": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/OAuth2ClientInputAccessToken"
          }
        }
      },
      "OAuth2ClientOutputAccessToken": {
        "type": "object",
        "properties": {
          "ttlSeconds": {
            "type": "integer",
            "description": "The lifespan of access tokens acquired by the client in seconds",
            "format": "int64"
          }
        }
      },
      "OAuth2ClientOutputTokenSettings": {
        "type": "object",
        "properties": {
          "accessToken": {
            "$ref": "#/components/schemas/OAuth2ClientOutputAccessToken"
          }
        }
      },
      "OAuth2CreateClientApiDTO": {
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string",
            "description": "The name of the client"
          },
          "clientId": {
            "type": "string",
            "description": "The ID of the client"
          },
          "grantTypes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The OAuth2 grants that the client can perform in order to acquire a token",
            "items": {
              "type": "string",
              "enum": [
                "client_credentials"
              ]
            }
          },
          "clientAuthenticationMethods": {
            "uniqueItems": true,
            "type": "array",
            "description": "The authentication methods that the client supports when acquiring a token.\n* client_secret_basic: Provide the credentials using the HTTP Basic Authentication Scheme\n* client_secret_post: Provide the credentials in the HTTP request body as a form parameter\n",
            "items": {
              "type": "string",
              "enum": [
                "client_secret_basic",
                "client_secret_post"
              ]
            }
          },
          "scopes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The scopes that the client can request when acquiring a token",
            "items": {
              "type": "string"
            }
          },
          "audience": {
            "uniqueItems": true,
            "type": "array",
            "description": "The audience that the client can request when acquiring a token",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "integer",
            "description": "Creation timestamp",
            "format": "int64"
          },
          "tokenSettings": {
            "$ref": "#/components/schemas/OAuth2ClientOutputTokenSettings"
          },
          "clientSecret": {
            "type": "string",
            "description": "The client secret"
          }
        }
      },
      "OAuth2CreateClientApiInputDTO": {
        "required": [
          "clientName",
          "grantTypes",
          "scopes"
        ],
        "type": "object",
        "properties": {
          "clientName": {
            "type": "string",
            "description": "The name of the client"
          },
          "grantTypes": {
            "uniqueItems": true,
            "type": "array",
            "description": "The OAuth2 grants that the client can perform in order to acquire a token",
            "items": {
              "type": "string",
              "enum": [
                "client_credentials"
              ]
            }
          },
          "clientAuthenticationMethods": {
            "uniqueItems": true,
            "type": "array",
            "description": "The authentication methods that the client supports when acquiring a token.\n* client_secret_basic: Provide the credentials using the HTTP Basic Authentication Scheme\n* client_secret_post: Provide the credentials in the HTTP request body as a form parameter\n",
            "items": {
              "type": "string",
              "enum": [
                "client_secret_basic",
                "client_secret_post"
              ]
            }
          },
          "scopes": {
            "maxItems": 1,
            "minItems": 1,
            "uniqueItems": true,
            "type": "array",
            "description": "The scopes that the client can request when acquiring a token",
            "items": {
              "type": "string"
            }
          },
          "tokenSettings": {
            "$ref": "#/components/schemas/OAuth2ClientInputTokenSettings"
          }
        }
      },
      "OAuthDataApiDTO": {
        "required": [
          "authorizationServerUrl",
          "clientId",
          "clientSecret",
          "grantType"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client id used for oAuth authorization."
          },
          "clientSecret": {
            "type": "string",
            "description": "The client secret used for oAuth authorization."
          },
          "authorizationServerUrl": {
            "type": "string",
            "description": "The URL of the authorization server."
          },
          "grantType": {
            "type": "string",
            "description": "The oAuth grant type.",
            "enum": [
              "CLIENT_CREDENTIALS"
            ]
          },
          "scope": {
            "type": "string",
            "description": "The oAuth scope."
          }
        },
        "description": "Model to define the oAuth data."
      },
      "OnDemandCostFilterApiDTO": {
        "type": "object",
        "properties": {
          "currentOnDemandCostRange": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          },
          "newOnDemandCostRange": {
            "$ref": "#/components/schemas/RangeInputApiDTO"
          }
        },
        "description": "Model to describe on-demand cost range for action filtering."
      },
      "OnPremResizeActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "vcpuBefore": {
                "type": "integer",
                "description": "vCPUs before the change",
                "format": "int32"
              },
              "vcpuAfter": {
                "type": "integer",
                "description": "vCPUs after the change",
                "format": "int32"
              },
              "socketsBefore": {
                "type": "integer",
                "description": "sockets before the change",
                "format": "int32"
              },
              "socketsAfter": {
                "type": "integer",
                "description": "sockets after the change",
                "format": "int32"
              },
              "coresPerSocketBefore": {
                "type": "integer",
                "description": "cores per socket before the change",
                "format": "int32"
              },
              "coresPerSocketAfter": {
                "type": "integer",
                "description": "cores per socket after the change",
                "format": "int32"
              },
              "nonDisruptiveMaxPU": {
                "type": "number",
                "description": "Non-disruptive Processing Units max resize constraint",
                "format": "double"
              },
              "nonDisruptiveMinPU": {
                "type": "number",
                "description": "Non-disruptive Processing Units min resize constraint",
                "format": "double"
              },
              "subType": {
                "type": "string"
              }
            },
            "description": "Model to describe resize vCPU and PU/VP changes for on-premises virtual machines"
          }
        ]
      },
      "OrderByApiDTO": {
        "required": [
          "field"
        ],
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          "ascending": {
            "type": "boolean",
            "description": "Whether the order is ascending (defaults to false).",
            "readOnly": true
          }
        },
        "description": "A field to order results by."
      },
      "PMDiskAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "diskCapacity": {
                "type": "integer",
                "description": "Disk Capacity",
                "format": "int64"
              },
              "diskRole": {
                "type": "string",
                "description": "Disk Role",
                "enum": [
                  "CAPACITY",
                  "CACHE"
                ]
              }
            },
            "description": "Model to describe the Disk's attributes"
          }
        ]
      },
      "PMDiskGroupAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "disks": {
                "type": "array",
                "description": "Disks",
                "items": {
                  "$ref": "#/components/schemas/PMDiskAspectApiDTO"
                }
              }
            },
            "description": "Model to describe Physical Machine's DiskGroup attributes"
          }
        ]
      },
      "PMEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "diskGroups": {
                "type": "array",
                "description": "Disk Groups",
                "items": {
                  "$ref": "#/components/schemas/PMDiskGroupAspectApiDTO"
                }
              },
              "dedicatedFailoverHost": {
                "type": "boolean",
                "description": "If true, this host is a failover host."
              },
              "cpuModel": {
                "type": "string",
                "description": "The CPU model of the host",
                "example": "Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz"
              },
              "connectedNetworks": {
                "type": "array",
                "description": "Connected Networks",
                "example": "Broadcom BCM5708C NetXtreme II GigE",
                "items": {
                  "type": "string"
                }
              },
              "automationLevel": {
                "type": "string",
                "description": "Vendor provided automation level",
                "example": "Fully Automated",
                "enum": [
                  "FULLY_AUTOMATED",
                  "PARTIALLY_AUTOMATED",
                  "NOT_AUTOMATED",
                  "DISABLED"
                ]
              },
              "migrationLevel": {
                "type": "string",
                "description": "Vendor provided migration level",
                "example": "Conservative"
              },
              "machineTypeAndModel": {
                "type": "string",
                "description": "Machine Type and Model",
                "example": "9040-MR9"
              },
              "serialNumber": {
                "type": "string",
                "description": "Serial Number",
                "example": "130330X"
              },
              "totalInstalledPhysicalProcessorUnits": {
                "type": "integer",
                "description": "Total Installed Physical Processor Units",
                "format": "int32",
                "example": 80
              },
              "supportedProcessorCompatibilityModes": {
                "type": "string",
                "description": "Supported Processor Compatibility Modes",
                "example": "POWER7, POWER8, POWER9"
              },
              "latestSupportedProcessorGeneration": {
                "type": "string",
                "description": "Latest Supported Processor Generation",
                "example": "9"
              },
              "totalInstalledPhysicalMemory": {
                "type": "integer",
                "description": "Total Installed Physical Memory",
                "format": "int32",
                "example": 4096
              },
              "hypervisorUsedMemory": {
                "type": "integer",
                "description": "Hypervisor Used Memory",
                "format": "int32",
                "example": 4096
              },
              "memoryAssignedToVMs": {
                "type": "integer",
                "description": "Memory Assigned To VMs",
                "format": "int32",
                "example": 4096
              },
              "logicalMemoryBlockSize": {
                "type": "integer",
                "description": "Logical Memory Block Size",
                "format": "int32",
                "example": 256
              },
              "supportedVirtualGpuTypes": {
                "type": "string",
                "description": "Comma separated list of Supported vGPU Types",
                "example": "1q, 2q, 4q, 8q, 16q"
              },
              "installedGpuDevices": {
                "type": "string",
                "description": "Comma separated list of Installed GPU Devices",
                "example": "T4, A16"
              },
              "hardwareVersion": {
                "type": "string",
                "description": "Hardware Compatibility Version",
                "example": "19.0"
              },
              "processorPools": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Model to describe Physical Machine attributes"
          }
        ]
      },
      "PaginationApiDTO": {
        "type": "object",
        "properties": {
          "orderBy": {
            "type": "array",
            "description": "Order by these fields.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/OrderByApiDTO"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for the next batch.",
            "readOnly": true
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of records to fetch.",
            "format": "int32",
            "readOnly": true
          }
        },
        "description": "Pagination parameters."
      },
      "ParkableEntityApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "accountOID": {
            "type": "integer",
            "description": "Unique ID of the account",
            "format": "int64",
            "example": 74613608411667
          },
          "accountName": {
            "type": "string",
            "description": "Display name of the account",
            "example": "dev-account"
          },
          "provider": {
            "type": "string",
            "description": "Name of the cloud provider",
            "example": "AWS",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "HYBRID",
              "UNKNOWN"
            ]
          },
          "state": {
            "type": "string",
            "description": "Last known state of the entity",
            "example": "STOPPED",
            "enum": [
              "RUNNING",
              "STOPPED",
              "SUSPENDED",
              "MAINTENANCE",
              "FAILOVER",
              "UNKNOWN",
              "STARTING",
              "STOPPING"
            ]
          },
          "parkable": {
            "type": "boolean",
            "description": "Signifies whether the entity can be parked. [DEPRECATED - EOL: 8.15.1 - Use: restrictions]",
            "example": true
          },
          "entityType": {
            "type": "string",
            "description": "Type of the entity",
            "example": "COMPUTE",
            "enum": [
              "VirtualMachine",
              "DatabaseServer",
              "Database",
              "VirtualMachineSpec"
            ]
          },
          "regionOID": {
            "type": "integer",
            "description": "Unique ID of the region, the entity belongs to",
            "format": "int64",
            "example": 74613608411668
          },
          "regionName": {
            "type": "string",
            "description": "Name of the region",
            "example": "us-east-1"
          },
          "instanceType": {
            "type": "string",
            "description": "Type of the instance",
            "example": "t3.micro"
          },
          "cost": {
            "type": "number",
            "description": "On demand hourly cost of the entity",
            "format": "double",
            "example": 10.24
          },
          "tags": {
            "type": "array",
            "description": "List of tags attached to the entity",
            "items": {
              "$ref": "#/components/schemas/TagApiDTO"
            }
          },
          "schedules": {
            "type": "array",
            "description": "List of schedules attached to the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityScheduleApiDTO"
            }
          },
          "groups": {
            "type": "array",
            "description": "List of the Groups attached to the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityGroupApiDTO"
            }
          },
          "guestOSName": {
            "type": "string",
            "description": "Guest OS Name of the entity",
            "example": "Linux"
          },
          "restrictions": {
            "type": "array",
            "description": "List of the restrictions placed on the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityRestrictionApiDTO"
            }
          },
          "controlledBy": {
            "type": "integer",
            "description": "Unique ID of the entity that this entity is controlled by. For example, if this is a Virtual Machine that is part of a scale group, this would be the ID of the scale group",
            "format": "int64",
            "example": 74613608411668
          },
          "schedulePausedUntil": {
            "type": "integer",
            "description": "The time until which the schedule is paused only applicable if entity has parking schedule, in epoch time format",
            "format": "int64",
            "example": 1673273639
          },
          "cloudServiceName": {
            "type": "string",
            "description": "Cloud service name is the resource bought from the cloud service provider",
            "enum": [
              "AMAZON_RDS",
              "AMAZON_EC2",
              "AMAZON_EC2_AUTO_SCALING",
              "AZURE_APP_SERVICE",
              "AZURE_COSMOS_DB",
              "AZURE_DISK_STORAGE",
              "AZURE_SQL_DATABASE",
              "AZURE_SQL_MANAGED_INSTANCE",
              "AZURE_SYNAPSE_SQL_POOL",
              "AZURE_VIRTUAL_MACHINES",
              "GCP_DISK_STORAGE",
              "GCP_VIRTUAL_MACHINES"
            ]
          },
          "customInstanceType": {
            "type": "string",
            "description": "The entity's custom instance type. Similar to instanceType but provides customization details about the type of instance the workload is based on",
            "example": "n2d-custom-2-1024"
          }
        },
        "description": "Parkable Entity"
      },
      "ParkableEntityDetailsApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "accountOID": {
            "type": "integer",
            "description": "Unique ID of the account",
            "format": "int64",
            "example": 74613608411667
          },
          "accountName": {
            "type": "string",
            "description": "Display name of the account",
            "example": "dev-account"
          },
          "provider": {
            "type": "string",
            "description": "Name of the cloud provider",
            "example": "AWS",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "HYBRID",
              "UNKNOWN"
            ]
          },
          "state": {
            "type": "string",
            "description": "Last known state of the entity",
            "example": "STOPPED",
            "enum": [
              "RUNNING",
              "STOPPED",
              "SUSPENDED",
              "MAINTENANCE",
              "FAILOVER",
              "UNKNOWN",
              "STARTING",
              "STOPPING"
            ]
          },
          "parkable": {
            "type": "boolean",
            "description": "Signifies whether the entity can be parked. [DEPRECATED - EOL: 8.15.1 - Use: restrictions]",
            "example": true
          },
          "entityType": {
            "type": "string",
            "description": "Type of the entity",
            "example": "COMPUTE",
            "enum": [
              "VirtualMachine",
              "DatabaseServer",
              "Database",
              "VirtualMachineSpec"
            ]
          },
          "regionOID": {
            "type": "integer",
            "description": "Unique ID of the region, the entity belongs to",
            "format": "int64",
            "example": 74613608411668
          },
          "regionName": {
            "type": "string",
            "description": "Name of the region",
            "example": "us-east-1"
          },
          "instanceType": {
            "type": "string",
            "description": "Type of the instance",
            "example": "t3.micro"
          },
          "cost": {
            "type": "number",
            "description": "On demand hourly cost of the entity",
            "format": "double",
            "example": 10.24
          },
          "tags": {
            "type": "array",
            "description": "List of tags attached to the entity",
            "items": {
              "$ref": "#/components/schemas/TagApiDTO"
            }
          },
          "schedules": {
            "type": "array",
            "description": "List of schedules attached to the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityScheduleApiDTO"
            }
          },
          "groups": {
            "type": "array",
            "description": "List of the Groups attached to the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityGroupApiDTO"
            }
          },
          "guestOSName": {
            "type": "string",
            "description": "Guest OS Name of the entity",
            "example": "Linux"
          },
          "restrictions": {
            "type": "array",
            "description": "List of the restrictions placed on the entity",
            "items": {
              "$ref": "#/components/schemas/ParkableEntityRestrictionApiDTO"
            }
          },
          "controlledBy": {
            "type": "integer",
            "description": "Unique ID of the entity that this entity is controlled by. For example, if this is a Virtual Machine that is part of a scale group, this would be the ID of the scale group",
            "format": "int64",
            "example": 74613608411668
          },
          "schedulePausedUntil": {
            "type": "integer",
            "description": "The time until which the schedule is paused only applicable if entity has parking schedule, in epoch time format",
            "format": "int64",
            "example": 1673273639
          },
          "cloudServiceName": {
            "type": "string",
            "description": "Cloud service name is the resource bought from the cloud service provider",
            "enum": [
              "AMAZON_RDS",
              "AMAZON_EC2",
              "AMAZON_EC2_AUTO_SCALING",
              "AZURE_APP_SERVICE",
              "AZURE_COSMOS_DB",
              "AZURE_DISK_STORAGE",
              "AZURE_SQL_DATABASE",
              "AZURE_SQL_MANAGED_INSTANCE",
              "AZURE_SYNAPSE_SQL_POOL",
              "AZURE_VIRTUAL_MACHINES",
              "GCP_DISK_STORAGE",
              "GCP_VIRTUAL_MACHINES"
            ]
          },
          "customInstanceType": {
            "type": "string",
            "description": "The entity's custom instance type. Similar to instanceType but provides customization details about the type of instance the workload is based on",
            "example": "n2d-custom-2-1024"
          },
          "virtualMachineSpecDetails": {
            "$ref": "#/components/schemas/ParkableVirtualMachineSpecApiDTO"
          }
        },
        "description": "Details about a Parkable Entity. This includes the summary information from /parking/entities API along with additional details specific to the entity."
      },
      "ParkableEntityEnforcementPauseApiDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "error indicating the reason for failure",
            "example": "entityUuid not found"
          },
          "entityUUID": {
            "type": "string"
          }
        },
        "description": "represents the partial failure per entity for enforcement pause on list of parkable entities"
      },
      "ParkableEntityEnforcementPauseInputDTO": {
        "type": "object",
        "properties": {
          "until": {
            "type": "string",
            "description": "Time when the enforcement pause on parkable entities ends. Should be in ISO 8601 format",
            "example": "2022-11-29T01:02:03.000Z"
          },
          "durationMinutes": {
            "type": "integer",
            "description": "duration in minutes to keep enforcement pause on parkable entities",
            "format": "int32",
            "example": 60
          },
          "entityUuids": {
            "type": "array",
            "description": "list of parkable entities to pause enforcement on",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "represents the enforcement pause on list of parkable entities either until a given time or in duration of minutes"
      },
      "ParkableEntityGroupApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "groupType": {
            "type": "string",
            "description": "Type of the Group",
            "example": "Resource",
            "enum": [
              "RESOURCE"
            ]
          }
        },
        "description": "represents groups which are attached to the parkable entity"
      },
      "ParkableEntityInputDTO": {
        "type": "object",
        "properties": {
          "entityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "VirtualMachine",
                "DatabaseServer",
                "Database",
                "VirtualMachineSpec"
              ]
            }
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "RUNNING",
                "STOPPED",
                "SUSPENDED",
                "MAINTENANCE",
                "FAILOVER",
                "UNKNOWN",
                "STARTING",
                "STOPPING"
              ]
            }
          },
          "providers": {
            "type": "array",
            "description": "Parking Cloud Providers",
            "items": {
              "type": "string",
              "enum": [
                "AWS",
                "AZURE",
                "GCP",
                "HYBRID",
                "UNKNOWN"
              ]
            }
          },
          "parkableState": {
            "type": "string",
            "description": "Parkable state",
            "enum": [
              "UNPARKABLE",
              "PARKABLE"
            ]
          },
          "criteriaList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterApiDTO"
            }
          },
          "logicalOperator": {
            "type": "string",
            "description": "Logical operator to be applied across all the criteria. It can take values 'AND', 'OR'. If omitted, defaults to 'AND'",
            "enum": [
              "AND",
              "OR"
            ]
          }
        }
      },
      "ParkableEntityRestrictionApiDTO": {
        "required": [
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "enum": [
              "UNPARKABLE"
            ]
          }
        },
        "description": "Parent class for restrictions details. Implementing classes include: ParkableEntityUnparkableRestrictionApiDTO."
      },
      "ParkableEntityScheduleApiDTO": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name of the time span based schedule the parkable entities is attached to",
            "example": "Up 7-5 on weekdays"
          },
          "uuid": {
            "type": "string",
            "description": "UUID of the time span based schedule the parkable entities are attached to",
            "example": "74613608411667"
          },
          "pauseEnforcementUntil": {
            "type": "integer",
            "description": "Pause Enforcement time over the entity, in epoch time format",
            "format": "int64",
            "example": 1673273639
          },
          "attachedBy": {
            "$ref": "#/components/schemas/ParkingEntitySchedulerApiDTO"
          }
        },
        "description": "Represents time span based schedule display name and uuid of the time span based schedule attached to the parkable entity"
      },
      "ParkableEntitySmartParkingRecommendationApiDTO": {
        "type": "object",
        "description": "[BETA]: Smart parking recommendation details"
      },
      "ParkableEntityStatsInputDTO": {
        "required": [
          "groupBy"
        ],
        "type": "object",
        "properties": {
          "groupBy": {
            "type": "array",
            "description": "List of groupBys to filter",
            "items": {
              "type": "string",
              "enum": [
                "ENTITY_TYPE",
                "CSP"
              ]
            }
          }
        }
      },
      "ParkableEntityUUIDSetDTO": {
        "required": [
          "entityUuids"
        ],
        "type": "object",
        "properties": {
          "entityUuids": {
            "type": "array",
            "description": "list of parkable entity uuids",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "list of parkable entity uuids"
      },
      "ParkableEntityUnparkableRestrictionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ParkableEntityRestrictionApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "attachedBy": {
                "$ref": "#/components/schemas/ParkingEntitySchedulerApiDTO"
              }
            },
            "description": "represents the unparkable restriction placed on parkable entity"
          }
        ]
      },
      "ParkableVirtualMachineSpecApiDTO": {
        "type": "object",
        "properties": {
          "instanceTemplateName": {
            "type": "string",
            "description": "Name of template or configuration used to create the scale group. Ex: Name of Launch Template or Launch Configuration in AWS or the Instance Template name in Google.\""
          },
          "currentConfiguration": {
            "$ref": "#/components/schemas/ParkableVirtualMachineSpecConfigApiDTO"
          },
          "startConfiguration": {
            "$ref": "#/components/schemas/ParkableVirtualMachineSpecConfigApiDTO"
          },
          "instances": {
            "type": "array",
            "description": "The virtual machine instances in a cloud scale group",
            "items": {
              "$ref": "#/components/schemas/ParkableVirtualMachineSpecInstanceApiDTO"
            }
          }
        },
        "description": "Details about a parkable Virtual Machine Spec entity such as a cloud scale group.A cloud scale group is is a collection of virtual machine (VM) instances that are created from a common source. Ex: AWS Auto Scaling Groups."
      },
      "ParkableVirtualMachineSpecConfigApiDTO": {
        "type": "object",
        "properties": {
          "minSize": {
            "type": "integer",
            "description": "Minimum group size",
            "format": "int32"
          },
          "maxSize": {
            "type": "integer",
            "description": "Maximum group size",
            "format": "int32"
          },
          "desiredSize": {
            "type": "integer",
            "description": "Default size of group when no provider-initiated scaling actions are applied",
            "format": "int32"
          }
        },
        "description": "The minimum group size, desired group size and maximum group size for a scale group"
      },
      "ParkableVirtualMachineSpecInstanceApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "instanceType": {
            "type": "string",
            "description": "Type of the instance",
            "example": "t3.micro"
          },
          "state": {
            "type": "string",
            "description": "Last known state of the instance",
            "example": "STOPPED",
            "enum": [
              "RUNNING",
              "STOPPED",
              "SUSPENDED",
              "MAINTENANCE",
              "FAILOVER",
              "UNKNOWN",
              "STARTING",
              "STOPPING"
            ]
          },
          "tags": {
            "type": "array",
            "description": "List of tags attached to the instance",
            "items": {
              "$ref": "#/components/schemas/TagApiDTO"
            }
          },
          "availabilityZoneName": {
            "type": "string",
            "description": "Name of the availability zone the instance belongs to",
            "example": "aws-us-west-2a"
          }
        },
        "description": "Details about a virtual machine instance within a parkable Virtual Machine Spec entity"
      },
      "ParkingEntitySchedulerApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Whether user or policy was responsible for attaching the restriction/schedule",
            "example": "POLICY",
            "enum": [
              "USER",
              "POLICY"
            ]
          }
        },
        "description": "Represents the details of the user/policy responsible for attaching the restriction/schedule to parkable entity"
      },
      "ParkingItemApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ScheduleItemApiDTO"
          },
          {
            "required": [
              "state"
            ],
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "description": "expected state during the time span",
                "enum": [
                  "IGNORE",
                  "ON",
                  "OFF"
                ]
              }
            },
            "description": "Parking state for the time span"
          }
        ]
      },
      "ParkingPolicyApiDTO": {
        "required": [
          "impacts",
          "level"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "impacts": {
            "$ref": "#/components/schemas/ParkingPolicyImpactsApiDTO"
          },
          "level": {
            "type": "string",
            "description": "Specifies the level at which the policy is applicable.",
            "enum": [
              "GLOBAL",
              "CLOUD_PROVIDER",
              "ACCOUNT",
              "RESOURCE_GROUP"
            ]
          },
          "scopes": {
            "type": "array",
            "description": "List of scope object to which the parking policy is applicable, like details of account for account level policies.",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "criteriaList": {
            "type": "array",
            "description": "List of filters to get the desired the entities to which the policy is applicable.",
            "items": {
              "$ref": "#/components/schemas/FilterApiDTO"
            }
          },
          "priority": {
            "type": "integer",
            "description": "Priority is used to identify the applicable priority if there are multiple policies at same level",
            "format": "int32"
          }
        },
        "description": "Model to describe a parking policy, used to assign timespan based schedules to entities based on global, cloud provider, account and resource group level filters"
      },
      "ParkingPolicyImpactsApiDTO": {
        "type": "object",
        "properties": {
          "attachSchedule": {
            "$ref": "#/components/schemas/ParkingPolicyTimeSpansApiDTO"
          },
          "restrictUnparkable": {
            "type": "boolean",
            "description": "to mark unparkable by policy."
          }
        },
        "description": "Impacts to be taken by the policy."
      },
      "ParkingPolicyStatsInputDTO": {
        "required": [
          "groupBy"
        ],
        "type": "object",
        "properties": {
          "groupBy": {
            "type": "array",
            "description": "List of groupBys to filter",
            "items": {
              "type": "string",
              "enum": [
                "LEVEL"
              ]
            }
          }
        }
      },
      "ParkingPolicyTimeSpansApiDTO": {
        "type": "object",
        "properties": {
          "timespanScheduleUuid": {
            "type": "string",
            "description": "timespanScheduleUuid used to uniquely recognize the time span Schedule."
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          }
        },
        "description": "Parking Policy time span schedule"
      },
      "PatchedTargetDataApiDTO": {
        "required": [
          "patchedFields",
          "probeType"
        ],
        "type": "object",
        "properties": {
          "probeType": {
            "type": "string",
            "description": "Probe type of the patched target."
          },
          "patchedFields": {
            "type": "array",
            "description": "Patched target fields.",
            "items": {
              "$ref": "#/components/schemas/PatchedTargetFieldApiDTO"
            }
          }
        },
        "description": "Model to describe a patched target data."
      },
      "PatchedTargetFieldApiDTO": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "Patched field name."
          },
          "fieldValue": {
            "type": "string",
            "description": "Patched field value."
          }
        },
        "description": "Model to describe a field in patched target data."
      },
      "PeakBaselineApiDTO": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date of the utilization peak"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          }
        },
        "description": "Model to describe a peak baseline change in the scenario"
      },
      "PlacementInfoDTO": {
        "type": "object",
        "properties": {
          "computeResources": {
            "type": "array",
            "description": "Compute resources that the reservation is placed in",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "storageResources": {
            "type": "array",
            "description": "Storage resources that the reservation is placed in",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "networkResources": {
            "type": "array",
            "description": "Network resources that the reservation is placed in",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "failureInfos": {
            "type": "array",
            "description": "Details about why the reservation failed. This will only be populated if the reservation failed.",
            "items": {
              "$ref": "#/components/schemas/ReservationFailureInfoDTO"
            }
          },
          "invalidInfo": {
            "$ref": "#/components/schemas/ReservationInvalidInfoApiDTO"
          }
        }
      },
      "PlacementOptionApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "constraintType": {
            "type": "string",
            "description": "constraint type, if a commodity is AccessCommodity, then the class name of that commodity is a constraint type",
            "enum": [
              "ApplicationCommodity",
              "ClusterCommodity",
              "DataCenterCommodity",
              "DatastoreCommodity etc"
            ]
          },
          "scope": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "target": {
            "$ref": "#/components/schemas/TargetApiDTO"
          },
          "numPotentialEntities": {
            "type": "integer",
            "description": "example: other VMs, which buys this constraint but not on this host",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "commodity key, this information is needed when trying to retrieve the intersaction of providers or consumers"
          },
          "currentEntities": {
            "type": "array",
            "description": "for consumers only. example: VMs, which are currently on this host per constraint they are buying",
            "items": {
              "$ref": "#/components/schemas/ServiceEntityApiDTO"
            }
          }
        },
        "description": "Model to describe the property of provider options."
      },
      "PlacementOptionApiInputDTO": {
        "type": "object",
        "properties": {
          "constraintType": {
            "type": "string",
            "description": "constraint type, if a commodity is AccessCommodity, then the class name of that commodity is a constraint type",
            "enum": [
              "ApplicationCommodity",
              "ClusterCommodity",
              "DataCenterCommodity",
              "DatastoreCommodity etc"
            ]
          },
          "key": {
            "type": "string",
            "description": "commodity key, this information is needed when trying to retrieve the intersection of providers or consumers"
          }
        },
        "description": "Model to describe the property of provider options."
      },
      "PlacementParametersDTO": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of Virtual Machines to Place",
            "format": "int32"
          },
          "templateID": {
            "type": "string",
            "description": "Template Uuid used for the Placement"
          },
          "entityNames": {
            "type": "array",
            "description": "Name of the Placed Virtual Machine",
            "items": {
              "type": "string"
            }
          },
          "constraintIDs": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of uuids that will define the constraints that new VMs should be compliant to, allowed uuids are: Cluster, Datacenter, VirtualDataCenter, Network, Placement Policy. The possible providers are the intersection of all constraints passed.",
            "items": {
              "type": "string"
            }
          },
          "geographicRedundancy": {
            "type": "boolean",
            "description": "Enable Geographic Redundancy"
          }
        }
      },
      "PlanDestinationApiDTO": {
        "required": [
          "businessUnit",
          "exportDescription",
          "exportProgressPercentage",
          "exportState",
          "hasExportedData",
          "market",
          "numErrors"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "market": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "businessUnit": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "numErrors": {
            "type": "integer",
            "description": "Number of errors on the plan destination.",
            "format": "int32"
          },
          "hasExportedData": {
            "type": "boolean",
            "description": "Boolean, true if this plan destination has uploaded data."
          },
          "exportState": {
            "type": "string",
            "description": "Plan export state on this plan destination.",
            "enum": [
              "NONE",
              "REJECTED",
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ]
          },
          "exportDescription": {
            "type": "string",
            "description": "Plan export description message on this plan destination."
          },
          "exportProgressPercentage": {
            "type": "integer",
            "description": "Plan export progress percentage on this plan destination.",
            "format": "int32"
          }
        },
        "description": "Model to describe a plan destination. A plan destination is an external destination where plan results can be uploaded."
      },
      "PolicyApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Placement Policy Type",
            "enum": [
              "AT_MOST_N",
              "BIND_TO_GROUP",
              "BIND_TO_COMPLEMENTARY_GROUP",
              "MUST_RUN_TOGETHER",
              "AT_MOST_N_BOUND",
              "MERGE",
              "BIND_TO_GROUP_AND_LICENSE",
              "MUST_NOT_RUN_TOGETHER",
              "EXCLUSIVE_BIND_TO_GROUP"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the policy"
          },
          "enabled": {
            "type": "boolean",
            "description": "Shows if the policy is enabled"
          },
          "capacity": {
            "type": "integer",
            "description": "Indicate the max workload entities at the same time per placement entites, used when type is AT_MOST_N_BOUND",
            "format": "int32"
          },
          "commodityType": {
            "type": "string",
            "description": "Commodity type used for the policy"
          },
          "mergeType": {
            "type": "string",
            "description": "Type of Group that is merged, used only when type is MERGE",
            "enum": [
              "Cluster",
              "StorageCluster",
              "DataCenter",
              "DesktopPool"
            ]
          },
          "consumerGroup": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "providerGroup": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "mergeGroups": {
            "type": "array",
            "description": "List of Groups to merge, used when type is MERGE",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "providerEntityType": {
            "type": "string",
            "description": "The entity type for the provider. This property is only applicable when policy type is set to MUST_RUN_TOGETHER or MUST_NOT_RUN_TOGETHER. When policy type is set to MUST_RUN_TOGETHER or MUST_NOT_RUN_TOGETHER, this field  should be set with type of provider where members of consumer group must run or must not run together on it depending on the policy type.",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          }
        },
        "description": "Model to describe a Workload policy, used to manage the entities in the Environment. e.g. Restrict the number of VMs that can use a given datastore, Limit VM mobility by restricting a collection of VMs to a specified cluster or group of hosts, Expand VM mobility by merging a number of clusters, Keep workload running on hosts that have the required licenses"
      },
      "PolicyApiInputDTO": {
        "required": [
          "policyName",
          "type"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "Name of the policy"
          },
          "type": {
            "type": "string",
            "description": "Placement Policy Type",
            "enum": [
              "AT_MOST_N",
              "BIND_TO_GROUP",
              "BIND_TO_COMPLEMENTARY_GROUP",
              "MUST_RUN_TOGETHER",
              "AT_MOST_N_BOUND",
              "MERGE",
              "BIND_TO_GROUP_AND_LICENSE",
              "MUST_NOT_RUN_TOGETHER",
              "EXCLUSIVE_BIND_TO_GROUP"
            ]
          },
          "sellerUuid": {
            "type": "string",
            "description": "Uuid of the provider Group in a Placement Policy"
          },
          "buyerUuid": {
            "type": "string",
            "description": "Uuid of the consumer Group in a Placement Policy"
          },
          "mergeUuids": {
            "type": "array",
            "description": "Uuids of the Groups in a Merge Policy",
            "items": {
              "type": "string"
            }
          },
          "mergeType": {
            "type": "string",
            "description": "Group Type in a Merge Policy",
            "enum": [
              "Cluster",
              "StorageCluster",
              "DataCenter",
              "DesktopPool"
            ]
          },
          "capacity": {
            "type": "integer",
            "description": "For an AT_MOST_N or AT_MOST_N_BOUND policy, the number of consumers to allow on a provider entity",
            "format": "int32"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether to enable the policy"
          },
          "providerEntityType": {
            "type": "string",
            "description": "The entity type for the provider. This property is only applicable when the policy type is set to MUST_RUN_TOGETHER or MUST_NOT_RUN_TOGETHER. This field is set with the provider type (for example, PhysicalMachine) the policy should respect.",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          }
        },
        "description": "Model to describe a Placement Policy"
      },
      "PortChannelApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "capacity": {
            "$ref": "#/components/schemas/StatValueApiDTO"
          },
          "values": {
            "$ref": "#/components/schemas/StatValueApiDTO"
          },
          "units": {
            "type": "string",
            "description": "Units, used for Commodities stats. E.G. $/h"
          },
          "ports": {
            "type": "array",
            "description": "List of ports in the channel",
            "items": {
              "$ref": "#/components/schemas/StatApiDTO"
            }
          },
          "filters": {
            "type": "array",
            "description": "describe the grouping options used to generate the output",
            "items": {
              "$ref": "#/components/schemas/StatFilterApiDTO"
            }
          }
        },
        "description": "Model to describe a Port Channel"
      },
      "PortsAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "portChannels": {
                "type": "array",
                "description": "Port Channels",
                "items": {
                  "$ref": "#/components/schemas/PortChannelApiDTO"
                }
              },
              "ports": {
                "type": "array",
                "description": "Independent ports",
                "items": {
                  "$ref": "#/components/schemas/StatApiDTO"
                }
              }
            },
            "description": "Model to describe the Switch attributes, contains Ports and Port Channels"
          }
        ]
      },
      "PriceAdjustmentDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DISCOUNT",
              "INCREASE"
            ]
          },
          "value": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "PrimitiveFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "fieldName"
            ],
            "type": "object",
            "properties": {
              "fieldName": {
                "type": "string",
                "description": "The name of the primitive field.",
                "readOnly": true
              }
            },
            "description": "A simple field of an entity or group."
          }
        ]
      },
      "ProbeApiDTO": {
        "required": [
          "category",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "Probe id.",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "Probe type."
          },
          "category": {
            "type": "string",
            "description": "Probe category."
          },
          "error": {
            "type": "string",
            "description": "Unexpected error while collecting probe information"
          }
        },
        "description": "Model to describe a probe."
      },
      "ProbeDeploymentApiDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Probe"
          },
          "version": {
            "type": "string",
            "description": "Version of the Probe"
          },
          "image": {
            "type": "string",
            "description": "Probe image path"
          },
          "imageHash": {
            "type": "string",
            "description": "Probe image hash"
          }
        }
      },
      "ProbePropertyApiDTO": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "probeId": {
            "type": "integer",
            "description": "Probe id.",
            "format": "int64"
          },
          "targetId": {
            "type": "integer",
            "description": "Target id.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Probe property name."
          },
          "value": {
            "type": "string",
            "description": "Probe property value."
          }
        },
        "description": "Model to describe a probe property"
      },
      "ProbePropertyNameValuePairApiDTO": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Probe property name."
          },
          "value": {
            "type": "string",
            "description": "Probe property value."
          }
        },
        "description": "Model to describe a name/value pair for probe properties."
      },
      "ProductCapabilityDTO": {
        "type": "object",
        "properties": {
          "deploymentMode": {
            "type": "string",
            "description": "Deployment mode, affects hiding / showing multiple UI views, options",
            "enum": [
              "HYBRID_SAAS",
              "SERVER",
              "SAAS_TRIAL",
              "CLOUDABILITY_PREMIUM"
            ]
          },
          "searchApiEnabled": {
            "type": "boolean",
            "description": "Controls use of new search api"
          },
          "parkingEnabled": {
            "type": "boolean",
            "description": "Controls hiding/showing parking related pages in UI"
          },
          "frontEndTelemetryEnabled": {
            "type": "boolean",
            "description": "Controls enabling/disabling front end telemetry in UI"
          },
          "jdbcHttpSessionEnabled": {
            "type": "boolean",
            "description": "Controls use of JDBC persistent HTTP Session"
          },
          "saasReportingEnabled": {
            "type": "boolean",
            "description": "Controls hiding/showing SaaS reports page in UI"
          },
          "reportingEnabled": {
            "type": "boolean"
          }
        },
        "description": "Model to describe Product Capability information."
      },
      "ProductVersionDTO": {
        "type": "object",
        "properties": {
          "versionInfo": {
            "type": "string",
            "description": "A multi-line string describing the version information, including that of the various internal components.",
            "example": "\"versionInfo\": \"Turbonomic Operations Manager 8.0.1-SNAPSHOT (Build \\\"20200922092548000\\\") \\\"2020-09-22 20:10:04\\\"\\n\\naction-orchestrator: 8.0.1-SNAPSHOT\\napi: 8.0.1-SNAPSHOT\\nauth: 8.0.1-SNAPSHOT\\ncost: 8.0.1-SNAPSHOT\\nextractor: 8.0.1-SNAPSHOT\\ngroup: 8.0.1-SNAPSHOT\\nhistory: 8.0.1-SNAPSHOT\\nmarket: 8.0.1-SNAPSHOT\\nmediation-actionscript: 8.0.1-SNAPSHOT\\nmediation-appdynamics: 8.0.1-SNAPSHOT\\nmediation-appinsights: 8.0.1-SNAPSHOT\\nmediation-aws: 8.0.1-SNAPSHOT\\nmediation-awsbilling: 8.0.1-SNAPSHOT\\nmediation-awscost: 8.0.1-SNAPSHOT\\nmediation-azure: 8.0.1-SNAPSHOT\\nmediation-azurecost: 8.0.1-SNAPSHOT\\nmediation-azureea: 8.0.1-SNAPSHOT\\nmediation-azuresp: 8.0.1-SNAPSHOT\\nmediation-azurevolumes: 8.0.1-SNAPSHOT\\nmediation-dynatrace: 8.0.1-SNAPSHOT\\nmediation-hpe3par: 8.0.1-SNAPSHOT\\nmediation-hyperv: 8.0.1-SNAPSHOT\\nmediation-netapp: 8.0.1-SNAPSHOT\\nmediation-nutanix: 8.0.1-SNAPSHOT\\nmediation-oneview: 8.0.1-SNAPSHOT\\nmediation-pure: 8.0.1-SNAPSHOT\\nmediation-ucs: 8.0.1-SNAPSHOT\\nmediation-vcenter: 8.0.1-SNAPSHOT\\nmediation-vcenterbrowsing: 8.0.1-SNAPSHOT\\nmediation-vmax: 8.0.1-SNAPSHOT\\nmediation-vmm: 8.0.1-SNAPSHOT\\nplan-orchestrator: 8.0.1-SNAPSHOT\\nrepository: 8.0.1-SNAPSHOT\\ntopology-processor: 8.0.1-SNAPSHOT\""
          },
          "version": {
            "type": "string",
            "description": "The Operations Manager product version, including major and minor versions",
            "example": "8.0.1-SNAPSHOT"
          },
          "build": {
            "type": "string",
            "description": "The build number associated with this deployment.",
            "example": "20200922211058775"
          },
          "commit": {
            "type": "string",
            "description": "The commit associated with this deployment.",
            "example": "1183dd2"
          },
          "branch": {
            "type": "string",
            "description": "The branch associated with this deployment.",
            "example": "8.0.1"
          },
          "gitDescription": {
            "type": "string",
            "description": "Specific source control information associated with this deployment.",
            "example": "1183dd2bb8ebca3dbcaf708e0c323cabc7b8e352 "
          },
          "updates": {
            "type": "string",
            "description": "Description of available updates--not yet implemented in XL."
          },
          "marketVersion": {
            "type": "integer",
            "description": "The version of the market",
            "format": "int32",
            "example": 2
          },
          "apiVersion": {
            "type": "string",
            "description": "The version of the REST API.",
            "example": "3.1"
          }
        },
        "description": "Contains version information about the running Turbonomic instance."
      },
      "PurchaseProfileDTO": {
        "required": [
          "cloudType",
          "paymentOption",
          "reservedInstanceType",
          "termYears"
        ],
        "type": "object",
        "properties": {
          "cloudType": {
            "type": "string",
            "description": "Cloud type",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "HYBRID",
              "UNKNOWN"
            ]
          },
          "termYears": {
            "type": "integer",
            "description": "Number of years in preferred term",
            "format": "int32"
          },
          "paymentOption": {
            "type": "string",
            "description": "Preferred payment option",
            "enum": [
              "ALL_UPFRONT",
              "PARTIAL_UPFRONT",
              "NO_UPFRONT"
            ]
          },
          "reservedInstanceType": {
            "type": "string",
            "description": "Preferred offering class (Standard or Convertible)",
            "enum": [
              "STANDARD",
              "CONVERTIBLE"
            ]
          }
        },
        "description": "Model to describe a set of preferences for purchasing RIs"
      },
      "QueryInputApiDTO": {
        "required": [
          "query",
          "type"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Query string. The format of this depends on the QueryType chosen. For example, for a REGEX QueryType, this should be a regular expression."
          },
          "type": {
            "type": "string",
            "description": "Query type",
            "enum": [
              "EXACT",
              "REGEX",
              "CONTAINS"
            ]
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "If true, the query string will match case-sensitivity. This field is only used when QueryType is not REGEX."
          }
        },
        "description": "Model to describe an input query"
      },
      "RIBuyActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "estimatedOnDemandCost": {
                "type": "number",
                "format": "float"
              },
              "estimatedRICoverage": {
                "type": "number",
                "format": "float"
              },
              "historicalDemandDataset": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StatSnapshotApiDTO"
                }
              },
              "subType": {
                "type": "string"
              }
            },
            "description": "Model to describe buy action for reserved instance"
          }
        ]
      },
      "RIPurchaseProfilesSettingApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SettingApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "$ref": "#/components/schemas/ReservedInstancePurchaseSettingsDTO"
              },
              "defaultValue": {
                "$ref": "#/components/schemas/ReservedInstancePurchaseSettingsDTO"
              }
            },
            "description": "Model to describe RI Purchase Profile settings"
          }
        ]
      },
      "RangeApiDTO": {
        "type": "object",
        "properties": {
          "step": {
            "type": "number",
            "description": "The Step scale factor of the slider",
            "format": "double"
          },
          "labels": {
            "type": "array",
            "description": "Labels to show in the values of the slider",
            "items": {
              "type": "string"
            }
          },
          "customStepValues": {
            "type": "array",
            "description": "Custom step values when the slider step is not constant - [DEPRECATED - Use: stepValues]",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "stepValues": {
            "type": "array",
            "description": "Custom step values when the slider step is not constant",
            "items": {
              "type": "number",
              "format": "float"
            }
          }
        },
        "description": "Model to describe the Range of a Value in the Settings"
      },
      "RangeInputApiDTO": {
        "type": "object",
        "properties": {
          "minValue": {
            "type": "number",
            "description": "Minimum value of the input range",
            "format": "float"
          },
          "maxValue": {
            "type": "number",
            "description": "Maximum value of the input range",
            "format": "float"
          }
        },
        "description": "Model to describe an input range. Either minValue or maxValue needs to be defined."
      },
      "Recommendation": {
        "required": [
          "description",
          "errorType"
        ],
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "description": "The problem this recommendation is produced for."
          },
          "description": {
            "type": "string",
            "description": "The recommended user action to investigate/mitigate the problem."
          }
        },
        "description": "A DTO for a single recommendation to an error."
      },
      "ReconfigureActionDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActionDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "vcpuBefore": {
                "type": "integer",
                "description": "vCPUs before the change",
                "format": "int32"
              },
              "vcpuAfter": {
                "type": "integer",
                "description": "vCPUs after the change",
                "format": "int32"
              },
              "socketsBefore": {
                "type": "integer",
                "description": "sockets before the change",
                "format": "int32"
              },
              "socketsAfter": {
                "type": "integer",
                "description": "sockets after the change",
                "format": "int32"
              },
              "coresPerSocketBefore": {
                "type": "integer",
                "description": "cores per socket before the change",
                "format": "int32"
              },
              "coresPerSocketAfter": {
                "type": "integer",
                "description": "cores per socket after the change",
                "format": "int32"
              }
            },
            "description": "[BETA]: Model to describe entity reconfiguration changes"
          }
        ]
      },
      "RecurrenceApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the recurrence, Enum: DAILY, WEEKLY, MONTHLY",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ]
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The day of week that the recurrence will occur. Required if the type of recurrence is WEEKLY, or if the type is MONTHLY and a week for the monthly recurrence has been set.",
            "items": {
              "type": "string",
              "enum": [
                "Sun",
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat"
              ]
            }
          },
          "daysOfMonth": {
            "type": "array",
            "description": "When recurrence type is MONTHLY, the date to apply the monthly recurrence",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "weekOfTheMonth": {
            "type": "array",
            "description": "When recurrence type is MONTHLY, which week of the month to apply the recurrence. A value of -1 indicates last week, 0 indicates this week, and so on.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "interval": {
            "type": "integer",
            "description": "Frequency of the recurrence based on the recurrence type. For example, an interval of '2' with a recurrence type of MONTHLY will occur every two months.",
            "format": "int32"
          }
        },
        "description": "Model to describe the Schedule for a Settings Policy"
      },
      "RegionAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "latitude": {
                "type": "number",
                "description": "The latitude of the region used along with longitude to determine physical location.",
                "format": "double"
              },
              "longitude": {
                "type": "number",
                "description": "The longitude of the region used along with latitude to determine physical location.",
                "format": "double"
              },
              "numWorkloads": {
                "type": "integer",
                "description": "Number of workloads (VMs, databases, etc.) in this region.",
                "format": "int32"
              }
            },
            "description": "Model to describe Region attributes"
          }
        ]
      },
      "RelatedActionApiDTO": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/BasicActionApiDTO"
          },
          "actionRelationType": {
            "type": "string",
            "description": "Action relation type",
            "enum": [
              "BLOCKED_BY",
              "BLOCKING",
              "CAUSED_BY",
              "CAUSING"
            ]
          }
        },
        "description": "Model to describe the relationship between two actions"
      },
      "RelatedActionFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "type": "object",
            "description": "Count of related actions."
          }
        ]
      },
      "RelatedEntityFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "property",
              "relatedEntityType"
            ],
            "type": "object",
            "properties": {
              "relatedEntityType": {
                "type": "string",
                "description": "The type of related entities of interest.",
                "readOnly": true,
                "enum": [
                  "Application",
                  "ApplicationComponent",
                  "ApplicationServer",
                  "AvailabilityZone",
                  "BusinessAccount",
                  "BusinessApplication",
                  "BusinessTransaction",
                  "BusinessUser",
                  "Chassis",
                  "CloudService",
                  "ComputeTier",
                  "Container",
                  "ContainerPod",
                  "ContainerSpec",
                  "Database",
                  "DatabaseServer",
                  "DatabaseServerTier",
                  "DatabaseTier",
                  "DataCenter",
                  "DesktopPool",
                  "DiskArray",
                  "DPod",
                  "HCIPhysicalMachine",
                  "HypervisorServer",
                  "Internet",
                  "IOModule",
                  "LoadBalancer",
                  "LogicalPool",
                  "Namespace",
                  "Network",
                  "PhysicalMachine",
                  "ProcessorPool",
                  "Region",
                  "ReservedInstance",
                  "Service",
                  "ServiceProvider",
                  "Storage",
                  "StorageController",
                  "StorageTier",
                  "Switch",
                  "Unknown",
                  "ViewPod",
                  "VirtualApplication",
                  "VirtualDataCenter",
                  "VirtualMachine",
                  "VirtualVolume",
                  "VPod",
                  "WorkloadController",
                  "ContainerPlatformCluster",
                  "CloudCommitment",
                  "ApplicationComponentSpec",
                  "VirtualMachineSpec",
                  "DocumentCollection",
                  "NodeGroup",
                  "PowerVMPhysicalMachine",
                  "DataWarehouse",
                  "DataWarehouseTier"
                ]
              },
              "property": {
                "type": "string",
                "description": "The related entity property of interest.",
                "readOnly": true,
                "enum": [
                  "NAMES",
                  "COUNT"
                ]
              }
            },
            "description": "A property of related entities."
          }
        ]
      },
      "RelatedGroupFieldApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldApiDTO"
          },
          {
            "required": [
              "property",
              "relatedGroupType"
            ],
            "type": "object",
            "properties": {
              "relatedGroupType": {
                "type": "string",
                "description": "The type of related groups of interest.",
                "readOnly": true,
                "enum": [
                  "Group",
                  "Resource",
                  "Cluster",
                  "VMCluster",
                  "StorageCluster",
                  "BusinessAccountFolder",
                  "BillingFamily",
                  "NodePool"
                ]
              },
              "property": {
                "type": "string",
                "description": "The related group property of interest.",
                "readOnly": true,
                "enum": [
                  "NAMES",
                  "COUNT"
                ]
              }
            },
            "description": "A property of related groups.  This field type applies only to entities."
          }
        ]
      },
      "RelatedStatsApiDTO": {
        "required": [
          "commodityDetailsList",
          "relationType"
        ],
        "type": "object",
        "properties": {
          "relationType": {
            "type": "string",
            "description": "Relation Type",
            "enum": [
              "sold",
              "bought"
            ]
          },
          "commodityDetailsList": {
            "type": "array",
            "description": "Commodity detail list",
            "items": {
              "$ref": "#/components/schemas/CommodityDetailsApiDTO"
            }
          }
        },
        "description": "Information on relation type and its related commodities"
      },
      "RelievePressureObjectApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "sources": {
            "type": "array",
            "description": "Sources of the change, List of Clusters that are overloaded",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "destinations": {
            "type": "array",
            "description": "Destinations of the change, List of Clusters where VMs can move to",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          }
        },
        "description": "Model to describe a relieve pressure change in the scenario: minimum amount of Actions Moves that will relieve the pressure on the over-utilized clusters"
      },
      "RemoveConstraintApiDTO": {
        "type": "object",
        "properties": {
          "constraintType": {
            "type": "string",
            "description": "Type of the constraint to remove. To ignore all constraints - use AllCommodities. This will ignore all constraints not just Network/Cluster/StorageCluster/DC. GlobalIgnoreConstraint - deprecated - use AllCommodities instead.",
            "enum": [
              "DataCenterCommodity",
              "ClusterCommodity",
              "NetworkCommodity",
              "DatastoreCommodity",
              "StorageClusterCommodity",
              "GlobalIgnoreConstraint",
              "AllCommodities"
            ]
          },
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "targetEntityType": {
            "type": "string",
            "description": "EntityType to target with constraint configuration",
            "enum": [
              "VirtualMachine",
              "Container",
              "ContainerPod"
            ]
          }
        },
        "description": "Model to describe a constraint change in the scenario"
      },
      "RemoveObjectApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "targetEntityType": {
            "type": "string",
            "description": "Type of entity to remove from group target"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          }
        },
        "description": "Model to describe a remove change in the scenario"
      },
      "ReplaceObjectApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "template": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "targetEntityType": {
            "type": "string",
            "description": "Type of entity to remove from group target"
          }
        },
        "description": "Model to describe a migration change in the scenario"
      },
      "ReplaceWebhookBodyRequestApiDTO": {
        "required": [
          "webhookBody"
        ],
        "type": "object",
        "properties": {
          "webhookBody": {
            "type": "string",
            "description": "The Webhook body being substituted."
          }
        },
        "description": "The details of a request to substitute action fields in a Webhook body template."
      },
      "ReplaceWebhookBodyResponseApiDTO": {
        "required": [
          "succeeded"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "succeeded": {
            "type": "boolean",
            "description": "The Status of webhook body replacement."
          },
          "error": {
            "type": "string",
            "description": "The error that occurred during replacement, if any."
          },
          "replacedBody": {
            "type": "string",
            "description": "The replaced body after substitution of action fields."
          }
        },
        "description": "Result of substituting action field values in a Webhook body template."
      },
      "ReplicaApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Replica name"
          },
          "failoverPriority": {
            "type": "string",
            "description": "Failover priority level of this replica"
          },
          "clusterRole": {
            "type": "string",
            "description": "Role of this replica.",
            "enum": [
              "Writer",
              "Reader"
            ]
          },
          "deploymentType": {
            "type": "string",
            "description": "Deployment type",
            "enum": [
              "SINGLE_AZ",
              "MULTI_AZ"
            ]
          },
          "sli": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Model to describe Replica attributes"
      },
      "RequestHeader": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Request header name"
          },
          "value": {
            "type": "string",
            "description": "Request header value. On create, required. On update, not provided means re-use existing."
          },
          "isSecret": {
            "type": "boolean",
            "description": "Whether the request header value should be encrypted"
          }
        },
        "description": "Model to describe a request header."
      },
      "ReservationConstraintApiDTO": {
        "required": [
          "constraintType",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string",
            "description": "UUID of the constraint"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "constraintType": {
            "type": "string",
            "description": "Type of constraint",
            "enum": [
              "CLUSTER",
              "DATA_CENTER",
              "VIRTUAL_DATA_CENTER",
              "POLICY",
              "NETWORK"
            ]
          }
        },
        "description": "The constraints user specified when running reservation which limit where templates could be placed."
      },
      "ReservationFailureInfoDTO": {
        "required": [
          "closestSeller",
          "closestSellerCluster",
          "maxQuantityAvailable",
          "quantityRequested",
          "resource",
          "timespan"
        ],
        "type": "object",
        "properties": {
          "resource": {
            "type": "string",
            "description": "Most constrained resource"
          },
          "timespan": {
            "type": "string",
            "description": "Failure is in historical or current",
            "enum": [
              "HISTORICAL",
              "CURRENT",
              "PROJECTED",
              "PLAN_SOURCE",
              "PLAN_PROJECTED"
            ]
          },
          "closestSeller": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "closestSellerCluster": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "maxQuantityAvailable": {
            "type": "number",
            "description": "Quantity of resource available on closestSeller",
            "format": "double"
          },
          "quantityRequested": {
            "type": "number",
            "description": "Quantity of resource requested",
            "format": "double"
          },
          "units": {
            "type": "string",
            "description": "Units for the resource"
          }
        },
        "description": "Failure information when reservation fails"
      },
      "ReservationInvalidInfoApiDTO": {
        "type": "object",
        "properties": {
          "invalidReason": {
            "type": "string",
            "description": "The reason why the reservation is invalid",
            "enum": [
              "MARKET_CONNECTIVITY_ERROR",
              "MARKET_NOT_READY",
              "INVALID_CONSTRAINTS"
            ]
          }
        },
        "description": "The reason the reservation is invalid"
      },
      "ReservedInstanceApiDTO": {
        "required": [
          "cloudType"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "template": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "platform": {
            "type": "string",
            "description": "Platform name",
            "enum": [
              "UNKNOWN",
              "LINUX",
              "RHEL",
              "SUSE",
              "WINDOWS",
              "WINDOWS_WITH_SQL_STANDARD",
              "WINDOWS_WITH_SQL_WEB",
              "WINDOWS_WITH_SQL_SERVER_ENTERPRISE",
              "LINUX_WITH_SQL_STANDARD",
              "LINUX_WITH_SQL_WEB",
              "LINUX_WITH_SQL_SERVER_ENTERPRISE"
            ]
          },
          "type": {
            "type": "string",
            "description": "Reserved instance type",
            "enum": [
              "STANDARD",
              "CONVERTIBLE"
            ]
          },
          "location": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "accountId": {
            "type": "string",
            "description": "Account ID"
          },
          "accountDisplayName": {
            "type": "string",
            "description": "Account display name"
          },
          "targetId": {
            "type": "string",
            "description": "The associated target ID of the account"
          },
          "masterAccountId": {
            "type": "string",
            "description": "Master account ID"
          },
          "term": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "payment": {
            "type": "string",
            "description": "Payment option",
            "enum": [
              "ALL_UPFRONT",
              "PARTIAL_UPFRONT",
              "NO_UPFRONT"
            ]
          },
          "onDemandPrice": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "costPrice": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "coupons": {
            "$ref": "#/components/schemas/StatApiDTO"
          },
          "totalCoupons": {
            "type": "number",
            "description": "Total coupons provided by the cbtp the vm matched with",
            "format": "float"
          },
          "expDate": {
            "type": "string",
            "description": "Expiration date"
          },
          "instanceCount": {
            "type": "integer",
            "description": "Number of reserved instance with the same type, template, platform etc..",
            "format": "int32"
          },
          "tenancy": {
            "type": "string",
            "description": "Tenancy",
            "enum": [
              "DEFAULT",
              "DEDICATED",
              "HOST"
            ]
          },
          "upFrontCost": {
            "type": "number",
            "description": "Up front cost",
            "format": "double"
          },
          "actualHourlyCost": {
            "type": "number",
            "description": "Actual hourly cost",
            "format": "double"
          },
          "effectiveHourlyCost": {
            "type": "number",
            "description": "Effective hourly cost",
            "format": "double"
          },
          "isExpired": {
            "type": "boolean",
            "description": "Whether the RI be expired by a date provided"
          },
          "expDateEpochTime": {
            "type": "integer",
            "description": "Expiration Date in epoch time",
            "format": "int64"
          },
          "cloudType": {
            "type": "string",
            "description": "Cloud Type",
            "enum": [
              "AWS",
              "AZURE",
              "GCP",
              "HYBRID",
              "UNKNOWN"
            ]
          },
          "scopeType": {
            "type": "string",
            "description": "Whether the RI scope is Single or Shared (Azure)",
            "enum": [
              "SINGLE",
              "SHARED",
              "UNKNOWN"
            ]
          },
          "appliedScopes": {
            "type": "array",
            "description": "List of applied scope UUIDs- only provided when scope is Single (Azure)",
            "items": {
              "type": "string"
            }
          },
          "orderID": {
            "type": "string",
            "description": "The Order ID of the RI (Azure)"
          },
          "trueID": {
            "type": "string",
            "description": "The ID of the RI"
          },
          "coveredEntityCount": {
            "type": "integer",
            "description": "Count of workload entities covered by the reserved instance",
            "format": "int32"
          },
          "undiscoveredAccountsCoveredCount": {
            "type": "integer",
            "description": "Count of undiscovered accounts covered by the reserved instance",
            "format": "int32"
          },
          "sizeFlexible": {
            "type": "boolean"
          },
          "toBuy": {
            "type": "boolean"
          }
        },
        "description": "Model to describe a Reserved Instance"
      },
      "ReservedInstancePurchaseSettingsDTO": {
        "type": "object",
        "properties": {
          "awsProfile": {
            "$ref": "#/components/schemas/PurchaseProfileDTO"
          },
          "azureProfile": {
            "$ref": "#/components/schemas/PurchaseProfileDTO"
          }
        }
      },
      "ResizeActionDetailsApiDTO": {
        "required": [
          "actionDetailType",
          "actionType"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string"
          },
          "subType": {
            "type": "string"
          },
          "actionDetailType": {
            "type": "string"
          }
        },
        "description": "Parent class for resize action details. Implementing classes include: CloudResizeActionDetailsApiDTO."
      },
      "ResourceApiDTO": {
        "type": "object",
        "properties": {
          "stats": {
            "type": "array",
            "description": "Statistics, e.g. Number of CPU, Memory size, Disk size, ...",
            "items": {
              "$ref": "#/components/schemas/StatApiDTO"
            }
          },
          "provider": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "type": {
            "type": "string",
            "description": "Type of the resource"
          },
          "template": {
            "type": "string",
            "description": "Template used to fulfill the resources"
          },
          "relatedResources": {
            "type": "array",
            "description": "ID of resources related to this resource",
            "items": {
              "type": "string"
            }
          },
          "linkedResources": {
            "type": "array",
            "description": "resources related to this resource. For now, this will only contain the cluster",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          }
        },
        "description": "Model to describe the Resources of a Template"
      },
      "ResourceGroupApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "parentUuid": {
                "type": "string",
                "description": "Parent Business Account uuid (e.g subscription in Azure) where the Resource Group belongs to."
              },
              "parentDisplayName": {
                "type": "string",
                "description": "Parent Business Account display name (e.g subscription in Azure) where the Resource Group belongs to."
              }
            },
            "description": "Model to describe a Resource Group: a collection of Azure Resource Groups containing VMs and DBs and, possibly other Service Entities."
          }
        ]
      },
      "RoleApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name of the role"
          }
        },
        "description": "Model to describe a User Role, it describe the permissions of an user over the Ops. Manager capabilities"
      },
      "SAMLIdpApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "idpURL": {
            "type": "string",
            "description": "The SAML IDP URL"
          },
          "isSAMLOnly": {
            "type": "boolean"
          },
          "isSingleLogoutEnabled": {
            "type": "boolean"
          }
        },
        "description": "Model to describe an SAML IDP. It contains IDP URL and is SAML ONLY enabled or not."
      },
      "STEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "displayName": {
                "type": "string",
                "description": "Display Name"
              },
              "name": {
                "type": "string",
                "description": "Name"
              },
              "productName": {
                "type": "string",
                "description": "Product Name"
              },
              "productType": {
                "type": "string",
                "description": "Product Type"
              },
              "deviceId": {
                "type": "string",
                "description": "Device ID"
              },
              "deviceName": {
                "type": "string",
                "description": "Device Name"
              },
              "externalNames": {
                "type": "array",
                "description": "External Names",
                "items": {
                  "type": "string"
                }
              },
              "altName": {
                "type": "string",
                "description": "Alternative Name "
              },
              "ssdDiskCount": {
                "type": "integer",
                "description": "SSD Disk Count",
                "format": "int64"
              },
              "rpm7200DiskCount": {
                "type": "integer",
                "description": "RPM 7200 Disk Count",
                "format": "int64"
              },
              "rpm10KDiskCount": {
                "type": "integer",
                "description": "RPM 10K Disk Count",
                "format": "int64"
              },
              "rpm15KDiskCount": {
                "type": "integer",
                "description": "RPM 15K Disk Count",
                "format": "int64"
              },
              "getvSeriesDiskCount": {
                "type": "integer",
                "description": "VSeries Disk Count",
                "format": "int64"
              },
              "ssdDiskIOPSCapacity": {
                "type": "number",
                "description": "SSD Disk IOPS Capacity",
                "format": "double"
              },
              "rpm7200DiskIOPSCapacity": {
                "type": "number",
                "description": "RPM 7200 Disk IOPS Capacity",
                "format": "double"
              },
              "rpm10KDiskIOPSCapacity": {
                "type": "number",
                "description": "RPM 10K Disk IOPS Capacity",
                "format": "double"
              },
              "rpm15KDiskIOPSCapacity": {
                "type": "number",
                "description": "RPM 15K Disk IOPS Capacity",
                "format": "double"
              },
              "getvSeriesDiskIOPSCapacity": {
                "type": "number",
                "description": "VSeries Disk IOPS Capacity",
                "format": "double"
              },
              "technologyType": {
                "type": "string",
                "description": "HCI Technology Type"
              },
              "rawCapacity": {
                "type": "integer",
                "description": "HCI Raw Capacity",
                "format": "int64"
              },
              "rawFreespace": {
                "type": "integer",
                "description": "HCI Raw Freespace",
                "format": "int64"
              },
              "rawUncommitted": {
                "type": "integer",
                "description": "HCI Raw Uncommitted",
                "format": "int64"
              },
              "redundancyMethod": {
                "type": "string",
                "description": "HCI Redundancy Method"
              },
              "failuresToTolerate": {
                "type": "integer",
                "description": "HCI Failures To Tolerate",
                "format": "int32"
              },
              "spaceReservationPct": {
                "type": "integer",
                "description": "HCI Space Reservation Percentage",
                "format": "int32"
              }
            },
            "description": "Model to describe Storage attributes"
          }
        ]
      },
      "SaaSReportingConfigApiDTO": {
        "required": [
          "configuration",
          "enabled"
        ],
        "type": "object",
        "properties": {
          "configuration": {
            "type": "string",
            "description": "SaaS Reporting Encoded Configuration"
          },
          "enabled": {
            "type": "boolean",
            "description": "SaaS Reporting Configuration Information"
          }
        },
        "description": "SaaS Reporting Configuration Information"
      },
      "SavingsInvestmentsApiDTO": {
        "required": [
          "savingsInvestmentsTotal"
        ],
        "type": "object",
        "properties": {
          "csp": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "account": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "resourceGroup": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "region": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "entity": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "actionChainId": {
            "type": "string",
            "description": "The actionChainId associated with this savings/investments value"
          },
          "entityType": {
            "type": "string",
            "description": "The entityType associated with this savings/investments value",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          },
          "actionType": {
            "type": "string",
            "description": "The actionType associated with this savings/investments value",
            "enum": [
              "NONE",
              "START",
              "MOVE",
              "SCALE",
              "ALLOCATE",
              "SUSPEND",
              "TERMINATE",
              "SPAWN",
              "ADD_PROVIDER",
              "CHANGE",
              "REMOVE_PROVIDER",
              "PROVISION",
              "RECONFIGURE",
              "RESIZE",
              "RESIZE_CAPACITY",
              "WARN",
              "RECONFIGURE_THRESHOLD",
              "DELETE",
              "RIGHT_SIZE",
              "RESERVE_ON_PM",
              "RESERVE_ON_DS",
              "RESIZE_FOR_EFFICIENCY",
              "RESIZE_FOR_PERFORMANCE",
              "CROSS_TARGET_MOVE",
              "MOVE_TOGETHER",
              "ACTIVATE",
              "DEACTIVATE",
              "BUY_RI"
            ]
          },
          "savingsInvestmentsTotal": {
            "$ref": "#/components/schemas/SavingsInvestmentsSnapshotApiDTO"
          },
          "savingsInvestmentsSnapshot": {
            "type": "array",
            "description": "The list of Savings/Investments snapshots based on the selected time period",
            "items": {
              "$ref": "#/components/schemas/SavingsInvestmentsSnapshotApiDTO"
            }
          },
          "tag": {
            "$ref": "#/components/schemas/SavingsInvestmentsTagApiDTO"
          }
        },
        "description": "Model to describe Savings/Investments"
      },
      "SavingsInvestmentsApiInputDTO": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "List of uuid to use as scope",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "description": "Filters to apply to the requested savings/investment. Supported values: CSP, ACCOUNT, RESOURCE_GROUP, REGION, ENTITY, ACTION_CHAIN, ENTITY_TYPE, ACTION_TYPE",
            "items": {
              "$ref": "#/components/schemas/SavingsInvestmentsFilterApiDTO"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "Execute a groupBy on the values of the savings/investment. Supported values: CSP, ACCOUNT, RESOURCE_GROUP, REGION, ENTITY, ACTION_CHAIN, ENTITY_TYPE, ACTION_TYPE",
            "items": {
              "type": "string",
              "enum": [
                "CSP",
                "ACCOUNT",
                "RESOURCE_GROUP",
                "REGION",
                "ENTITY",
                "ACTION_CHAIN",
                "ENTITY_TYPE",
                "ACTION_TYPE",
                "TAG_KEY",
                "TAG_VAL",
                "TAG_TYPE"
              ]
            }
          },
          "startDate": {
            "type": "string",
            "description": "Start time of the period to filter, if empty the current savings/investment will be processed"
          },
          "endDate": {
            "type": "string",
            "description": "End time of the period to filter, if empty the current savings/investment will be processed"
          },
          "includeSnapshots": {
            "type": "boolean",
            "description": "Include time period snapshots of savings/investment. Could be daily or monthly"
          },
          "includeOnlySavings": {
            "type": "boolean",
            "description": "Include only the Savings values"
          },
          "includeOnlyInvestments": {
            "type": "boolean",
            "description": "Include only the Investments values"
          }
        },
        "description": "Model to describe the request of a SavingsInvestment."
      },
      "SavingsInvestmentsFilterApiDTO": {
        "required": [
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the filter, E.G: ACTION_TYPE, RESOURCE_GROUP ...",
            "enum": [
              "CSP",
              "ACCOUNT",
              "RESOURCE_GROUP",
              "REGION",
              "ENTITY",
              "ACTION_CHAIN",
              "ENTITY_TYPE",
              "ACTION_TYPE",
              "TAG_KEY",
              "TAG_VAL",
              "TAG_TYPE"
            ]
          },
          "value": {
            "type": "string",
            "description": "value of the filter"
          }
        },
        "description": "Model to describe the filter applied to a Savings/Investments response"
      },
      "SavingsInvestmentsSnapshotApiDTO": {
        "required": [
          "currency",
          "investments",
          "savings"
        ],
        "type": "object",
        "properties": {
          "savings": {
            "type": "number",
            "description": "Savings value",
            "format": "double"
          },
          "investments": {
            "type": "number",
            "description": "Investments value",
            "format": "double"
          },
          "date": {
            "type": "string",
            "description": "When the Saving/Investment was recorded"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          }
        },
        "description": "Model to describe the Saving/Investment of a snapshot, contains a list of Savings/Investments for a moment in time"
      },
      "SavingsInvestmentsTagApiDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Tag key"
          },
          "value": {
            "type": "string",
            "description": "Tag value"
          }
        },
        "description": "Tag information"
      },
      "ScenarioApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "description": "Users that owns the scenario",
            "items": {
              "$ref": "#/components/schemas/UserApiDTO"
            }
          },
          "type": {
            "type": "string",
            "description": "Type of the scenario"
          },
          "scope": {
            "type": "array",
            "description": "List of entities/group that define the Scope",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "projectionDays": {
            "type": "array",
            "description": "List of days that define when the scenario should run",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "topologyChanges": {
            "$ref": "#/components/schemas/TopologyChangesApiDTO"
          },
          "loadChanges": {
            "$ref": "#/components/schemas/LoadChangesApiDTO"
          },
          "configChanges": {
            "$ref": "#/components/schemas/ConfigChangesApiDTO"
          },
          "timebasedTopologyChanges": {
            "$ref": "#/components/schemas/TimeBasedTopologyChangesApiDTO"
          }
        },
        "description": "Model to describe a What-If Scenario, composed by a list of changes"
      },
      "ScheduleApiDTO": {
        "required": [
          "endTime",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the schedule period, expressed using ISO8601 Format (YYYY-MM-DDTHH:MM:SS). This date is local to the timezone of the instance.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "End date of the schedule period, expressed using ISO8601 Format (YYYY-MM-DDTHH:MM:SS). This date is local to the timezone of the instance.",
            "format": "date",
            "example": "2019-04-04T00:00:00.000Z"
          },
          "startTime": {
            "type": "string",
            "description": "Start time in hours and minutes for the scheduled period in ISO8601. For example, 2019-04-04T17:15",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "End time in hours and minutes for the scheduled period in ISO8601. For example, 2019-04-04T19:15",
            "format": "date-time"
          },
          "recurrence": {
            "$ref": "#/components/schemas/RecurrenceApiDTO"
          },
          "timeZone": {
            "type": "string",
            "description": "The time zone name based on tz database"
          },
          "nextOccurrence": {
            "type": "string",
            "description": "The date and time of the next occurence of this schedule represented in ISO8601 local time (YYYY-MM-DDTHH:MM:SS). For example, 2019-04-04T19:15"
          },
          "nextOccurrenceTimestamp": {
            "type": "integer",
            "description": "The date and time of the next occurence of this schedule represented in Timestamp in milliseconds. For example, 1562100619000",
            "format": "int64"
          },
          "remaingTimeActiveInMs": {
            "type": "integer",
            "description": "The amount of time that the schedule is going to be active at the time of call in milliseconds. This field will not be populated if the schedule is not currently active.",
            "format": "int64"
          }
        },
        "description": "Model to describe the Schedule for a Settings Policy"
      },
      "ScheduleEntityResponseApiDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "error indicating the reason for failure",
            "example": "entityUuid not found"
          },
          "entityUUID": {
            "type": "string"
          }
        },
        "description": "represents a response of the attach/detach time span schedule to/from the parkable entity"
      },
      "ScheduleItemApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "ScheduleItem type discriminator. Describes which subclass of ScheduleItem is returned.",
            "example": "ParkingItemApiDTO"
          }
        },
        "description": "Base model to describe a ScheduleItem.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ScheduleTimeSpansApiDTO": {
        "required": [
          "timeZone"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Description of the schedule",
            "example": "Up 7-5 on weekdays"
          },
          "timeZone": {
            "type": "string",
            "description": "Timezone for the time spans in this schedule.  Should be chosen from the\nIANA Timezone Database here:  [https://www.iana.org/time-zones].  See \nthe list in wikipedia here: [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones]",
            "example": "America/New_York"
          },
          "timeSpans": {
            "$ref": "#/components/schemas/TimeSpanGroupApiDTO"
          }
        },
        "description": "Parking time span schedule"
      },
      "ScheduleTimeSpansInputApiDTO": {
        "type": "object",
        "properties": {
          "criteriaList": {
            "type": "array",
            "description": "The list of filters to apply in the search request.",
            "items": {
              "$ref": "#/components/schemas/FilterApiDTO"
            }
          },
          "logicalOperator": {
            "type": "string",
            "description": "Logical operator to be applied across all the criteria.",
            "enum": [
              "AND",
              "OR"
            ]
          }
        },
        "description": "Model to describe a filter for schedule timespans."
      },
      "ScopeUuidsApiInputDTO": {
        "required": [
          "uuids"
        ],
        "type": "object",
        "properties": {
          "uuids": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "List of uuids",
            "items": {
              "type": "string"
            }
          },
          "marketId": {
            "type": "string",
            "description": "Market ID associated with the requested items"
          }
        },
        "description": "Model to describe the request by UUIDs"
      },
      "SearchAllQueryApiDTO": {
        "required": [
          "select",
          "where"
        ],
        "type": "object",
        "properties": {
          "select": {
            "$ref": "#/components/schemas/SelectAllApiDTO"
          },
          "where": {
            "$ref": "#/components/schemas/WhereApiDTO"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationApiDTO"
          }
        },
        "description": "A query used to search across the entire topology (entities and groups)"
      },
      "SearchCountRecordApiDTO": {
        "required": [
          "count",
          "groupBys"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Count of entities.",
            "format": "int32",
            "readOnly": true
          },
          "groupBys": {
            "type": "array",
            "description": "List of fields describing the groupBys that this count represents",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/FieldValueApiDTO"
            }
          }
        },
        "description": "A count of entities."
      },
      "SearchQueryRecordApiDTO": {
        "required": [
          "oid",
          "values"
        ],
        "type": "object",
        "properties": {
          "oid": {
            "type": "integer",
            "description": "Unique identifier for the entity or group.",
            "format": "int64",
            "readOnly": true
          },
          "values": {
            "type": "array",
            "description": "Information about the entity or group.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/FieldValueApiDTO"
            }
          }
        },
        "description": "A record with information about an entity or a group."
      },
      "SelectAllApiDTO": {
        "type": "object",
        "properties": {
          "entityTypes": {
            "type": "array",
            "description": "Entity types to include in the response.",
            "readOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "Application",
                "ApplicationComponent",
                "ApplicationServer",
                "AvailabilityZone",
                "BusinessAccount",
                "BusinessApplication",
                "BusinessTransaction",
                "BusinessUser",
                "Chassis",
                "CloudService",
                "ComputeTier",
                "Container",
                "ContainerPod",
                "ContainerSpec",
                "Database",
                "DatabaseServer",
                "DatabaseServerTier",
                "DatabaseTier",
                "DataCenter",
                "DesktopPool",
                "DiskArray",
                "DPod",
                "HCIPhysicalMachine",
                "HypervisorServer",
                "Internet",
                "IOModule",
                "LoadBalancer",
                "LogicalPool",
                "Namespace",
                "Network",
                "PhysicalMachine",
                "ProcessorPool",
                "Region",
                "ReservedInstance",
                "Service",
                "ServiceProvider",
                "Storage",
                "StorageController",
                "StorageTier",
                "Switch",
                "Unknown",
                "ViewPod",
                "VirtualApplication",
                "VirtualDataCenter",
                "VirtualMachine",
                "VirtualVolume",
                "VPod",
                "WorkloadController",
                "ContainerPlatformCluster",
                "CloudCommitment",
                "ApplicationComponentSpec",
                "VirtualMachineSpec",
                "DocumentCollection",
                "NodeGroup",
                "PowerVMPhysicalMachine",
                "DataWarehouse",
                "DataWarehouseTier"
              ]
            }
          },
          "groupTypes": {
            "type": "array",
            "description": "Group types to include in the response.",
            "readOnly": true,
            "items": {
              "type": "string",
              "enum": [
                "Group",
                "Resource",
                "Cluster",
                "VMCluster",
                "StorageCluster",
                "BusinessAccountFolder",
                "BillingFamily",
                "NodePool"
              ]
            }
          }
        },
        "description": "Specification of what subset of types (entities and groups) should be returned."
      },
      "SelectEntityApiDTO": {
        "required": [
          "entityType"
        ],
        "type": "object",
        "properties": {
          "entityType": {
            "type": "string",
            "description": "Entity Type",
            "readOnly": true,
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Fields to fetch.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/FieldApiDTO"
            }
          }
        },
        "description": "Specification of what fields should be fetched in an entity search response."
      },
      "SelectGroupApiDTO": {
        "required": [
          "groupType"
        ],
        "type": "object",
        "properties": {
          "groupType": {
            "type": "string",
            "description": "Group Type.",
            "readOnly": true,
            "enum": [
              "Group",
              "Resource",
              "Cluster",
              "VMCluster",
              "StorageCluster",
              "BusinessAccountFolder",
              "BillingFamily",
              "NodePool"
            ]
          },
          "fields": {
            "type": "array",
            "description": "Fields to fetch.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/FieldApiDTO"
            }
          }
        },
        "description": "Specification of what fields should be fetched in a group search response."
      },
      "ServiceEntityApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discoveredBy": {
            "$ref": "#/components/schemas/TargetApiDTO"
          },
          "vendorIds": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The mapping of target identifier to vendor-provided identity of this entity on the remote target"
          },
          "priceIndex": {
            "type": "number",
            "description": "Price index of the Entity",
            "format": "float"
          },
          "state": {
            "type": "string",
            "description": "State",
            "enum": [
              "IDLE",
              "RESOURCE_ALLOCATION",
              "LAUNCH",
              "ACTIVE",
              "RESOURCE_RELEASE",
              "SUSPEND",
              "SUSPEND_PENDING",
              "TERMINATE_PENDING",
              "NOT_MONITORED",
              "MAINTENANCE",
              "FAILOVER",
              "UNKNOWN",
              "EVACUATED",
              "QUEUED",
              "NOT_FOUND"
            ]
          },
          "severity": {
            "type": "string",
            "description": "Highest severity of the Actions related to this entity",
            "enum": [
              "UNKNOWN",
              "NORMAL",
              "MINOR",
              "MAJOR",
              "CRITICAL"
            ]
          },
          "unplacementDetails": {
            "$ref": "#/components/schemas/UnplacementDetailsApiDTO"
          },
          "placedOn": {
            "type": "string",
            "description": "The comma-separated classNames of entities successfully placed on, used for Unplaced entities in a Plan Market - [DEPRECATED - EOL: 8.15.1 - Use: unplacementDetails.placedOn]"
          },
          "notPlacedOn": {
            "type": "string",
            "description": "The comma-separated classNames of entities could not be placed on, used for Unplaced entities in a Plan Market - [DEPRECATED - EOL: 8.15.1 - Use: unplacementDetails.reasons]"
          },
          "unplacedExplanation": {
            "type": "string",
            "description": "The reason(s) the entity could not be placed - [DEPRECATED - EOL: 8.15.1 - Use: unplacementDetails.reasons]"
          },
          "costPrice": {
            "type": "number",
            "description": "Cost price per Hour",
            "format": "float"
          },
          "severityBreakdown": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A Map of severity along with their count. E.g. {CRITICAL: 1, NORMAL: 10}"
          },
          "remoteId": {
            "type": "string",
            "description": "The identifier of this instance on the remote target from which it was discovered. [DEPRECATED - EOL: 8.15.1 - Use: vendorIds]"
          },
          "realtimeMarketReference": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "providers": {
            "type": "array",
            "description": "List of Providers",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "consumers": {
            "type": "array",
            "description": "List of Consumers",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "template": {
            "$ref": "#/components/schemas/TemplateApiDTO"
          },
          "numRelatedVMs": {
            "type": "integer",
            "description": "Number of related VMs",
            "format": "int32"
          },
          "connectedEntities": {
            "type": "array",
            "description": "Limited list of connected entities relevant to the service entity. This will not contain all connected entities.",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "aspects": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/EntityAspect"
            },
            "description": "Additional info about the Entity categorized as Aspects"
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Tags are the metadata defined in name/value pairs. Each name can have multiple values."
          },
          "onDemandRateBefore": {
            "type": "number",
            "description": "On-demand rate before actions",
            "format": "float"
          },
          "onDemandRateAfter": {
            "type": "number",
            "description": "On-demand rate after actions",
            "format": "float"
          }
        },
        "description": "Model to describe an Entity, e.g. Virtual Machine, Physical Machine, Storage"
      },
      "SettingActivePolicyApiDTO": {
        "required": [
          "numEntities",
          "settingsPolicy",
          "value"
        ],
        "type": "object",
        "properties": {
          "settingsPolicy": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "value": {
            "type": "string",
            "description": "Setting value declared in the Settings Policy"
          },
          "numEntities": {
            "type": "integer",
            "description": "Number of entities affected by the Settings Policy value",
            "format": "int32"
          }
        },
        "description": "Model to describe a Settings Policy that affect the value of a Setting"
      },
      "SettingApiDTO": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/object"
          },
          "valueDisplayName": {
            "type": "string",
            "description": "Display Name of the Value, in case the value is a Template or another entity",
            "readOnly": true
          },
          "defaultValue": {
            "$ref": "#/components/schemas/object"
          },
          "categories": {
            "type": "array",
            "description": "Category and sub categories of the setting",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "string",
            "description": "Define the type of the value",
            "enum": [
              "STRING",
              "NUMERIC",
              "INTEGER",
              "BOOLEAN",
              "LIST"
            ]
          },
          "valueObjectType": {
            "type": "string",
            "description": "The type of complex object values.  Defaults to 'String'.",
            "enum": [
              "String",
              "ReservedInstancePurchaseSettingsDTO"
            ]
          },
          "options": {
            "type": "array",
            "description": "List of allowable value for this setting",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SettingOptionApiDTO"
            }
          },
          "min": {
            "type": "number",
            "description": "If type is NUMERIC, this define the min limit",
            "format": "double",
            "readOnly": true
          },
          "max": {
            "type": "number",
            "description": "If type is NUMERIC, this define the max limit",
            "format": "double",
            "readOnly": true
          },
          "entityType": {
            "type": "string",
            "description": "Entity type for this Setting"
          },
          "range": {
            "$ref": "#/components/schemas/RangeApiDTO"
          },
          "scope": {
            "type": "string",
            "description": "Define the visibility of the setting. E.G. a Local Setting is only visible when associated with an Entity/Group",
            "readOnly": true,
            "enum": [
              "GLOBAL",
              "LOCAL"
            ]
          },
          "activeSettingsPolicies": {
            "type": "array",
            "description": "List of Settings Policies that are affecting the final value of this setting",
            "items": {
              "$ref": "#/components/schemas/SettingActivePolicyApiDTO"
            }
          },
          "sourceGroupName": {
            "type": "string",
            "description": "Source group name for setting value"
          },
          "sourceGroupUuid": {
            "type": "string",
            "description": "Source group uuid for setting value"
          }
        },
        "description": "Generic model to describe a Setting.  Sub types include StringSettingApiDTO and RIPurchaseProfilesSettingApiDTO.",
        "discriminator": {
          "propertyName": "valueObjectType"
        }
      },
      "SettingApiDTOSerializable": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/object"
          },
          "valueDisplayName": {
            "type": "string",
            "description": "Display Name of the Value, in case the value is a Template or another entity",
            "readOnly": true
          },
          "defaultValue": {
            "$ref": "#/components/schemas/object"
          },
          "categories": {
            "type": "array",
            "description": "Category and sub categories of the setting",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "string",
            "description": "Define the type of the value",
            "enum": [
              "STRING",
              "NUMERIC",
              "INTEGER",
              "BOOLEAN",
              "LIST"
            ]
          },
          "valueObjectType": {
            "type": "string",
            "description": "The type of complex object values.  Defaults to 'String'.",
            "enum": [
              "String",
              "ReservedInstancePurchaseSettingsDTO"
            ]
          },
          "options": {
            "type": "array",
            "description": "List of allowable value for this setting",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SettingOptionApiDTO"
            }
          },
          "min": {
            "type": "number",
            "description": "If type is NUMERIC, this define the min limit",
            "format": "double",
            "readOnly": true
          },
          "max": {
            "type": "number",
            "description": "If type is NUMERIC, this define the max limit",
            "format": "double",
            "readOnly": true
          },
          "entityType": {
            "type": "string",
            "description": "Entity type for this Setting"
          },
          "range": {
            "$ref": "#/components/schemas/RangeApiDTO"
          },
          "scope": {
            "type": "string",
            "description": "Define the visibility of the setting. E.G. a Local Setting is only visible when associated with an Entity/Group",
            "readOnly": true,
            "enum": [
              "GLOBAL",
              "LOCAL"
            ]
          },
          "activeSettingsPolicies": {
            "type": "array",
            "description": "List of Settings Policies that are affecting the final value of this setting",
            "items": {
              "$ref": "#/components/schemas/SettingActivePolicyApiDTO"
            }
          },
          "sourceGroupName": {
            "type": "string",
            "description": "Source group name for setting value"
          },
          "sourceGroupUuid": {
            "type": "string",
            "description": "Source group uuid for setting value"
          }
        },
        "description": "Generic model to describe a Setting.  Sub types include StringSettingApiDTO and RIPurchaseProfilesSettingApiDTO."
      },
      "SettingApiDTOString": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/object"
          },
          "valueDisplayName": {
            "type": "string",
            "description": "Display Name of the Value, in case the value is a Template or another entity",
            "readOnly": true
          },
          "defaultValue": {
            "$ref": "#/components/schemas/object"
          },
          "categories": {
            "type": "array",
            "description": "Category and sub categories of the setting",
            "readOnly": true,
            "items": {
              "type": "string"
            }
          },
          "valueType": {
            "type": "string",
            "description": "Define the type of the value",
            "enum": [
              "STRING",
              "NUMERIC",
              "INTEGER",
              "BOOLEAN",
              "LIST"
            ]
          },
          "valueObjectType": {
            "type": "string",
            "description": "The type of complex object values.  Defaults to 'String'.",
            "enum": [
              "String",
              "ReservedInstancePurchaseSettingsDTO"
            ]
          },
          "options": {
            "type": "array",
            "description": "List of allowable value for this setting",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/SettingOptionApiDTO"
            }
          },
          "min": {
            "type": "number",
            "description": "If type is NUMERIC, this define the min limit",
            "format": "double",
            "readOnly": true
          },
          "max": {
            "type": "number",
            "description": "If type is NUMERIC, this define the max limit",
            "format": "double",
            "readOnly": true
          },
          "entityType": {
            "type": "string",
            "description": "Entity type for this Setting"
          },
          "range": {
            "$ref": "#/components/schemas/RangeApiDTO"
          },
          "scope": {
            "type": "string",
            "description": "Define the visibility of the setting. E.G. a Local Setting is only visible when associated with an Entity/Group",
            "readOnly": true,
            "enum": [
              "GLOBAL",
              "LOCAL"
            ]
          },
          "activeSettingsPolicies": {
            "type": "array",
            "description": "List of Settings Policies that are affecting the final value of this setting",
            "items": {
              "$ref": "#/components/schemas/SettingActivePolicyApiDTO"
            }
          },
          "sourceGroupName": {
            "type": "string",
            "description": "Source group name for setting value"
          },
          "sourceGroupUuid": {
            "type": "string",
            "description": "Source group uuid for setting value"
          }
        },
        "description": "Generic model to describe a Setting.  Sub types include StringSettingApiDTO and RIPurchaseProfilesSettingApiDTO."
      },
      "SettingOptionApiDTO": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SettingsManagerApiDTO": {
        "required": [
          "category",
          "settings"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "Category of the Manager"
          },
          "settings": {
            "type": "array",
            "description": "List of Settings contained in the Manager",
            "items": {
              "$ref": "#/components/schemas/SettingApiDTOSerializable"
            }
          }
        },
        "description": "Model to describe a Category Manager for the settings"
      },
      "SettingsPolicyApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "entityType": {
            "type": "string",
            "description": "Type of the Settings Policy. E.G. VirtualMachine, PhysicalMachine, ..."
          },
          "scopes": {
            "type": "array",
            "description": "List of scopes where the settings are applied, on create/edit, only Uuid is required. If null it's considered Global scope",
            "items": {
              "$ref": "#/components/schemas/GroupApiDTO"
            }
          },
          "settingsManagers": {
            "type": "array",
            "description": "List of groups of Settings to activate in this Policy",
            "items": {
              "$ref": "#/components/schemas/SettingsManagerApiDTO"
            }
          },
          "schedule": {
            "$ref": "#/components/schemas/ScheduleApiDTO"
          },
          "disabled": {
            "type": "boolean",
            "description": "Control if the policy is Enabled or Disabled"
          },
          "note": {
            "type": "string",
            "description": "Note for this Policy"
          },
          "readOnly": {
            "type": "boolean",
            "description": "If true, prevents users from deleting or modifying the SettingPolicy."
          },
          "default": {
            "type": "boolean"
          }
        },
        "description": "Model to describe a Setting Policy: a group of Settings that are applied based on Scope and/or Schedule"
      },
      "SiteInformationApiDTO": {
        "type": "object",
        "properties": {
          "tunnelComponents": {
            "$ref": "#/components/schemas/TunnelComponents"
          },
          "siteId": {
            "type": "string",
            "description": "Site Id"
          },
          "clientOperatorVersion": {
            "type": "string",
            "description": "Client Operator Image version"
          },
          "autoUpdateEnabled": {
            "type": "boolean",
            "description": "Is Auto Update Enabled?"
          },
          "lastUpdated": {
            "type": "integer",
            "description": "Site Information Last Updated in unix epoch seconds format",
            "format": "int64"
          },
          "probes": {
            "type": "array",
            "description": "List of Probes",
            "items": {
              "$ref": "#/components/schemas/ProbeDeploymentApiDTO"
            }
          }
        },
        "description": "Hybrid SaaS Network Site information"
      },
      "SkippedActionApiDTO": {
        "required": [
          "actionId"
        ],
        "type": "object",
        "properties": {
          "actionId": {
            "type": "string",
            "description": "Action ID"
          },
          "reason": {
            "type": "string",
            "description": "Reason why action was skipped"
          }
        },
        "description": "Model to describe an action that was skipped in execution."
      },
      "StatApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "capacity": {
            "$ref": "#/components/schemas/StatValueApiDTO"
          },
          "reserved": {
            "$ref": "#/components/schemas/StatValueApiDTO"
          },
          "relatedEntityType": {
            "type": "string",
            "description": "E.G.virtual machine"
          },
          "filters": {
            "type": "array",
            "description": "describe the grouping options used to generate the output",
            "items": {
              "$ref": "#/components/schemas/StatFilterApiDTO"
            }
          },
          "relatedEntity": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "numRelatedEntities": {
            "type": "integer",
            "description": "Number of providers or consumers for this statistic, 'relatedEntity' and 'numRelatedEntities' are mutually exclusive",
            "format": "int32"
          },
          "units": {
            "type": "string",
            "description": "Units, used for Commodities stats. E.G. $/h"
          },
          "values": {
            "$ref": "#/components/schemas/StatValueApiDTO"
          },
          "value": {
            "type": "number",
            "description": "Simple value, equal to values.avg.",
            "format": "float"
          },
          "commoditySource": {
            "$ref": "#/components/schemas/StatCommoditySourceApiDTO"
          },
          "histUtilizations": {
            "type": "array",
            "description": "Commodity historical utilization values",
            "items": {
              "$ref": "#/components/schemas/StatHistUtilizationApiDTO"
            }
          }
        },
        "description": "Model to describe a Statistic"
      },
      "StatApiInputDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the stat"
          },
          "relatedEntityType": {
            "type": "string",
            "description": "Used to get stats from different entity types in the supply chain of {uuid} E.G.costPrice of the VMs where the scope is a PM"
          },
          "filters": {
            "type": "array",
            "description": "Filters to apply to the requested stats. Commodities supported values: key = {commodity_key}, relation = sold|bought, virtualDisk = {uuid}. Cost Price supported values: cumulative = true|false, cloudService = {uuid}, target = {uuid}, CSP = {name}, category = {name}, businessUnit = {uuid}, costComponent = COMPUTE|IP|LICENSE|STORAGE, costComponentArtifact = {key}. Please note that the costPrice stat is deprecated and will EOL in 8.12.1. Use the dedicated 'cost' endpoints in /entities, /groups and /markets instead.Action stats supported values: actionTypes = {actionType}, actionModes: {action_mode}, actionStates: {action_state}, riskSubCategory: Performance Assurance|Efficiency Improvement|Prevention|Compliance, riskSeverity: UNKNOWN|NORMAL|MINOR|MAJOR|CRITICAL",
            "items": {
              "$ref": "#/components/schemas/StatFilterApiDTO"
            }
          },
          "groupBy": {
            "type": "array",
            "description": "Execute a groupBy on the values of the stats. Commodities supported values: key, relatedEntity, virtualDisk. Cost Price supported values: cloudService, target, CSP, category, businessUnit, costComponent, costComponentArtifact. Please note that the costPrice stat is deprecated and will EOL in 8.12.1. Use the dedicated 'cost' endpoints in /entities, /groups and /markets instead.Action stats supported values: actionTypes, actionModes, actionStates, risk, riskSubCategory, riskSeverity",
            "items": {
              "type": "string"
            }
          },
          "historyType": {
            "type": "string",
            "description": "Query the histUtilization table for these historyTypes",
            "enum": [
              "Percentile",
              "Smoothed"
            ]
          }
        },
        "description": "Model to describe the request of a Stat. Please note that the costPrice stat is deprecated and will EOL in 8.12.1. Use the dedicated 'cost' endpoints in /entities, /groups and /markets instead. "
      },
      "StatCommoditySourceApiDTO": {
        "type": "object",
        "properties": {
          "capacityCommoditySource": {
            "type": "string",
            "description": "Commodity source for capacity"
          },
          "usedCommoditySource": {
            "type": "string",
            "description": "Commodity source for usage"
          },
          "capacitySourceIndex": {
            "type": "integer",
            "description": "Commodity source operation index for capacity",
            "format": "int32"
          },
          "usedSourceIndex": {
            "type": "integer",
            "description": "Commodity source operation index for usage",
            "format": "int32"
          }
        },
        "description": "Model to describe commodity source for a single statistic, e.g. commodity source for VCPU (capacity and usage)"
      },
      "StatFilterApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type of the filter, E.G: actionTypes, category, ..."
          },
          "value": {
            "type": "string",
            "description": "value of the filter"
          },
          "displayName": {
            "type": "string",
            "description": "display name of the value, E.G: displayName if 'value' is an oid or an enum"
          }
        },
        "description": "Model to describe the filter applied to a Statistic"
      },
      "StatHistUtilizationApiDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Historical utilization type"
          },
          "usage": {
            "type": "number",
            "description": "Historical usage",
            "format": "float"
          },
          "capacity": {
            "type": "number",
            "description": "Historical capacity",
            "format": "float"
          },
          "resizeMaxScalingObservationPeriod": {
            "type": "number",
            "description": "Resize max scaling observation period. Affects on amount of data points considered for action generation process. Value in days.",
            "format": "float"
          },
          "resizeScalingAggressiveness": {
            "type": "number",
            "description": "Resize scaling aggressiveness. Describes how aggressively Turbonomic will resize in response of resource utilization. Value in percents. 100% least aggressive, 95% most aggressive.",
            "format": "float"
          }
        },
        "description": "Model to describe a historical utilization statistic, e.g. the P95 vCPU or P95 vMEM of a VM over (up to) NN days observation period."
      },
      "StatPeriodApiInputDTO": {
        "required": [
          "statistics"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start time of the period to filter, if empty the current stats will be processed"
          },
          "endDate": {
            "type": "string",
            "description": "End time of the period to filter, if empty the current stats will be processed"
          },
          "statistics": {
            "type": "array",
            "description": "List of requested statistics, if empty all stats will be processed",
            "items": {
              "$ref": "#/components/schemas/StatApiInputDTO"
            }
          }
        },
        "description": "Model to describe the request for Statistics by a Time range"
      },
      "StatScopesApiInputDTO": {
        "type": "object",
        "properties": {
          "scopes": {
            "type": "array",
            "description": "List of uuid to use as scope",
            "items": {
              "type": "string"
            }
          },
          "period": {
            "$ref": "#/components/schemas/StatPeriodApiInputDTO"
          },
          "relatedType": {
            "type": "string",
            "description": "Get the stats for the entity type related to the scopes"
          }
        },
        "description": "Model to describe the request for Statistics in multiple Scopes"
      },
      "StatSnapshotApiDTO": {
        "required": [
          "statistics"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "description": "When the statistics were recorded"
          },
          "statistics": {
            "type": "array",
            "description": "List of statistics, e.g. Price Index, Commodities values, Cost price, Number of VMs in a Group, ...",
            "items": {
              "$ref": "#/components/schemas/StatApiDTO"
            }
          },
          "epoch": {
            "type": "string",
            "description": "An indicator of whether the snapshot represents historical, projected or plan data. Should be used in conjunction with the date field to understand the context of this stat snapshot.",
            "enum": [
              "HISTORICAL",
              "CURRENT",
              "PROJECTED",
              "PLAN_SOURCE",
              "PLAN_PROJECTED"
            ]
          }
        },
        "description": "Model to describe the Statistics of a snapshot, contains a list of Statistics for a moment in time"
      },
      "StatValueApiDTO": {
        "type": "object",
        "properties": {
          "max": {
            "type": "number",
            "description": "Max value",
            "format": "float"
          },
          "min": {
            "type": "number",
            "description": "Min value",
            "format": "float"
          },
          "avg": {
            "type": "number",
            "description": "Average value",
            "format": "float"
          },
          "total": {
            "type": "number",
            "description": "Total value - sum of average values in a group",
            "format": "float"
          },
          "totalMax": {
            "type": "number",
            "description": "Total max value - sum of max values in a group",
            "format": "float"
          },
          "totalMin": {
            "type": "number",
            "description": "Total min value - sum of min values in a group",
            "format": "float"
          }
        },
        "description": "Model to describe a single statistic, e.g. the CPU of a PM Group"
      },
      "StringListFilterApiDTO": {
        "required": [
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "description": "String list for a comparison.",
            "items": {
              "type": "string"
            }
          },
          "operator": {
            "type": "string",
            "description": "Operator for a comparison.",
            "enum": [
              "EQ",
              "NEQ"
            ]
          },
          "caseSensitive": {
            "type": "boolean",
            "description": "If true, the query string will match case-sensitivity."
          }
        },
        "description": "Model to describe a filter by a string list and a operator."
      },
      "StringSettingApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SettingApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "Value of the setting.  Type indicated by the `valueObjectType` field.  The default type is `String`"
              },
              "defaultValue": {
                "type": "string",
                "description": "Default value before any change",
                "readOnly": true
              }
            },
            "description": "Model to describe a Setting"
          }
        ]
      },
      "SupplyChainStatsApiInputDTO": {
        "required": [
          "uuids"
        ],
        "type": "object",
        "properties": {
          "uuids": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "List of uuids used to build the supply chain",
            "items": {
              "type": "string"
            }
          },
          "types": {
            "type": "array",
            "description": "List of Types to filter",
            "items": {
              "type": "string"
            }
          },
          "states": {
            "type": "array",
            "description": "List of States to filter",
            "items": {
              "type": "string",
              "enum": [
                "IDLE",
                "RESOURCE_ALLOCATION",
                "LAUNCH",
                "ACTIVE",
                "RESOURCE_RELEASE",
                "SUSPEND",
                "SUSPEND_PENDING",
                "TERMINATE_PENDING",
                "NOT_MONITORED",
                "MAINTENANCE",
                "FAILOVER",
                "UNKNOWN",
                "EVACUATED",
                "QUEUED",
                "NOT_FOUND"
              ]
            }
          },
          "groupBy": {
            "type": "array",
            "description": "List of fields used to group the Stats",
            "items": {
              "type": "string",
              "enum": [
                "entityType",
                "state",
                "severity",
                "riskSubCategory",
                "template",
                "target",
                "businessUnit",
                "resourceGroup",
                "nodePool"
              ]
            }
          },
          "environmentType": {
            "type": "string",
            "description": "Filter the actions by Environment Type",
            "enum": [
              "ONPREM",
              "CLOUD"
            ]
          }
        },
        "description": "Model to describe a Filter for Entities"
      },
      "SupplychainApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "seMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/SupplychainEntryDTO"
            },
            "description": "Model to describe the type of Entity associated with a SupplyChainEntry"
          }
        },
        "description": "Model to describe the Supply Chain: the Environment is described as a chain between Producers and Consumers"
      },
      "SupplychainEntryDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "depth": {
            "type": "integer",
            "description": "Number to indicate the level of depth of the Entity type in the Supply Chain",
            "format": "int32"
          },
          "entitiesCount": {
            "type": "integer",
            "description": "Number of entity in this level of depth",
            "format": "int32"
          },
          "healthSummary": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Entities count by Severity"
          },
          "stateSummary": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Entities count by State"
          },
          "connectedProviderTypes": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of provider types connected to this level of depth",
            "items": {
              "type": "string"
            }
          },
          "connectedConsumerTypes": {
            "uniqueItems": true,
            "type": "array",
            "description": "List of consumer types connected to this level of depth",
            "items": {
              "type": "string"
            }
          },
          "instances": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceEntityApiDTO"
            },
            "description": "List of entities in this level of depth"
          }
        },
        "description": "Model to describe a Supply Chain Entry"
      },
      "TagApiDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Tag key"
          },
          "values": {
            "type": "array",
            "description": "Tag value",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Tag information"
      },
      "TagKeyApiDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Tag key"
          }
        }
      },
      "TargetApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "description": "Probe category.",
            "example": "Hypervisor"
          },
          "isProbeRegistered": {
            "type": "boolean",
            "description": "Indicator that is used to determine whether the associated probe is running and registered with the system",
            "example": false
          },
          "uiCategory": {
            "type": "string",
            "description": "Probe UI category.",
            "example": "Application Server, Billing, Cloud Management, Applications and Databases, Fabric and Network, Guest OS Processes, HYPERCONVERGED, HYPERVISOR, Load Balancer, Operations Manager Appliance, ORCHESTRATOR, PaaS, Storage, Storage Browsing, WINDOWS APPLICATION. There are also categories Custom and UNKNOWN to be used for new probe development."
          },
          "identifyingFields": {
            "type": "array",
            "description": "Array of field names used to differentiate probes of the same category. Most typically either the name/address field, or a combination of address and port.",
            "items": {
              "type": "string"
            }
          },
          "inputFields": {
            "type": "array",
            "description": "List of all InputFieldApiDTO objects for the target, analogous to the target addition form fields in the GUI.",
            "items": {
              "$ref": "#/components/schemas/InputFieldApiDTO"
            }
          },
          "lastValidated": {
            "type": "string",
            "description": "Date of the last validation - [DEPRECATED - Use: healthSummary.timeOfLastSuccessfulDiscovery]"
          },
          "status": {
            "type": "string",
            "description": "Description of the status of the most recent Validation Operation - [DEPRECATED - Use: healthSummary.healthState]",
            "example": "Validated, VALIDATION FAILED, UNKNOWN"
          },
          "derivedTargets": {
            "type": "array",
            "description": "Targets derived (created by discovery of) from this target. Populated depending on the TargetRelationship parameter.",
            "items": {
              "$ref": "#/components/schemas/TargetApiDTO"
            }
          },
          "patchedTargets": {
            "type": "array",
            "description": "Targets patched by this target",
            "items": {
              "$ref": "#/components/schemas/PatchedTargetDataApiDTO"
            }
          },
          "parentTargets": {
            "type": "array",
            "description": "Targets that created this target. Populated depending on the TargetRelationship parameter.",
            "items": {
              "$ref": "#/components/schemas/TargetApiDTO"
            }
          },
          "type": {
            "type": "string",
            "description": "Probe type. Turbonomic ships with the following probe types:  AppDynamics, Dynatrace, Datadog, Apptio Cloudability, Arista, AWS, Azure, Cisco APIC, Cisco HyperFlex, Cisco UCS Central, Cisco UCS Director, Cisco UCS Manager, CloudFoundry, CloudStack, Dell Compellent, EMC ScaleIO, EMC VMAX, EMC VNX, EMC VPLEX, EMC XtremIO, Hitachi Vantara, HP OneView, HPE 3PAR, Hyper-V, IBM PowerVM, Instana, JBoss, JVM, MSExchange, MySQL, NetApp, NetFlow, NetScaler, Nutanix, OpenStack, Oracle, Pivotal Ops Manager, Pure, Red Hat Virtualization Manager, sFlow, SNMP, SoftLayer, SQLServer, Tetration, Tomcat, vCenter, vCloudDirector, VMM, WebLogic, WebSphere, WMI, XenServer, "
          },
          "subType": {
            "type": "string",
            "description": "Target subType.",
            "example": "RedHatOpenShift"
          },
          "readonly": {
            "type": "boolean",
            "description": "Whether the target cannot be changed through public APIs."
          },
          "healthSummary": {
            "$ref": "#/components/schemas/TargetHealthSummaryApiDTO"
          }
        },
        "description": "Model to describe a Target. Targets are used to discover the components to create a connected virtual environment"
      },
      "TargetErrorDetailsApiDTO": {
        "required": [
          "targetErrorDetailsClass"
        ],
        "type": "object",
        "properties": {
          "targetErrorDetailsClass": {
            "type": "string"
          }
        },
        "description": "Additional details related to a target error.",
        "discriminator": {
          "propertyName": "targetErrorDetailsClass"
        }
      },
      "TargetHealthApiDTO": {
        "required": [
          "healthCategory",
          "healthClassDiscriminator",
          "rollupState",
          "targetName",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "errorText": {
            "type": "string",
            "description": "Error text (if there's any)."
          },
          "healthCategory": {
            "type": "string",
            "description": "The type of the health checks that are done.",
            "enum": [
              "TARGET",
              "ACTION",
              "COMPONENT"
            ]
          },
          "healthClassDiscriminator": {
            "type": "string",
            "description": "Health type discriminator. Describes which subclass of BaseHealthApiDTO is returned.",
            "example": "TargetHealthApiDTO"
          },
          "uuid": {
            "type": "string",
            "description": "UUID of the target."
          },
          "targetName": {
            "type": "string",
            "description": "Target display name."
          },
          "rollupState": {
            "type": "string",
            "description": "The health state of the target including its derived targets.",
            "example": "NORMAL",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          },
          "timeOfFirstFailure": {
            "type": "string",
            "description": "Time of first failure of validation/discovery (if the target is in failed state; ISO-8601 formatted String)."
          },
          "targetErrorDetails": {
            "type": "array",
            "description": "Error details related to a target. Supports multiple errors details.",
            "items": {
              "$ref": "#/components/schemas/TargetErrorDetailsApiDTO"
            }
          },
          "targetStatusSubcategory": {
            "type": "string",
            "enum": [
              "DISCOVERY",
              "VALIDATION",
              "DUPLICATION",
              "DELAYED_DATA"
            ]
          },
          "healthState": {
            "type": "string",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          }
        },
        "description": "A DTO that describes the health of a single target."
      },
      "TargetHealthSummaryApiDTO": {
        "required": [
          "healthState",
          "rollupState"
        ],
        "type": "object",
        "properties": {
          "healthState": {
            "type": "string",
            "description": "The target health state.",
            "example": "NORMAL",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          },
          "rollupState": {
            "type": "string",
            "description": "The health state of the target including its derived targets.",
            "example": "NORMAL",
            "enum": [
              "CRITICAL",
              "MAJOR",
              "MINOR",
              "NORMAL"
            ]
          },
          "timeOfLastSuccessfulDiscovery": {
            "type": "string",
            "description": "The last time a successful discovery finished on the target in ISO-8601 Format (YYYY-MM-DDTHH:MM:SSZ). For example 2021-07-07T20:33:49Z",
            "example": "2021-07-07T20:33:49.000Z"
          }
        },
        "description": "A DTO that describes target health."
      },
      "TargetOperationStageApiDTO": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of what this stage is doing (ideally in less that 70 characters). Example of description are \"validating credentials\" or \"retrieving business applications\"."
          },
          "status": {
            "$ref": "#/components/schemas/TargetOperationStageStatusApiDTO"
          },
          "subStages": {
            "type": "array",
            "description": "List with the subStages of he current stage.",
            "items": {
              "$ref": "#/components/schemas/TargetOperationStageApiDTO"
            }
          },
          "optional": {
            "type": "boolean",
            "description": "Is stage marked as optional."
          }
        },
        "description": "Holds all information related to a stage of discovery or validation."
      },
      "TargetOperationStageStatusApiDTO": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The state of this stage at the end of the discovery or validation.",
            "enum": [
              "DID_NOT_RUN",
              "SUCCESS",
              "FAILURE"
            ]
          },
          "summary": {
            "type": "string",
            "description": "The short message (ideally 70 characters or less) explaining the stage status. Example of such messages are \"invalid credentials\" or \"4 business application retrieved\"."
          },
          "fullExplanation": {
            "type": "string",
            "description": "The full message explaining the stage status. This explanation may include the instructions\n or hints on how to address issue if there is one."
          }
        },
        "description": "Holds all the information of this particular instance of the discovery or validation stage."
      },
      "TargetThirdPartyErrorDetailsApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TargetErrorDetailsApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "targetErrorType": {
                "type": "string",
                "description": "Target validation/discovery error type. ",
                "enum": [
                  "INTERNAL_PROBE_ERROR",
                  "CONNECTIVITY_ERROR",
                  "UNAUTHENTICATED",
                  "TOKEN_UNAVAILABLE",
                  "VERSION_NOT_SUPPORTED",
                  "DATA_ACCESS_ERROR",
                  "DUPLICATION",
                  "DELAYED_DATA",
                  "THIRD_PARTY_FAILURE"
                ]
              },
              "errorCode": {
                "type": "string",
                "description": "Error code related to the failure.",
                "example": "0x423232, 404, 400"
              },
              "endPoint": {
                "type": "string",
                "description": "End point which caused the third party api failure. This can be a complete URLor a method name while using the third party SDK."
              }
            },
            "description": "Class to capture target error details due to third partyapi failures at mediation layer."
          }
        ]
      },
      "TelemetryDTO": {
        "type": "object",
        "properties": {
          "telemetryTermsViewed": {
            "type": "boolean",
            "description": "Controls when an administrator should be shown the telemetry opt in"
          },
          "telemetryEnabled": {
            "type": "boolean",
            "description": "Controls whether analytics and telemetry are enabled"
          }
        },
        "description": "Model to describe the status of telemetry"
      },
      "TemplateApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "description": "The estimated cost of the template. Used for Physical Machine and Storage templates where the hardware cost is known.",
            "format": "float"
          },
          "model": {
            "type": "string",
            "description": "The model of the entire Physical Machine system.",
            "example": "Cisco UCS B200 M5 (Intel Xeon Gold 5115, 2.40 GHz), PowerEdge R940 (Intel Xeon Gold 6136, 3.00 GHz), etc."
          },
          "cpuModel": {
            "type": "string",
            "description": "The model of the CPU in the Physical Machine. ",
            "example": "Intel Xeon Gold 6130, AMD Opteron 6166 HE, etc."
          },
          "vendor": {
            "type": "string",
            "description": "Vendor of the templated entity",
            "example": "Cisco, Microsoft, HP, Novell"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "image": {
            "type": "string",
            "description": "Container Profile image"
          },
          "imageTag": {
            "type": "string",
            "description": "(UNUSED) Container Profile image tag"
          },
          "cmdWithArgs": {
            "type": "string",
            "description": "(UNUSED) Container command with Arguments"
          },
          "dbEngine": {
            "type": "string",
            "description": "Database engine, used for Database templates",
            "example": "PostgreSql, AuroraMySQL, SqlServer"
          },
          "dbEdition": {
            "type": "string",
            "description": "Database edition, used for Database templates",
            "example": "Standard One, Enterprise, Premium_P2"
          },
          "computeResources": {
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
            "description": "ResourceApiDTO describing the compute resources. Max 1 per template.",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "storageResources": {
            "type": "array",
            "description": "ResourceApiDTO describing the storage resources",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "networkResources": {
            "type": "array",
            "description": "ResourceApiDTO describing the network resources",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "infrastructureResources": {
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
            "description": "ResourceApiDTO describing the infrastructure resources. Max 1 per template",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "deploymentProfile": {
            "$ref": "#/components/schemas/DeploymentProfileApiDTO"
          },
          "discovered": {
            "type": "boolean",
            "description": "Indicates if the template is discovered or manually created",
            "example": false
          },
          "family": {
            "type": "string",
            "description": "For cloud templates, the instance family.",
            "example": "standardDSv2Family, standardNCFamily, r5d, r3"
          },
          "enableMatch": {
            "type": "boolean",
            "description": "Add to Infrastructure Cost Policy. Infrastructure Cost policies group hardware devices according to their cost",
            "example": false
          }
        },
        "description": "Model to describe a Template: contains the resources used to Deploy a VM or to Add Workload/Supply in a Plan"
      },
      "TemplateApiInputDTO": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Name of the template"
          },
          "className": {
            "type": "string",
            "description": "className",
            "enum": [
              "VirtualMachine",
              "PhysicalMachine",
              "Storage",
              "Container"
            ]
          },
          "price": {
            "type": "number",
            "description": "Cost price",
            "format": "float"
          },
          "model": {
            "type": "string",
            "description": "The Model of the entire Physical Machine system. For example: Cisco UCS B200 M5 (Intel Xeon Gold 5115, 2.40 GHz) vs. PowerEdge R940 (Intel Xeon Gold 6136, 3.00 GHz)"
          },
          "cpuModel": {
            "type": "string",
            "description": "The model of the CPU in the Physical Machine.  This is separate from the model of the entire Physical Machine. For example: Intel Xeon Gold 6130 vs. AMD Opteron 6166 HE"
          },
          "vendor": {
            "type": "string",
            "description": "Vendor"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "image": {
            "type": "string",
            "description": "Profile image, used for Container templates"
          },
          "imageTag": {
            "type": "string",
            "description": "Profile image tag, used for Container templates"
          },
          "cmdWithArgs": {
            "type": "string",
            "description": "Command with Arguments, used for Container templates"
          },
          "computeResources": {
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
            "description": "Compute resources: Number of CPU, CPU speed, Memory size, ...",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "storageResources": {
            "type": "array",
            "description": "Storage resources: Disk I/0, Disk Size, Percentage of Disk consumed",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "networkResources": {
            "type": "array",
            "description": "Network resources",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "infrastructureResources": {
            "maxItems": 1,
            "minItems": 0,
            "type": "array",
            "description": "Infrastructure resources: Power, Size, Cooling",
            "items": {
              "$ref": "#/components/schemas/ResourceApiDTO"
            }
          },
          "deploymentProfileId": {
            "type": "string",
            "description": "Ids of the Deployment Profiles associated with this Template"
          },
          "enableMatch": {
            "type": "boolean",
            "description": "Add to Infrastructure Cost Policy. Infrastructure Cost policies group hardware devices according to their cost"
          }
        },
        "description": "Model to describe a Template: contains the resources used to Deploy a VM or to Add Workload/Supply in a Plan"
      },
      "TemplatePriceAdjustmentDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "discount": {
            "type": "number",
            "description": "Entity discount percentage",
            "format": "float"
          },
          "priceAdjustment": {
            "$ref": "#/components/schemas/PriceAdjustmentDTO"
          },
          "family": {
            "type": "string",
            "description": "Family of a template, group of similar purpose templates. Available only for virtual machine templates."
          },
          "pricesPerDatacenter": {
            "type": "array",
            "description": "Template base rates per data center, provided for information purpose.",
            "items": {
              "$ref": "#/components/schemas/EntityPriceDTO"
            }
          }
        },
        "description": "Price adjustment information for a template within a business unit and specified pricing model."
      },
      "TemplateValidationStatusApiDTO": {
        "required": [
          "validationStatus"
        ],
        "type": "object",
        "properties": {
          "validationStatus": {
            "type": "string",
            "description": "The ValidationStatus is the result of template validation.",
            "enum": [
              "NOTFOUND",
              "INVALID",
              "VALID"
            ]
          },
          "validationErrors": {
            "type": "array",
            "description": "The list of validation errors by action type.",
            "items": {
              "type": "string"
            }
          },
          "lastTemplateValidationTime": {
            "type": "string",
            "description": "The lastTemplateValidationTime is the time in ISO-8601 format when the Webhook template was last validated."
          }
        },
        "description": "Model to define the template validation status data."
      },
      "TextConditionApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ConditionApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "A regular expression to be matched against the value of the field.",
                "readOnly": true
              }
            },
            "description": "A condition for a text field."
          }
        ]
      },
      "TextFieldValueApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FieldValueApiDTO"
          },
          {
            "required": [
              "value"
            ],
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value.",
                "readOnly": true
              }
            },
            "description": "A textual value of an entity field."
          }
        ]
      },
      "TimeBasedTopologyChangesApiDTO": {
        "type": "object",
        "properties": {
          "includeReservation": {
            "type": "boolean",
            "description": "Add the workload that is currently reserved"
          },
          "reservationCount": {
            "type": "integer",
            "description": "# of currently reserved VMs",
            "format": "int32",
            "readOnly": true
          },
          "addHistoryVMs": {
            "type": "boolean",
            "description": "Should historical vmNetGrowth be considered"
          },
          "vmNetGrowth": {
            "type": "integer",
            "description": "Number of workloads added during the last month",
            "format": "int32",
            "readOnly": true
          }
        },
        "description": "Topology changes based on a timeframe in the scenario"
      },
      "TimeSpanApiDTO": {
        "required": [
          "begins",
          "ends",
          "policy"
        ],
        "type": "object",
        "properties": {
          "begins": {
            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
            "type": "string",
            "description": "Start time of the time span"
          },
          "ends": {
            "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
            "type": "string",
            "description": "End time of the time span"
          },
          "policy": {
            "$ref": "#/components/schemas/ScheduleItemApiDTO"
          }
        },
        "description": "Schedule Time span information"
      },
      "TimeSpanGroupApiDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "TimeSpan group type discriminator. Describes which subclass of TimeSpanGroupApiDTO is returned.",
            "example": "WeekDayTimeSpansApiDTO"
          }
        },
        "description": "Base model to describe a TimeSpanGroup.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TopologyChangesApiDTO": {
        "type": "object",
        "properties": {
          "addList": {
            "type": "array",
            "description": "List of add changes in the Topology",
            "items": {
              "$ref": "#/components/schemas/AddObjectApiDTO"
            }
          },
          "removeList": {
            "type": "array",
            "description": "List of remove changes in the Topology",
            "items": {
              "$ref": "#/components/schemas/RemoveObjectApiDTO"
            }
          },
          "replaceList": {
            "type": "array",
            "description": "List of replace changes in the Topology",
            "items": {
              "$ref": "#/components/schemas/ReplaceObjectApiDTO"
            }
          },
          "migrateList": {
            "type": "array",
            "description": "List of migrate changes in the Topology",
            "items": {
              "$ref": "#/components/schemas/MigrateObjectApiDTO"
            }
          },
          "relievePressureList": {
            "type": "array",
            "description": "List of relieve pressure changes in the Topology",
            "items": {
              "$ref": "#/components/schemas/RelievePressureObjectApiDTO"
            }
          }
        },
        "description": "Topology changes in the scenario"
      },
      "TopologyDataDefinitionApiDTO": {
        "required": [
          "entityDefinitionData",
          "entityType"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "customEntityUuidList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discoveryState": {
            "type": "string",
            "description": "Discovery status for application topology.",
            "enum": [
              "IN_PROGRESS",
              "CREATED",
              "DETACHED"
            ]
          },
          "contextBased": {
            "type": "boolean",
            "description": "Defines if this Definition is Context-Based."
          },
          "entityType": {
            "type": "string",
            "description": "The type of service entity being defined",
            "enum": [
              "BusinessApplication",
              "BusinessTransaction",
              "Service"
            ]
          },
          "entityDefinitionData": {
            "$ref": "#/components/schemas/IEntityDefinitionData"
          }
        },
        "description": "Model to describe a user-defined topology definition."
      },
      "TopologyScopeApiDTO": {
        "type": "object",
        "properties": {
          "cloudServiceId": {
            "type": "string",
            "description": "The cloud service ID of the cloud commitment, e.g. aws::CS::AmazonRDS"
          },
          "cloudTierId": {
            "type": "string",
            "description": "The cloud tier ID of the cloud commitment, e.g. db.t3.micro"
          },
          "tenancy": {
            "type": "string",
            "description": "The tenancy of the cloud commitment, e.g. shared or dedicated",
            "enum": [
              "DEFAULT",
              "DEDICATED",
              "HOST"
            ]
          },
          "familyScope": {
            "$ref": "#/components/schemas/FamilyScopeApiDTO"
          },
          "databaseServerTierInfo": {
            "$ref": "#/components/schemas/DatabaseServerTierInfoApiDTO"
          }
        },
        "description": "Model to describe cloud commitment's topology scoped attributes"
      },
      "TunnelComponents": {
        "type": "object",
        "properties": {
          "router": {
            "type": "string",
            "description": "Skupper Router image information"
          },
          "siteController": {
            "type": "string",
            "description": "Skupper Site Controller image information"
          },
          "serviceController": {
            "type": "string",
            "description": "Skupper service controller image information"
          },
          "configSync": {
            "type": "string",
            "description": "Skupper Config Sync image information"
          }
        }
      },
      "UnplacementDetailsApiDTO": {
        "required": [
          "reasons"
        ],
        "type": "object",
        "properties": {
          "reasons": {
            "type": "array",
            "description": "Detailed information about why the entity could not be placed",
            "items": {
              "$ref": "#/components/schemas/UnplacementReasonApiDTO"
            }
          },
          "placedOn": {
            "type": "array",
            "description": "For Unplaced entities in a Plan Market, the providers that this entity was able to place on",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          }
        },
        "description": "Additional information provided for entities in a plan that are unplaced"
      },
      "UnplacementReasonApiDTO": {
        "type": "object",
        "properties": {
          "failedResources": {
            "type": "array",
            "description": "A list of resources that caused the entity not to be placed",
            "items": {
              "$ref": "#/components/schemas/FailedResourceApiDTO"
            }
          },
          "resourceOwner": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "providerType": {
            "type": "string",
            "description": "The entity type that sells the commodities that caused unplacement.",
            "enum": [
              "Application",
              "ApplicationComponent",
              "ApplicationServer",
              "AvailabilityZone",
              "BusinessAccount",
              "BusinessApplication",
              "BusinessTransaction",
              "BusinessUser",
              "Chassis",
              "CloudService",
              "ComputeTier",
              "Container",
              "ContainerPod",
              "ContainerSpec",
              "Database",
              "DatabaseServer",
              "DatabaseServerTier",
              "DatabaseTier",
              "DataCenter",
              "DesktopPool",
              "DiskArray",
              "DPod",
              "HCIPhysicalMachine",
              "HypervisorServer",
              "Internet",
              "IOModule",
              "LoadBalancer",
              "LogicalPool",
              "Namespace",
              "Network",
              "PhysicalMachine",
              "ProcessorPool",
              "Region",
              "ReservedInstance",
              "Service",
              "ServiceProvider",
              "Storage",
              "StorageController",
              "StorageTier",
              "Switch",
              "Unknown",
              "ViewPod",
              "VirtualApplication",
              "VirtualDataCenter",
              "VirtualMachine",
              "VirtualVolume",
              "VPod",
              "WorkloadController",
              "ContainerPlatformCluster",
              "CloudCommitment",
              "ApplicationComponentSpec",
              "VirtualMachineSpec",
              "DocumentCollection",
              "NodeGroup",
              "PowerVMPhysicalMachine",
              "DataWarehouse",
              "DataWarehouseTier"
            ]
          },
          "closestSeller": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "placementProblem": {
            "type": "string",
            "description": "Categorizes the reason which caused unplacement",
            "enum": [
              "COSTS_NOT_FOUND",
              "NOT_CONTROLLABLE",
              "UNSATISFIED_COMMODITIES"
            ]
          }
        },
        "description": "Details to describe why an entity could not be placed"
      },
      "UserApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Encoded password"
          },
          "roles": {
            "type": "array",
            "description": "Roles assigned to the user.",
            "items": {
              "$ref": "#/components/schemas/RoleApiDTO"
            }
          },
          "loginProvider": {
            "type": "string",
            "description": "Provider for the login",
            "enum": [
              "Local",
              "LDAP"
            ]
          },
          "type": {
            "type": "string",
            "description": "type",
            "enum": [
              "DedicatedCustomer",
              "SharedCustomer"
            ]
          },
          "scope": {
            "type": "array",
            "description": "List of scopes that the User is allowed to see",
            "items": {
              "$ref": "#/components/schemas/GroupApiDTO"
            }
          },
          "atdScope": {
            "type": "array",
            "description": "List of Application Topology Definitions that the User is allowed to see",
            "items": {
              "$ref": "#/components/schemas/BaseApiDTO"
            }
          },
          "features": {
            "type": "array",
            "description": "List of features that the user is allowed to see",
            "items": {
              "type": "string"
            }
          },
          "authToken": {
            "type": "string",
            "description": "The secured user token. [DEPRECATED - EOL: 8.15.1]"
          },
          "showSharedUserSC": {
            "type": "boolean"
          }
        },
        "description": "Model to describe an User"
      },
      "UtilizationApiDTO": {
        "type": "object",
        "properties": {
          "projectionDay": {
            "type": "integer",
            "description": "Projection day, indicate when to apply the change",
            "format": "int32"
          },
          "target": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "percentage": {
            "type": "integer",
            "description": "Utilization percentage change",
            "format": "int32"
          }
        },
        "description": "Model to describe a utilization change in the scenario"
      },
      "VMEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "os": {
                "type": "string",
                "description": "The operating system type. E.G. 'Linux', 'Windows' and 'Unknown' if not found."
              },
              "ip": {
                "type": "array",
                "description": "The IP address. Can be IPv4 or IPv6",
                "items": {
                  "type": "string"
                }
              },
              "connectedNetworks": {
                "type": "array",
                "description": "The connected Networks",
                "items": {
                  "$ref": "#/components/schemas/BaseApiDTO"
                }
              },
              "numVCPUs": {
                "type": "integer",
                "description": "Number of vCPUs",
                "format": "int32"
              },
              "acceleratorCards": {
                "type": "array",
                "description": "The Accelerator/GPU cards",
                "items": {
                  "$ref": "#/components/schemas/AcceleratorCardApiDTO"
                }
              },
              "coresPerSocketRatio": {
                "type": "integer",
                "description": "Cores per socket ratio",
                "format": "int32"
              },
              "processorPoolName": {
                "type": "string",
                "description": "Processor Pool"
              },
              "hasDedicatedProcessors": {
                "type": "boolean",
                "description": "Has Dedicated Processors",
                "example": true
              },
              "processorCompatibilityMode": {
                "type": "string",
                "description": "Processor Compatibility Mode",
                "example": "POWER8"
              },
              "activeMemoryExpansionEnabled": {
                "type": "boolean",
                "description": "Active Memory Expansion Enabled",
                "example": true
              },
              "resourceMonitoringControlState": {
                "type": "string",
                "description": "Resource Monitoring Control (RMC) State",
                "example": "active"
              },
              "sharingMode": {
                "type": "string",
                "description": "Sharing Mode",
                "example": "uncapped"
              },
              "dedicatedSharingMode": {
                "type": "string",
                "description": "Dedicated Sharing Mode",
                "example": "share_idle_pros"
              },
              "nonDisruptiveMaxPU": {
                "type": "number",
                "description": "Non-disruptive Processing Units max resize constraint",
                "format": "double"
              },
              "nonDisruptiveMinPU": {
                "type": "number",
                "description": "Non-disruptive Processing Units min resize constraint",
                "format": "double"
              },
              "ebsOptimized": {
                "type": "boolean",
                "description": "EBS Optimized"
              },
              "sessions": {
                "type": "array",
                "description": "Information about sessions established by a BusinessUser to this VirtualMachine.",
                "items": {
                  "$ref": "#/components/schemas/BusinessUserSessionApiDTO"
                }
              },
              "vendorToolsVersion": {
                "type": "string",
                "description": "Vendor Tools Version"
              },
              "resourceId": {
                "type": "string",
                "description": "Resource identifier of the virtual machine. For example, the resource id in Azure, the ARN in AWS, or the full resource name in GCP."
              },
              "creationTimeStamp": {
                "type": "integer",
                "description": "Timestamp in milliseconds for the creation of the virtual machine.",
                "format": "int64"
              },
              "vgpuProfile": {
                "type": "string",
                "description": "vGPU profile used by virtual machine."
              },
              "hardwareVersion": {
                "type": "string",
                "description": "Hardware Compatibility Version",
                "example": "19.0"
              },
              "passthroughGPUIds": {
                "type": "array",
                "description": "The PCI address ID for passthrough GPUs",
                "example": "0000:81:00.0",
                "items": {
                  "type": "string"
                }
              },
              "passthroughGPUModels": {
                "type": "array",
                "description": "The Model for passthrough GPUs",
                "example": "NVIDIA A100-PCIE-40GB",
                "items": {
                  "type": "string"
                }
              },
              "ahublicense": {
                "type": "boolean"
              }
            },
            "description": "Model to describe Virtual Machine attributes"
          }
        ]
      },
      "VirtualDiskApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "tier": {
            "type": "string",
            "description": "The tier of the Virtual Disk"
          },
          "actions": {
            "type": "array",
            "description": "The related action: Move or Delete",
            "items": {
              "$ref": "#/components/schemas/ActionApiDTO"
            }
          },
          "stats": {
            "type": "array",
            "description": "The related statistics for this virtual disk",
            "items": {
              "$ref": "#/components/schemas/StatApiDTO"
            }
          },
          "attachedVirtualMachine": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "provider": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "dataCenter": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "environmentType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "CLOUD",
              "ONPREM",
              "HYBRID"
            ]
          },
          "lastModified": {
            "type": "integer",
            "description": "Last Modified",
            "format": "int64"
          },
          "businessAccount": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "resourceGroup": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "creationTime": {
            "type": "string",
            "description": "Creation time"
          },
          "skuName": {
            "type": "string",
            "description": "Sku name"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot id"
          },
          "encryption": {
            "type": "string",
            "description": "Encryption"
          },
          "attachmentState": {
            "type": "string",
            "description": "Attachment state",
            "enum": [
              "AVAILABLE",
              "IN_USE",
              "UNKNOWN"
            ]
          },
          "diskRole": {
            "type": "string",
            "description": "Disk Role",
            "enum": [
              "OS Disk",
              "Data Disk"
            ]
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "ephemeral": {
            "type": "string",
            "description": "Ephemeral"
          },
          "lastAttachedVm": {
            "type": "string",
            "description": "Name of the VM this volume was last attached to."
          },
          "numDaysUnattached": {
            "type": "string",
            "description": "Number of days ago this volume was last attached."
          },
          "hourlyBilledOps": {
            "type": "number",
            "description": "Average number of billed operations per hour.",
            "format": "double"
          },
          "creationTimeStamp": {
            "type": "integer",
            "description": "Timestamp in milliseconds for the creation of the virtual disk.",
            "format": "int64"
          },
          "attachedVMStorageCompatibility": {
            "type": "string",
            "description": "Storage compatibility for virtualDisks's attached VM(s). The compatibility will affect scale analysis for the volume. If an attached VM is not PREMIUM compatible, the volume will never scale to a premium StorageTier",
            "enum": [
              "PREMIUM",
              "STANDARD"
            ]
          },
          "storageUsageType": {
            "type": "string",
            "description": "Usage type for the volume, i.e., what the volume is used for.",
            "enum": [
              "SITE_RECOVERY",
              "BACKUP",
              "STANDARD"
            ]
          },
          "resourceId": {
            "type": "string",
            "description": "Resource identifier of the volume. For example, the resource id in Azure, the ARN in AWS, or the full resource name in GCP."
          },
          "redundancyType": {
            "type": "string",
            "description": "Specifies the redundancy type for the volume"
          }
        },
        "description": "Model to describe a Virtual Disk"
      },
      "VirtualDisksAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "virtualDisks": {
                "type": "array",
                "description": "List of Virtual Disks",
                "items": {
                  "$ref": "#/components/schemas/VirtualDiskApiDTO"
                }
              }
            },
            "description": "Model to describe Virtual Disks attributes"
          }
        ]
      },
      "VirtualMachineSpecAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "cloudTierIds": {
                "type": "string",
                "description": "Type of the instances",
                "example": "[t3.micro]"
              },
              "minSize": {
                "type": "integer",
                "description": "Minimum group size",
                "format": "int32"
              },
              "maxSize": {
                "type": "integer",
                "description": "Maximum group size",
                "format": "int32"
              },
              "desiredSize": {
                "type": "integer",
                "description": "Default size of group when no provider-initiated scaling actions are applied",
                "format": "int32"
              },
              "instanceTemplateName": {
                "type": "string",
                "description": "Name of template or configuration used to create the scale group. Ex: Name of Launch Template or Launch Configuration in AWS or the Instance Template name in Google"
              },
              "instanceTemplateVersion": {
                "type": "string",
                "description": "Version of template or configuration used to create the scale group. Ex: Version of Launch Template in AWS"
              },
              "availabilityZones": {
                "type": "string",
                "description": "Available Zones",
                "example": "[us-east-1a]"
              },
              "terminationPolicies": {
                "type": "string",
                "description": "Termination policies",
                "example": "[Default]"
              },
              "resourceId": {
                "type": "string",
                "description": "Resource ID containing region, account ID, asg ID etc"
              },
              "accountId": {
                "type": "string",
                "description": "Account ID"
              },
              "currentInstanceCount": {
                "type": "integer",
                "description": "Current number of instances of ASG",
                "format": "int32"
              },
              "suspendedProcesses": {
                "type": "string",
                "description": "List of suspended processes"
              },
              "creationTimeStamp": {
                "type": "integer",
                "description": "Date/time first discovered",
                "format": "int64"
              }
            },
            "description": "Model to describe a cloud scale group's attributes. A cloud scale group is is a collection of virtual machine (VM) instances that are created from a common source. Ex: AWS Auto Scaling Groups."
          }
        ]
      },
      "VirtualVolumeEntityAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "files": {
                "type": "array",
                "description": "Files comprised in the volume",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Model to describe virtual volumes and their related files"
          }
        ]
      },
      "WebhookApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkflowAspect"
          },
          {
            "required": [
              "method",
              "url"
            ],
            "type": "object",
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL that HTTP request is made to."
              },
              "method": {
                "type": "string",
                "description": "The http method used to make the request.",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ]
              },
              "template": {
                "type": "string",
                "description": "The template for the body of request."
              },
              "authenticationMethod": {
                "type": "string",
                "description": "The authentication method to use for the request.",
                "enum": [
                  "NONE",
                  "BASIC",
                  "OAUTH"
                ]
              },
              "username": {
                "type": "string",
                "description": "The username for the authenticated request."
              },
              "password": {
                "type": "string",
                "description": "The password for the authenticated request."
              },
              "trustSelfSignedCertificates": {
                "type": "boolean",
                "description": "If true, self-signed certificates will be trusted when using HTTPS connections. Defaults to 'false'."
              },
              "headers": {
                "type": "array",
                "description": "The request headers.",
                "items": {
                  "$ref": "#/components/schemas/RequestHeader"
                }
              },
              "templateValidationStatus": {
                "$ref": "#/components/schemas/TemplateValidationStatusApiDTO"
              },
              "policyValidationStatus": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/TemplateValidationStatusApiDTO"
                },
                "description": "The status of Webhook Template Validation by action types in related policy(s). The key is the policyId."
              },
              "mediaType": {
                "type": "string",
                "description": "The media type of the workflow template",
                "enum": [
                  "JSON",
                  "XML",
                  "TEXT"
                ]
              },
              "proxy": {
                "$ref": "#/components/schemas/HttpProxyDTO"
              },
              "oauthData": {
                "$ref": "#/components/schemas/OAuthDataApiDTO"
              }
            },
            "description": "Model to describe a webhook"
          }
        ]
      },
      "WeekDayTimeSpansApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TimeSpanGroupApiDTO"
          },
          {
            "type": "object",
            "properties": {
              "sunday": {
                "type": "array",
                "description": "Schedule time spans information for sunday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "monday": {
                "type": "array",
                "description": "Schedule time spans information for monday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "tuesday": {
                "type": "array",
                "description": "Schedule time spans information for tuesday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "wednesday": {
                "type": "array",
                "description": "Schedule time spans information for wednesday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "thursday": {
                "type": "array",
                "description": "Schedule time spans information for thursday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "friday": {
                "type": "array",
                "description": "Schedule time spans information for friday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              },
              "saturday": {
                "type": "array",
                "description": "Schedule time spans information for saturday",
                "items": {
                  "$ref": "#/components/schemas/TimeSpanApiDTO"
                }
              }
            },
            "description": "Weekly Schedule information"
          }
        ]
      },
      "WhereApiDTO": {
        "type": "object",
        "properties": {
          "relatedToScopes": {
            "type": "array",
            "description": "Restrict to entities related to these scopes.",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "conditions": {
            "type": "array",
            "description": "Restrict to entities satisfying these conditions.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/ConditionApiDTO"
            }
          }
        },
        "description": "Filter for entity or group queries."
      },
      "WidgetApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/BaseApiDTO"
          },
          "startPeriod": {
            "type": "string"
          },
          "endPeriod": {
            "type": "string"
          },
          "row": {
            "type": "integer",
            "format": "int32"
          },
          "column": {
            "type": "integer",
            "format": "int32"
          },
          "sizeRows": {
            "type": "integer",
            "format": "int32"
          },
          "sizeColumns": {
            "type": "integer",
            "format": "int32"
          },
          "widgetsetId": {
            "type": "integer",
            "format": "int64"
          },
          "widgetElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetElementApiDTO"
            }
          },
          "widgetSource": {
            "type": "string",
            "enum": [
              "UI_DEFAULT",
              "USER"
            ]
          }
        },
        "description": "Basic information of an entity"
      },
      "WidgetElementApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "row": {
            "type": "integer",
            "format": "int32"
          },
          "column": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "widgetId": {
            "type": "integer",
            "format": "int64"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatApiInputDTO"
            }
          },
          "datasets": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Basic information of an entity"
      },
      "WidgetsetApiDTO": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "startPeriod": {
            "type": "string"
          },
          "endPeriod": {
            "type": "string"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetApiDTO"
            }
          },
          "category": {
            "type": "string"
          },
          "scopeType": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "isSharedWithAllUsers": {
            "type": "boolean"
          }
        },
        "description": "Basic information of an entity"
      },
      "WorkflowApiDTO": {
        "required": [
          "discoveredBy",
          "type"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow"
          },
          "entityType": {
            "type": "string",
            "description": "Type of the entity associated"
          },
          "actionType": {
            "type": "string",
            "description": "Type of the action associated"
          },
          "parameters": {
            "type": "array",
            "description": "Input parameters for the workflow",
            "items": {
              "$ref": "#/components/schemas/InputFieldApiDTO"
            }
          },
          "discoveredBy": {
            "$ref": "#/components/schemas/TargetApiDTO"
          },
          "scriptPath": {
            "type": "string",
            "description": "Full path to workflow script (e.g. path to an ActionScript executable"
          },
          "actionPhase": {
            "type": "string",
            "description": "Action Phase to which workflow applies"
          },
          "timeLimitSeconds": {
            "type": "integer",
            "description": "Time limit for workflow execution, in seconds",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of this workflow",
            "enum": [
              "UCSD",
              "ACTION_SCRIPT",
              "SERVICENOW",
              "ACTIONSTREAM_KAFKA",
              "WEBHOOK"
            ]
          },
          "typeSpecificDetails": {
            "$ref": "#/components/schemas/WorkflowAspect"
          },
          "creationTime": {
            "type": "string",
            "description": "The creationTime is the time in ISO-8601 format when the workflow was originally created."
          },
          "lastModifiedTime": {
            "type": "string",
            "description": "The lastModifiedTime is the time in ISO-8601 format when the workflow was last modified."
          }
        },
        "description": "Model to describe a Workflow"
      },
      "WorkflowAspect": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "description": "Parent model to describe a type-specific workflow details",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "WorkflowOperationRequestApiDTO": {
        "required": [
          "actionId",
          "operation"
        ],
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "The operation that is being performed on the workflow",
            "enum": [
              "TEST"
            ]
          },
          "actionId": {
            "type": "integer",
            "description": "The ID of the action that we perform the workflow operation on",
            "format": "int64"
          }
        },
        "description": "The details of the requested operation on the workflow."
      },
      "WorkflowOperationResponseApiDTO": {
        "required": [
          "succeeded"
        ],
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "uuid": {
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "A user readable name of the api object.\nCannot be blank.\nThe UTF-8 encoding must be at most 255 bytes."
          },
          "className": {
            "type": "string"
          },
          "succeeded": {
            "type": "boolean",
            "description": "True if the workflow operation has succeeded."
          },
          "details": {
            "type": "string",
            "description": "Details of workflow operation result."
          }
        },
        "description": "Result of a workflow operation."
      },
      "WorkloadControllerAspectApiDTO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/EntityAspect"
          },
          {
            "type": "object",
            "properties": {
              "controllerType": {
                "type": "string",
                "description": "Information about workload controller type.",
                "enum": [
                  "CRON_JOB_INFO",
                  "CUSTOM_CONTROLLER_INFO",
                  "DAEMON_SET_INFO",
                  "DEPLOYMENT_INFO",
                  "JOB_INFO",
                  "REPLICA_SET_INFO",
                  "REPLICATION_CONTROLLER_INFO",
                  "STATEFUL_SET_INFO"
                ]
              },
              "customControllerType": {
                "type": "string",
                "description": "Information about custom controller type. Only set when the controllerType is CUSTOM_CONTROLLER_INFO."
              },
              "controllerReplicaCount": {
                "type": "integer",
                "description": "The number of active replicas controlled by the workload controller.",
                "format": "int32"
              }
            },
            "description": "Additional attributes for a WorkloadController"
          }
        ]
      }
    }
  },
  "x-original-swagger-version": "2.0"
}